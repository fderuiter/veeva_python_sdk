/*
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.VobjectsObjectNameActionsMergePostRequestInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{{vaultDNS}}/api", "login.veevavault.com/api" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return apiGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve API Versions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        apiGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve API Versions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = apiGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve API Versions (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMdlComponentsComponentTypeAndRecordNameFilesGet
     * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMdlComponentsComponentTypeAndRecordNameFilesGetCall(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/mdl/components/{component_type_and_record_name}/files"
            .replace("{" + "component_type_and_record_name" + "}", localVarApiClient.escapeString(componentTypeAndRecordName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMdlComponentsComponentTypeAndRecordNameFilesGetValidateBeforeCall(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'componentTypeAndRecordName' is set
        if (componentTypeAndRecordName == null) {
            throw new ApiException("Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameFilesGet(Async)");
        }

        return apiMdlComponentsComponentTypeAndRecordNameFilesGetCall(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Content File
     * 
     * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiMdlComponentsComponentTypeAndRecordNameFilesGet(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        apiMdlComponentsComponentTypeAndRecordNameFilesGetWithHttpInfo(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Content File
     * 
     * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiMdlComponentsComponentTypeAndRecordNameFilesGetWithHttpInfo(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = apiMdlComponentsComponentTypeAndRecordNameFilesGetValidateBeforeCall(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Content File (asynchronously)
     * 
     * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMdlComponentsComponentTypeAndRecordNameFilesGetAsync(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMdlComponentsComponentTypeAndRecordNameFilesGetValidateBeforeCall(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMdlComponentsComponentTypeAndRecordNameGet
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMdlComponentsComponentTypeAndRecordNameGetCall(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/mdl/components/{component_type_and_record_name}"
            .replace("{" + "component_type_and_record_name" + "}", localVarApiClient.escapeString(componentTypeAndRecordName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMdlComponentsComponentTypeAndRecordNameGetValidateBeforeCall(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'componentTypeAndRecordName' is set
        if (componentTypeAndRecordName == null) {
            throw new ApiException("Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameGet(Async)");
        }

        return apiMdlComponentsComponentTypeAndRecordNameGetCall(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Component Record (MDL)
     * 
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiMdlComponentsComponentTypeAndRecordNameGet(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        apiMdlComponentsComponentTypeAndRecordNameGetWithHttpInfo(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Component Record (MDL)
     * 
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiMdlComponentsComponentTypeAndRecordNameGetWithHttpInfo(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = apiMdlComponentsComponentTypeAndRecordNameGetValidateBeforeCall(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Component Record (MDL) (asynchronously)
     * 
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMdlComponentsComponentTypeAndRecordNameGetAsync(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMdlComponentsComponentTypeAndRecordNameGetValidateBeforeCall(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMdlExecuteAsyncJobIdResultsGet
     * @param jobId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMdlExecuteAsyncJobIdResultsGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/mdl/execute_async/{job_id}/results"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMdlExecuteAsyncJobIdResultsGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling apiMdlExecuteAsyncJobIdResultsGet(Async)");
        }

        return apiMdlExecuteAsyncJobIdResultsGetCall(jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Asynchronous MDL Script Results
     * 
     * @param jobId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiMdlExecuteAsyncJobIdResultsGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        apiMdlExecuteAsyncJobIdResultsGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Asynchronous MDL Script Results
     * 
     * @param jobId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiMdlExecuteAsyncJobIdResultsGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = apiMdlExecuteAsyncJobIdResultsGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Asynchronous MDL Script Results (asynchronously)
     * 
     * @param jobId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMdlExecuteAsyncJobIdResultsGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMdlExecuteAsyncJobIdResultsGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMdlExecuteAsyncPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMdlExecuteAsyncPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/mdl/execute_async";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMdlExecuteAsyncPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return apiMdlExecuteAsyncPostCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Execute MDL Script Asynchronously
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiMdlExecuteAsyncPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        apiMdlExecuteAsyncPostWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Execute MDL Script Asynchronously
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiMdlExecuteAsyncPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = apiMdlExecuteAsyncPostValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Execute MDL Script Asynchronously (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMdlExecuteAsyncPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMdlExecuteAsyncPostValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMdlExecutePost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMdlExecutePostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/mdl/execute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMdlExecutePostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return apiMdlExecutePostCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Execute MDL Script
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiMdlExecutePost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        apiMdlExecutePostWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Execute MDL Script
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiMdlExecutePostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = apiMdlExecutePostValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Execute MDL Script (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMdlExecutePostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMdlExecutePostValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiMdlFilesPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMdlFilesPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/mdl/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiMdlFilesPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return apiMdlFilesPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Upload Content File
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiMdlFilesPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        apiMdlFilesPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Upload Content File
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiMdlFilesPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = apiMdlFilesPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload Content File (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiMdlFilesPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiMdlFilesPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for audittrailAuditTrailTypeGet
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time. (required)
     * @param startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail. (optional)
     * @param formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects. (optional)
     * @param events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call audittrailAuditTrailTypeGetCall(@javax.annotation.Nonnull String auditTrailType, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String allDates, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String objects, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audittrail/{audit_trail_type}"
            .replace("{" + "audit_trail_type" + "}", localVarApiClient.escapeString(auditTrailType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (allDates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all_dates", allDates));
        }

        if (formatResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format_result", formatResult));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (objects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("objects", objects));
        }

        if (events != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("events", events));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call audittrailAuditTrailTypeGetValidateBeforeCall(@javax.annotation.Nonnull String auditTrailType, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String allDates, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String objects, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auditTrailType' is set
        if (auditTrailType == null) {
            throw new ApiException("Missing the required parameter 'auditTrailType' when calling audittrailAuditTrailTypeGet(Async)");
        }

        return audittrailAuditTrailTypeGetCall(auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Audit Details
     * 
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time. (required)
     * @param startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail. (optional)
     * @param formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects. (optional)
     * @param events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void audittrailAuditTrailTypeGet(@javax.annotation.Nonnull String auditTrailType, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String allDates, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String objects, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        audittrailAuditTrailTypeGetWithHttpInfo(auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Audit Details
     * 
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time. (required)
     * @param startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail. (optional)
     * @param formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects. (optional)
     * @param events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> audittrailAuditTrailTypeGetWithHttpInfo(@javax.annotation.Nonnull String auditTrailType, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String allDates, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String objects, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = audittrailAuditTrailTypeGetValidateBeforeCall(auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Audit Details (asynchronously)
     * 
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time. (required)
     * @param startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
     * @param allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail. (optional)
     * @param formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects. (optional)
     * @param events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call audittrailAuditTrailTypeGetAsync(@javax.annotation.Nonnull String auditTrailType, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String allDates, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String objects, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = audittrailAuditTrailTypeGetValidateBeforeCall(auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authDiscoveryPost
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authDiscoveryPostCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/discovery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authDiscoveryPostValidateBeforeCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return authDiscoveryPostCall(accept, xVaultAPIClientID, _callback);

    }

    /**
     * Authentication Type Discovery
     * 
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void authDiscoveryPost(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        authDiscoveryPostWithHttpInfo(accept, xVaultAPIClientID);
    }

    /**
     * Authentication Type Discovery
     * 
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authDiscoveryPostWithHttpInfo(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = authDiscoveryPostValidateBeforeCall(accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Authentication Type Discovery (asynchronously)
     * 
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authDiscoveryPostAsync(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authDiscoveryPostValidateBeforeCall(accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authOauthSessionOathOidcProfileIdPost
     * @param oathOidcProfileId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authOauthSessionOathOidcProfileIdPostCall(@javax.annotation.Nonnull String oathOidcProfileId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/oauth/session/{oath_oidc_profile_id}"
            .replace("{" + "oath_oidc_profile_id" + "}", localVarApiClient.escapeString(oathOidcProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authOauthSessionOathOidcProfileIdPostValidateBeforeCall(@javax.annotation.Nonnull String oathOidcProfileId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oathOidcProfileId' is set
        if (oathOidcProfileId == null) {
            throw new ApiException("Missing the required parameter 'oathOidcProfileId' when calling authOauthSessionOathOidcProfileIdPost(Async)");
        }

        return authOauthSessionOathOidcProfileIdPostCall(oathOidcProfileId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * OAuth 2.0 / OpenID Connect
     * 
     * @param oathOidcProfileId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void authOauthSessionOathOidcProfileIdPost(@javax.annotation.Nonnull String oathOidcProfileId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        authOauthSessionOathOidcProfileIdPostWithHttpInfo(oathOidcProfileId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * OAuth 2.0 / OpenID Connect
     * 
     * @param oathOidcProfileId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authOauthSessionOathOidcProfileIdPostWithHttpInfo(@javax.annotation.Nonnull String oathOidcProfileId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = authOauthSessionOathOidcProfileIdPostValidateBeforeCall(oathOidcProfileId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * OAuth 2.0 / OpenID Connect (asynchronously)
     * 
     * @param oathOidcProfileId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authOauthSessionOathOidcProfileIdPostAsync(@javax.annotation.Nonnull String oathOidcProfileId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authOauthSessionOathOidcProfileIdPostValidateBeforeCall(oathOidcProfileId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authPost
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authPostCall(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authPostValidateBeforeCall(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return authPostCall(contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * User Name and Password
     * 
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void authPost(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        authPostWithHttpInfo(contentType, accept, xVaultAPIClientID);
    }

    /**
     * User Name and Password
     * 
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authPostWithHttpInfo(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = authPostValidateBeforeCall(contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * User Name and Password (asynchronously)
     * 
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authPostAsync(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authPostValidateBeforeCall(contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeClassNameDelete
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeClassNameDeleteCall(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code/{class_name}"
            .replace("{" + "class_name" + "}", localVarApiClient.escapeString(className.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeClassNameDeleteValidateBeforeCall(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling codeClassNameDelete(Async)");
        }

        return codeClassNameDeleteCall(className, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Single Source Code File
     * 
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void codeClassNameDelete(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        codeClassNameDeleteWithHttpInfo(className, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Single Source Code File
     * 
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codeClassNameDeleteWithHttpInfo(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = codeClassNameDeleteValidateBeforeCall(className, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Single Source Code File (asynchronously)
     * 
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeClassNameDeleteAsync(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeClassNameDeleteValidateBeforeCall(className, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeClassNameDisablePut
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeClassNameDisablePutCall(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code/{class_name}/disable"
            .replace("{" + "class_name" + "}", localVarApiClient.escapeString(className.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeClassNameDisablePutValidateBeforeCall(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling codeClassNameDisablePut(Async)");
        }

        return codeClassNameDisablePutCall(className, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Disable Vault Extension
     * 
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void codeClassNameDisablePut(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        codeClassNameDisablePutWithHttpInfo(className, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Disable Vault Extension
     * 
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codeClassNameDisablePutWithHttpInfo(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = codeClassNameDisablePutValidateBeforeCall(className, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable Vault Extension (asynchronously)
     * 
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeClassNameDisablePutAsync(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeClassNameDisablePutValidateBeforeCall(className, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeClassNameEnablePut
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeClassNameEnablePutCall(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code/{class_name}/enable"
            .replace("{" + "class_name" + "}", localVarApiClient.escapeString(className.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeClassNameEnablePutValidateBeforeCall(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling codeClassNameEnablePut(Async)");
        }

        return codeClassNameEnablePutCall(className, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Enable Vault Extension
     * 
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void codeClassNameEnablePut(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        codeClassNameEnablePutWithHttpInfo(className, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Enable Vault Extension
     * 
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codeClassNameEnablePutWithHttpInfo(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = codeClassNameEnablePutValidateBeforeCall(className, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable Vault Extension (asynchronously)
     * 
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeClassNameEnablePutAsync(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeClassNameEnablePutValidateBeforeCall(className, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeClassNameGet
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeClassNameGetCall(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code/{class_name}"
            .replace("{" + "class_name" + "}", localVarApiClient.escapeString(className.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeClassNameGetValidateBeforeCall(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling codeClassNameGet(Async)");
        }

        return codeClassNameGetCall(className, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Single Source Code File
     * 
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void codeClassNameGet(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        codeClassNameGetWithHttpInfo(className, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Single Source Code File
     * 
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codeClassNameGetWithHttpInfo(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = codeClassNameGetValidateBeforeCall(className, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Single Source Code File (asynchronously)
     * 
     * @param className The fully qualified class name of your file. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeClassNameGetAsync(@javax.annotation.Nonnull String className, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeClassNameGetValidateBeforeCall(className, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeProfilerGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeProfilerGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code/profiler";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeProfilerGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return codeProfilerGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Profiling Sessions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void codeProfilerGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        codeProfilerGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Profiling Sessions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codeProfilerGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = codeProfilerGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Profiling Sessions (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeProfilerGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeProfilerGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeProfilerPost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeProfilerPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code/profiler";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeProfilerPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return codeProfilerPostCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Create Profiling Session
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void codeProfilerPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        codeProfilerPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Create Profiling Session
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codeProfilerPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = codeProfilerPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Profiling Session (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeProfilerPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeProfilerPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeProfilerSessionNameActionsEndPost
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeProfilerSessionNameActionsEndPostCall(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code/profiler/{session_name}/actions/end"
            .replace("{" + "session_name" + "}", localVarApiClient.escapeString(sessionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeProfilerSessionNameActionsEndPostValidateBeforeCall(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionName' is set
        if (sessionName == null) {
            throw new ApiException("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameActionsEndPost(Async)");
        }

        return codeProfilerSessionNameActionsEndPostCall(sessionName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * End Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void codeProfilerSessionNameActionsEndPost(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        codeProfilerSessionNameActionsEndPostWithHttpInfo(sessionName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * End Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codeProfilerSessionNameActionsEndPostWithHttpInfo(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = codeProfilerSessionNameActionsEndPostValidateBeforeCall(sessionName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * End Profiling Session (asynchronously)
     * 
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeProfilerSessionNameActionsEndPostAsync(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeProfilerSessionNameActionsEndPostValidateBeforeCall(sessionName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeProfilerSessionNameDelete
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeProfilerSessionNameDeleteCall(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code/profiler/{session_name}"
            .replace("{" + "session_name" + "}", localVarApiClient.escapeString(sessionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeProfilerSessionNameDeleteValidateBeforeCall(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionName' is set
        if (sessionName == null) {
            throw new ApiException("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameDelete(Async)");
        }

        return codeProfilerSessionNameDeleteCall(sessionName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void codeProfilerSessionNameDelete(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        codeProfilerSessionNameDeleteWithHttpInfo(sessionName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codeProfilerSessionNameDeleteWithHttpInfo(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = codeProfilerSessionNameDeleteValidateBeforeCall(sessionName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Profiling Session (asynchronously)
     * 
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeProfilerSessionNameDeleteAsync(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeProfilerSessionNameDeleteValidateBeforeCall(sessionName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeProfilerSessionNameGet
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeProfilerSessionNameGetCall(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code/profiler/{session_name}"
            .replace("{" + "session_name" + "}", localVarApiClient.escapeString(sessionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeProfilerSessionNameGetValidateBeforeCall(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionName' is set
        if (sessionName == null) {
            throw new ApiException("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameGet(Async)");
        }

        return codeProfilerSessionNameGetCall(sessionName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void codeProfilerSessionNameGet(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        codeProfilerSessionNameGetWithHttpInfo(sessionName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codeProfilerSessionNameGetWithHttpInfo(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = codeProfilerSessionNameGetValidateBeforeCall(sessionName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Profiling Session (asynchronously)
     * 
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeProfilerSessionNameGetAsync(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeProfilerSessionNameGetValidateBeforeCall(sessionName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeProfilerSessionNameResultsGet
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeProfilerSessionNameResultsGetCall(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code/profiler/{session_name}/results"
            .replace("{" + "session_name" + "}", localVarApiClient.escapeString(sessionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeProfilerSessionNameResultsGetValidateBeforeCall(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionName' is set
        if (sessionName == null) {
            throw new ApiException("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameResultsGet(Async)");
        }

        return codeProfilerSessionNameResultsGetCall(sessionName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download Profiling Session Results
     * 
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void codeProfilerSessionNameResultsGet(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        codeProfilerSessionNameResultsGetWithHttpInfo(sessionName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download Profiling Session Results
     * 
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codeProfilerSessionNameResultsGetWithHttpInfo(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = codeProfilerSessionNameResultsGetValidateBeforeCall(sessionName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Profiling Session Results (asynchronously)
     * 
     * @param sessionName The name of the session, for example,  baseline__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codeProfilerSessionNameResultsGetAsync(@javax.annotation.Nonnull String sessionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeProfilerSessionNameResultsGetValidateBeforeCall(sessionName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePut
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePutCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePutValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return codePutCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Add or Replace Single Source Code File
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void codePut(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        codePutWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Add or Replace Single Source Code File
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codePutWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = codePutValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add or Replace Single Source Code File (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePutAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePutValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for compositesTreesEdlHierarchyOrTemplateActionsListnodesPost
     * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compositesTreesEdlHierarchyOrTemplateActionsListnodesPostCall(@javax.annotation.Nonnull String edlHierarchyOrTemplate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/composites/trees/{edl_hierarchy_or_template}/actions/listnodes"
            .replace("{" + "edl_hierarchy_or_template" + "}", localVarApiClient.escapeString(edlHierarchyOrTemplate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compositesTreesEdlHierarchyOrTemplateActionsListnodesPostValidateBeforeCall(@javax.annotation.Nonnull String edlHierarchyOrTemplate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edlHierarchyOrTemplate' is set
        if (edlHierarchyOrTemplate == null) {
            throw new ApiException("Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(Async)");
        }

        return compositesTreesEdlHierarchyOrTemplateActionsListnodesPostCall(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Specific Root Nodes
     * 
     * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(@javax.annotation.Nonnull String edlHierarchyOrTemplate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        compositesTreesEdlHierarchyOrTemplateActionsListnodesPostWithHttpInfo(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Specific Root Nodes
     * 
     * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> compositesTreesEdlHierarchyOrTemplateActionsListnodesPostWithHttpInfo(@javax.annotation.Nonnull String edlHierarchyOrTemplate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = compositesTreesEdlHierarchyOrTemplateActionsListnodesPostValidateBeforeCall(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Specific Root Nodes (asynchronously)
     * 
     * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compositesTreesEdlHierarchyOrTemplateActionsListnodesPostAsync(@javax.annotation.Nonnull String edlHierarchyOrTemplate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = compositesTreesEdlHierarchyOrTemplateActionsListnodesPostValidateBeforeCall(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for compositesTreesEdlHierarchyOrTemplateGet
     * @param edlHierarchyOrTemplate  (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compositesTreesEdlHierarchyOrTemplateGetCall(@javax.annotation.Nonnull String edlHierarchyOrTemplate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/composites/trees/{edl_hierarchy_or_template}"
            .replace("{" + "edl_hierarchy_or_template" + "}", localVarApiClient.escapeString(edlHierarchyOrTemplate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compositesTreesEdlHierarchyOrTemplateGetValidateBeforeCall(@javax.annotation.Nonnull String edlHierarchyOrTemplate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edlHierarchyOrTemplate' is set
        if (edlHierarchyOrTemplate == null) {
            throw new ApiException("Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateGet(Async)");
        }

        return compositesTreesEdlHierarchyOrTemplateGetCall(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Root Nodes
     * 
     * @param edlHierarchyOrTemplate  (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void compositesTreesEdlHierarchyOrTemplateGet(@javax.annotation.Nonnull String edlHierarchyOrTemplate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        compositesTreesEdlHierarchyOrTemplateGetWithHttpInfo(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Root Nodes
     * 
     * @param edlHierarchyOrTemplate  (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> compositesTreesEdlHierarchyOrTemplateGetWithHttpInfo(@javax.annotation.Nonnull String edlHierarchyOrTemplate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = compositesTreesEdlHierarchyOrTemplateGetValidateBeforeCall(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Root Nodes (asynchronously)
     * 
     * @param edlHierarchyOrTemplate  (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compositesTreesEdlHierarchyOrTemplateGetAsync(@javax.annotation.Nonnull String edlHierarchyOrTemplate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = compositesTreesEdlHierarchyOrTemplateGetValidateBeforeCall(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for compositesTreesEdlHierarchyVParentNodeIdChildrenGet
     * @param parentNodeId The ID of a parent node in the hierarchy. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compositesTreesEdlHierarchyVParentNodeIdChildrenGetCall(@javax.annotation.Nonnull String parentNodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/composites/trees/edl_hierarchy__v/{parent_node_id}/children"
            .replace("{" + "parent_node_id" + "}", localVarApiClient.escapeString(parentNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compositesTreesEdlHierarchyVParentNodeIdChildrenGetValidateBeforeCall(@javax.annotation.Nonnull String parentNodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parentNodeId' is set
        if (parentNodeId == null) {
            throw new ApiException("Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenGet(Async)");
        }

        return compositesTreesEdlHierarchyVParentNodeIdChildrenGetCall(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve a Node&#39;s Children
     * 
     * @param parentNodeId The ID of a parent node in the hierarchy. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void compositesTreesEdlHierarchyVParentNodeIdChildrenGet(@javax.annotation.Nonnull String parentNodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        compositesTreesEdlHierarchyVParentNodeIdChildrenGetWithHttpInfo(parentNodeId, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve a Node&#39;s Children
     * 
     * @param parentNodeId The ID of a parent node in the hierarchy. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> compositesTreesEdlHierarchyVParentNodeIdChildrenGetWithHttpInfo(@javax.annotation.Nonnull String parentNodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = compositesTreesEdlHierarchyVParentNodeIdChildrenGetValidateBeforeCall(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve a Node&#39;s Children (asynchronously)
     * 
     * @param parentNodeId The ID of a parent node in the hierarchy. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compositesTreesEdlHierarchyVParentNodeIdChildrenGetAsync(@javax.annotation.Nonnull String parentNodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = compositesTreesEdlHierarchyVParentNodeIdChildrenGetValidateBeforeCall(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for compositesTreesEdlHierarchyVParentNodeIdChildrenPut
     * @param parentNodeId The ID of a parent node in the hierarchy. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compositesTreesEdlHierarchyVParentNodeIdChildrenPutCall(@javax.annotation.Nonnull String parentNodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/composites/trees/edl_hierarchy__v/{parent_node_id}/children"
            .replace("{" + "parent_node_id" + "}", localVarApiClient.escapeString(parentNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compositesTreesEdlHierarchyVParentNodeIdChildrenPutValidateBeforeCall(@javax.annotation.Nonnull String parentNodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parentNodeId' is set
        if (parentNodeId == null) {
            throw new ApiException("Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenPut(Async)");
        }

        return compositesTreesEdlHierarchyVParentNodeIdChildrenPutCall(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Update Node Order
     * 
     * @param parentNodeId The ID of a parent node in the hierarchy. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void compositesTreesEdlHierarchyVParentNodeIdChildrenPut(@javax.annotation.Nonnull String parentNodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        compositesTreesEdlHierarchyVParentNodeIdChildrenPutWithHttpInfo(parentNodeId, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Update Node Order
     * 
     * @param parentNodeId The ID of a parent node in the hierarchy. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> compositesTreesEdlHierarchyVParentNodeIdChildrenPutWithHttpInfo(@javax.annotation.Nonnull String parentNodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = compositesTreesEdlHierarchyVParentNodeIdChildrenPutValidateBeforeCall(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Node Order (asynchronously)
     * 
     * @param parentNodeId The ID of a parent node in the hierarchy. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compositesTreesEdlHierarchyVParentNodeIdChildrenPutAsync(@javax.annotation.Nonnull String parentNodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = compositesTreesEdlHierarchyVParentNodeIdChildrenPutValidateBeforeCall(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationComponentTypeAndRecordNameGet
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationComponentTypeAndRecordNameGetCall(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/{component_type_and_record_name}"
            .replace("{" + "component_type_and_record_name" + "}", localVarApiClient.escapeString(componentTypeAndRecordName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationComponentTypeAndRecordNameGetValidateBeforeCall(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'componentTypeAndRecordName' is set
        if (componentTypeAndRecordName == null) {
            throw new ApiException("Missing the required parameter 'componentTypeAndRecordName' when calling configurationComponentTypeAndRecordNameGet(Async)");
        }

        return configurationComponentTypeAndRecordNameGetCall(componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Component Record (XML/JSON)
     * 
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void configurationComponentTypeAndRecordNameGet(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        configurationComponentTypeAndRecordNameGetWithHttpInfo(componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Component Record (XML/JSON)
     * 
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationComponentTypeAndRecordNameGetWithHttpInfo(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = configurationComponentTypeAndRecordNameGetValidateBeforeCall(componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Component Record (XML/JSON) (asynchronously)
     * 
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. (required)
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationComponentTypeAndRecordNameGetAsync(@javax.annotation.Nonnull String componentTypeAndRecordName, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationComponentTypeAndRecordNameGetValidateBeforeCall(componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationComponentTypeGet
     * @param componentType  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationComponentTypeGetCall(@javax.annotation.Nonnull String componentType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/{component_type}"
            .replace("{" + "component_type" + "}", localVarApiClient.escapeString(componentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationComponentTypeGetValidateBeforeCall(@javax.annotation.Nonnull String componentType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'componentType' is set
        if (componentType == null) {
            throw new ApiException("Missing the required parameter 'componentType' when calling configurationComponentTypeGet(Async)");
        }

        return configurationComponentTypeGetCall(componentType, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Component Record Collection
     * 
     * @param componentType  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void configurationComponentTypeGet(@javax.annotation.Nonnull String componentType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        configurationComponentTypeGetWithHttpInfo(componentType, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Component Record Collection
     * 
     * @param componentType  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationComponentTypeGetWithHttpInfo(@javax.annotation.Nonnull String componentType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = configurationComponentTypeGetValidateBeforeCall(componentType, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Component Record Collection (asynchronously)
     * 
     * @param componentType  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationComponentTypeGetAsync(@javax.annotation.Nonnull String componentType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationComponentTypeGetValidateBeforeCall(componentType, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationObjectNameAndObjectTypeGet
     * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;. (required)
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationObjectNameAndObjectTypeGetCall(@javax.annotation.Nonnull String objectNameAndObjectType, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/{object_name_and_object_type}"
            .replace("{" + "object_name_and_object_type" + "}", localVarApiClient.escapeString(objectNameAndObjectType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationObjectNameAndObjectTypeGetValidateBeforeCall(@javax.annotation.Nonnull String objectNameAndObjectType, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectNameAndObjectType' is set
        if (objectNameAndObjectType == null) {
            throw new ApiException("Missing the required parameter 'objectNameAndObjectType' when calling configurationObjectNameAndObjectTypeGet(Async)");
        }

        return configurationObjectNameAndObjectTypeGetCall(objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Details from a Specific Object
     * 
     * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;. (required)
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void configurationObjectNameAndObjectTypeGet(@javax.annotation.Nonnull String objectNameAndObjectType, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        configurationObjectNameAndObjectTypeGetWithHttpInfo(objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Details from a Specific Object
     * 
     * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;. (required)
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationObjectNameAndObjectTypeGetWithHttpInfo(@javax.annotation.Nonnull String objectNameAndObjectType, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = configurationObjectNameAndObjectTypeGetValidateBeforeCall(objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Details from a Specific Object (asynchronously)
     * 
     * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;. (required)
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationObjectNameAndObjectTypeGetAsync(@javax.annotation.Nonnull String objectNameAndObjectType, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationObjectNameAndObjectTypeGetValidateBeforeCall(objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationObjecttypeGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationObjecttypeGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/Objecttype";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationObjecttypeGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return configurationObjecttypeGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Details from All Object Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void configurationObjecttypeGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        configurationObjecttypeGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Details from All Object Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationObjecttypeGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = configurationObjecttypeGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Details from All Object Types (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationObjecttypeGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationObjecttypeGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationRoleAssignmentRuleDelete
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationRoleAssignmentRuleDeleteCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/role_assignment_rule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationRoleAssignmentRuleDeleteValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return configurationRoleAssignmentRuleDeleteCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Lifecycle Role Assignment Override Rules
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void configurationRoleAssignmentRuleDelete(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        configurationRoleAssignmentRuleDeleteWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Lifecycle Role Assignment Override Rules
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationRoleAssignmentRuleDeleteWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = configurationRoleAssignmentRuleDeleteValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Lifecycle Role Assignment Override Rules (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationRoleAssignmentRuleDeleteAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationRoleAssignmentRuleDeleteValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationRoleAssignmentRuleGet
     * @param lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c (optional)
     * @param roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c (optional)
     * @param productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap (optional)
     * @param countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States (optional)
     * @param studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study (optional)
     * @param studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationRoleAssignmentRuleGetCall(@javax.annotation.Nullable String lifecycleV, @javax.annotation.Nullable String roleV, @javax.annotation.Nullable String productV, @javax.annotation.Nullable String countryV, @javax.annotation.Nullable String studyV, @javax.annotation.Nullable String studyCountryV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/role_assignment_rule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lifecycleV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lifecycle__v", lifecycleV));
        }

        if (roleV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__v", roleV));
        }

        if (productV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product__v", productV));
        }

        if (countryV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country__v", countryV));
        }

        if (studyV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("study__v", studyV));
        }

        if (studyCountryV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("study_country__v", studyCountryV));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationRoleAssignmentRuleGetValidateBeforeCall(@javax.annotation.Nullable String lifecycleV, @javax.annotation.Nullable String roleV, @javax.annotation.Nullable String productV, @javax.annotation.Nullable String countryV, @javax.annotation.Nullable String studyV, @javax.annotation.Nullable String studyCountryV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return configurationRoleAssignmentRuleGetCall(lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
     * 
     * @param lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c (optional)
     * @param roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c (optional)
     * @param productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap (optional)
     * @param countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States (optional)
     * @param studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study (optional)
     * @param studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void configurationRoleAssignmentRuleGet(@javax.annotation.Nullable String lifecycleV, @javax.annotation.Nullable String roleV, @javax.annotation.Nullable String productV, @javax.annotation.Nullable String countryV, @javax.annotation.Nullable String studyV, @javax.annotation.Nullable String studyCountryV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        configurationRoleAssignmentRuleGetWithHttpInfo(lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
     * 
     * @param lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c (optional)
     * @param roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c (optional)
     * @param productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap (optional)
     * @param countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States (optional)
     * @param studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study (optional)
     * @param studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationRoleAssignmentRuleGetWithHttpInfo(@javax.annotation.Nullable String lifecycleV, @javax.annotation.Nullable String roleV, @javax.annotation.Nullable String productV, @javax.annotation.Nullable String countryV, @javax.annotation.Nullable String studyV, @javax.annotation.Nullable String studyCountryV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = configurationRoleAssignmentRuleGetValidateBeforeCall(lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override) (asynchronously)
     * 
     * @param lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c (optional)
     * @param roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c (optional)
     * @param productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap (optional)
     * @param countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States (optional)
     * @param studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study (optional)
     * @param studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationRoleAssignmentRuleGetAsync(@javax.annotation.Nullable String lifecycleV, @javax.annotation.Nullable String roleV, @javax.annotation.Nullable String productV, @javax.annotation.Nullable String countryV, @javax.annotation.Nullable String studyV, @javax.annotation.Nullable String studyCountryV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationRoleAssignmentRuleGetValidateBeforeCall(lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationRoleAssignmentRulePost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationRoleAssignmentRulePostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/role_assignment_rule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationRoleAssignmentRulePostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return configurationRoleAssignmentRulePostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Lifecycle Role Assignment Override Rules
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void configurationRoleAssignmentRulePost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        configurationRoleAssignmentRulePostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Lifecycle Role Assignment Override Rules
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationRoleAssignmentRulePostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = configurationRoleAssignmentRulePostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Lifecycle Role Assignment Override Rules (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationRoleAssignmentRulePostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationRoleAssignmentRulePostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationRoleAssignmentRulePut
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationRoleAssignmentRulePutCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/role_assignment_rule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationRoleAssignmentRulePutValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return configurationRoleAssignmentRulePutCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Lifecycle Role Assignment Rules (Default &amp; Override)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void configurationRoleAssignmentRulePut(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        configurationRoleAssignmentRulePutWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Lifecycle Role Assignment Rules (Default &amp; Override)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configurationRoleAssignmentRulePutWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = configurationRoleAssignmentRulePutValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Lifecycle Role Assignment Rules (Default &amp; Override) (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationRoleAssignmentRulePutAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationRoleAssignmentRulePutValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delegationLoginPost
     * @param authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid. (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegationLoginPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delegation/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delegationLoginPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return delegationLoginPostCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Initiate Delegated Session
     * 
     * @param authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid. (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void delegationLoginPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        delegationLoginPostWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Initiate Delegated Session
     * 
     * @param authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid. (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delegationLoginPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = delegationLoginPostValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate Delegated Session (asynchronously)
     * 
     * @param authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid. (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegationLoginPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delegationLoginPostValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delegationVaultsGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegationVaultsGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delegation/vaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delegationVaultsGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return delegationVaultsGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Delegations
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void delegationVaultsGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        delegationVaultsGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Delegations
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delegationVaultsGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = delegationVaultsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Delegations (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delegationVaultsGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delegationVaultsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for keepAlivePost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keepAlivePostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/keep-alive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keepAlivePostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return keepAlivePostCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Session Keep Alive
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void keepAlivePost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        keepAlivePostWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Session Keep Alive
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> keepAlivePostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = keepAlivePostValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Session Keep Alive (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keepAlivePostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = keepAlivePostValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for limitsGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call limitsGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/limits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call limitsGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return limitsGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Limits on Objects
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void limitsGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        limitsGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Limits on Objects
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> limitsGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = limitsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Limits on Objects (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call limitsGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = limitsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsApiUsageGet
     * @param date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past. (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsApiUsageGetCall(@javax.annotation.Nullable String date, @javax.annotation.Nullable String logFormat, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/api_usage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (logFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("log_format", logFormat));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsApiUsageGetValidateBeforeCall(@javax.annotation.Nullable String date, @javax.annotation.Nullable String logFormat, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return logsApiUsageGetCall(date, logFormat, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download Daily API Usage
     * 
     * @param date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past. (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void logsApiUsageGet(@javax.annotation.Nullable String date, @javax.annotation.Nullable String logFormat, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        logsApiUsageGetWithHttpInfo(date, logFormat, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download Daily API Usage
     * 
     * @param date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past. (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsApiUsageGetWithHttpInfo(@javax.annotation.Nullable String date, @javax.annotation.Nullable String logFormat, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = logsApiUsageGetValidateBeforeCall(date, logFormat, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Daily API Usage (asynchronously)
     * 
     * @param date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past. (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsApiUsageGetAsync(@javax.annotation.Nullable String date, @javax.annotation.Nullable String logFormat, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsApiUsageGetValidateBeforeCall(date, logFormat, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsCodeDebugGet
     * @param userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault. (optional)
     * @param includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeDebugGetCall(@javax.annotation.Nullable String userId, @javax.annotation.Nullable Boolean includeInactive, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/code/debug";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_inactive", includeInactive));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsCodeDebugGetValidateBeforeCall(@javax.annotation.Nullable String userId, @javax.annotation.Nullable Boolean includeInactive, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return logsCodeDebugGetCall(userId, includeInactive, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Debug Logs
     * 
     * @param userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault. (optional)
     * @param includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void logsCodeDebugGet(@javax.annotation.Nullable String userId, @javax.annotation.Nullable Boolean includeInactive, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        logsCodeDebugGetWithHttpInfo(userId, includeInactive, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Debug Logs
     * 
     * @param userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault. (optional)
     * @param includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsCodeDebugGetWithHttpInfo(@javax.annotation.Nullable String userId, @javax.annotation.Nullable Boolean includeInactive, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = logsCodeDebugGetValidateBeforeCall(userId, includeInactive, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Debug Logs (asynchronously)
     * 
     * @param userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault. (optional)
     * @param includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeDebugGetAsync(@javax.annotation.Nullable String userId, @javax.annotation.Nullable Boolean includeInactive, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsCodeDebugGetValidateBeforeCall(userId, includeInactive, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsCodeDebugIdActionsResetDelete
     * @param id The ID of the debug log to delete. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeDebugIdActionsResetDeleteCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/code/debug/{id}/actions/reset"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsCodeDebugIdActionsResetDeleteValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetDelete(Async)");
        }

        return logsCodeDebugIdActionsResetDeleteCall(id, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Debug Log
     * 
     * @param id The ID of the debug log to delete. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void logsCodeDebugIdActionsResetDelete(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        logsCodeDebugIdActionsResetDeleteWithHttpInfo(id, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Debug Log
     * 
     * @param id The ID of the debug log to delete. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsCodeDebugIdActionsResetDeleteWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = logsCodeDebugIdActionsResetDeleteValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Debug Log (asynchronously)
     * 
     * @param id The ID of the debug log to delete. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeDebugIdActionsResetDeleteAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsCodeDebugIdActionsResetDeleteValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsCodeDebugIdActionsResetPost
     * @param id The ID of the debug log to delete. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeDebugIdActionsResetPostCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/code/debug/{id}/actions/reset"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsCodeDebugIdActionsResetPostValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetPost(Async)");
        }

        return logsCodeDebugIdActionsResetPostCall(id, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Reset Debug Log
     * 
     * @param id The ID of the debug log to delete. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void logsCodeDebugIdActionsResetPost(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        logsCodeDebugIdActionsResetPostWithHttpInfo(id, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Reset Debug Log
     * 
     * @param id The ID of the debug log to delete. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsCodeDebugIdActionsResetPostWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = logsCodeDebugIdActionsResetPostValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset Debug Log (asynchronously)
     * 
     * @param id The ID of the debug log to delete. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeDebugIdActionsResetPostAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsCodeDebugIdActionsResetPostValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsCodeDebugIdFilesGet
     * @param id The ID of the debug log to download. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeDebugIdFilesGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/code/debug/{id}/files"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsCodeDebugIdFilesGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling logsCodeDebugIdFilesGet(Async)");
        }

        return logsCodeDebugIdFilesGetCall(id, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download Debug Log Files
     * 
     * @param id The ID of the debug log to download. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void logsCodeDebugIdFilesGet(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        logsCodeDebugIdFilesGetWithHttpInfo(id, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download Debug Log Files
     * 
     * @param id The ID of the debug log to download. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsCodeDebugIdFilesGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = logsCodeDebugIdFilesGetValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Debug Log Files (asynchronously)
     * 
     * @param id The ID of the debug log to download. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeDebugIdFilesGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsCodeDebugIdFilesGetValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsCodeDebugIdGet
     * @param id The ID of the debug log to retrieve. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeDebugIdGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/code/debug/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsCodeDebugIdGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling logsCodeDebugIdGet(Async)");
        }

        return logsCodeDebugIdGetCall(id, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Single Debug Log
     * 
     * @param id The ID of the debug log to retrieve. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void logsCodeDebugIdGet(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        logsCodeDebugIdGetWithHttpInfo(id, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Single Debug Log
     * 
     * @param id The ID of the debug log to retrieve. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsCodeDebugIdGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = logsCodeDebugIdGetValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Single Debug Log (asynchronously)
     * 
     * @param id The ID of the debug log to retrieve. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeDebugIdGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsCodeDebugIdGetValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsCodeDebugPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeDebugPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/code/debug";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsCodeDebugPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return logsCodeDebugPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Debug Log
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void logsCodeDebugPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        logsCodeDebugPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Debug Log
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsCodeDebugPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = logsCodeDebugPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Debug Log (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeDebugPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsCodeDebugPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsCodeRuntimeGet
     * @param date  (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeRuntimeGetCall(@javax.annotation.Nullable String date, @javax.annotation.Nullable String logFormat, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/code/runtime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (logFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("log_format", logFormat));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsCodeRuntimeGetValidateBeforeCall(@javax.annotation.Nullable String date, @javax.annotation.Nullable String logFormat, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return logsCodeRuntimeGetCall(date, logFormat, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download SDK Runtime Log
     * 
     * @param date  (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void logsCodeRuntimeGet(@javax.annotation.Nullable String date, @javax.annotation.Nullable String logFormat, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        logsCodeRuntimeGetWithHttpInfo(date, logFormat, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download SDK Runtime Log
     * 
     * @param date  (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsCodeRuntimeGetWithHttpInfo(@javax.annotation.Nullable String date, @javax.annotation.Nullable String logFormat, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = logsCodeRuntimeGetValidateBeforeCall(date, logFormat, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download SDK Runtime Log (asynchronously)
     * 
     * @param date  (optional)
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCodeRuntimeGetAsync(@javax.annotation.Nullable String date, @javax.annotation.Nullable String logFormat, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsCodeRuntimeGetValidateBeforeCall(date, logFormat, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for messagesMessageTypeActionsImportPost
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesMessageTypeActionsImportPostCall(@javax.annotation.Nonnull String messageType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{message_type}/actions/import"
            .replace("{" + "message_type" + "}", localVarApiClient.escapeString(messageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messagesMessageTypeActionsImportPostValidateBeforeCall(@javax.annotation.Nonnull String messageType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageType' is set
        if (messageType == null) {
            throw new ApiException("Missing the required parameter 'messageType' when calling messagesMessageTypeActionsImportPost(Async)");
        }

        return messagesMessageTypeActionsImportPostCall(messageType, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Import Bulk Translation File
     * 
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void messagesMessageTypeActionsImportPost(@javax.annotation.Nonnull String messageType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        messagesMessageTypeActionsImportPostWithHttpInfo(messageType, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Import Bulk Translation File
     * 
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> messagesMessageTypeActionsImportPostWithHttpInfo(@javax.annotation.Nonnull String messageType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = messagesMessageTypeActionsImportPostValidateBeforeCall(messageType, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import Bulk Translation File (asynchronously)
     * 
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesMessageTypeActionsImportPostAsync(@javax.annotation.Nonnull String messageType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = messagesMessageTypeActionsImportPostValidateBeforeCall(messageType, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for messagesMessageTypeLanguageLangActionsExportPost
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
     * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid.  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesMessageTypeLanguageLangActionsExportPostCall(@javax.annotation.Nonnull String messageType, @javax.annotation.Nonnull String lang, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/messages/{message_type}/language/{lang}/actions/export"
            .replace("{" + "message_type" + "}", localVarApiClient.escapeString(messageType.toString()))
            .replace("{" + "lang" + "}", localVarApiClient.escapeString(lang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messagesMessageTypeLanguageLangActionsExportPostValidateBeforeCall(@javax.annotation.Nonnull String messageType, @javax.annotation.Nonnull String lang, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageType' is set
        if (messageType == null) {
            throw new ApiException("Missing the required parameter 'messageType' when calling messagesMessageTypeLanguageLangActionsExportPost(Async)");
        }

        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling messagesMessageTypeLanguageLangActionsExportPost(Async)");
        }

        return messagesMessageTypeLanguageLangActionsExportPostCall(messageType, lang, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Export Bulk Translation File
     * 
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
     * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid.  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void messagesMessageTypeLanguageLangActionsExportPost(@javax.annotation.Nonnull String messageType, @javax.annotation.Nonnull String lang, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        messagesMessageTypeLanguageLangActionsExportPostWithHttpInfo(messageType, lang, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Export Bulk Translation File
     * 
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
     * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid.  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> messagesMessageTypeLanguageLangActionsExportPostWithHttpInfo(@javax.annotation.Nonnull String messageType, @javax.annotation.Nonnull String lang, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = messagesMessageTypeLanguageLangActionsExportPostValidateBeforeCall(messageType, lang, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Export Bulk Translation File (asynchronously)
     * 
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. (required)
     * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid.  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesMessageTypeLanguageLangActionsExportPostAsync(@javax.annotation.Nonnull String messageType, @javax.annotation.Nonnull String lang, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = messagesMessageTypeLanguageLangActionsExportPostValidateBeforeCall(messageType, lang, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataAudittrailAuditTrailTypeGet
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataAudittrailAuditTrailTypeGetCall(@javax.annotation.Nonnull String auditTrailType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/audittrail/{audit_trail_type}"
            .replace("{" + "audit_trail_type" + "}", localVarApiClient.escapeString(auditTrailType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataAudittrailAuditTrailTypeGetValidateBeforeCall(@javax.annotation.Nonnull String auditTrailType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auditTrailType' is set
        if (auditTrailType == null) {
            throw new ApiException("Missing the required parameter 'auditTrailType' when calling metadataAudittrailAuditTrailTypeGet(Async)");
        }

        return metadataAudittrailAuditTrailTypeGetCall(auditTrailType, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Audit Metadata
     * 
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataAudittrailAuditTrailTypeGet(@javax.annotation.Nonnull String auditTrailType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataAudittrailAuditTrailTypeGetWithHttpInfo(auditTrailType, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Audit Metadata
     * 
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataAudittrailAuditTrailTypeGetWithHttpInfo(@javax.annotation.Nonnull String auditTrailType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataAudittrailAuditTrailTypeGetValidateBeforeCall(auditTrailType, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Audit Metadata (asynchronously)
     * 
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataAudittrailAuditTrailTypeGetAsync(@javax.annotation.Nonnull String auditTrailType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataAudittrailAuditTrailTypeGetValidateBeforeCall(auditTrailType, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataAudittrailGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataAudittrailGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/audittrail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataAudittrailGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataAudittrailGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Audit Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataAudittrailGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataAudittrailGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Audit Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataAudittrailGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataAudittrailGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Audit Types (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataAudittrailGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataAudittrailGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataComponentsComponentTypeGet
     * @param componentType The component type name (Picklist, Docfield, Doctype, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataComponentsComponentTypeGetCall(@javax.annotation.Nonnull String componentType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/components/{component_type}"
            .replace("{" + "component_type" + "}", localVarApiClient.escapeString(componentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataComponentsComponentTypeGetValidateBeforeCall(@javax.annotation.Nonnull String componentType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'componentType' is set
        if (componentType == null) {
            throw new ApiException("Missing the required parameter 'componentType' when calling metadataComponentsComponentTypeGet(Async)");
        }

        return metadataComponentsComponentTypeGetCall(componentType, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Component Type Metadata
     * 
     * @param componentType The component type name (Picklist, Docfield, Doctype, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataComponentsComponentTypeGet(@javax.annotation.Nonnull String componentType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataComponentsComponentTypeGetWithHttpInfo(componentType, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Component Type Metadata
     * 
     * @param componentType The component type name (Picklist, Docfield, Doctype, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataComponentsComponentTypeGetWithHttpInfo(@javax.annotation.Nonnull String componentType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataComponentsComponentTypeGetValidateBeforeCall(componentType, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Component Type Metadata (asynchronously)
     * 
     * @param componentType The component type name (Picklist, Docfield, Doctype, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataComponentsComponentTypeGetAsync(@javax.annotation.Nonnull String componentType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataComponentsComponentTypeGetValidateBeforeCall(componentType, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataComponentsGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataComponentsGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/components";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataComponentsGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataComponentsGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Component Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataComponentsGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataComponentsGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Component Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataComponentsGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataComponentsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Component Metadata (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataComponentsGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataComponentsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsBindersTemplatesBindernodesGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsBindersTemplatesBindernodesGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/binders/templates/bindernodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsBindersTemplatesBindernodesGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataObjectsBindersTemplatesBindernodesGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder Template Node Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsBindersTemplatesBindernodesGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsBindersTemplatesBindernodesGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder Template Node Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsBindersTemplatesBindernodesGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsBindersTemplatesBindernodesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder Template Node Metadata (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsBindersTemplatesBindernodesGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsBindersTemplatesBindernodesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsBindersTemplatesGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsBindersTemplatesGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/binders/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsBindersTemplatesGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataObjectsBindersTemplatesGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder Template Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsBindersTemplatesGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsBindersTemplatesGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder Template Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsBindersTemplatesGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsBindersTemplatesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder Template Metadata (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsBindersTemplatesGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsBindersTemplatesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet
     * @param placemarkType The name of the placemark type. For example, sticky__sys. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetCall(@javax.annotation.Nonnull String placemarkType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/annotations/placemarks/types/{placemark_type}"
            .replace("{" + "placemark_type" + "}", localVarApiClient.escapeString(placemarkType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetValidateBeforeCall(@javax.annotation.Nonnull String placemarkType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placemarkType' is set
        if (placemarkType == null) {
            throw new ApiException("Missing the required parameter 'placemarkType' when calling metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(Async)");
        }

        return metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetCall(placemarkType, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Annotation Placemark Type Metadata
     * 
     * @param placemarkType The name of the placemark type. For example, sticky__sys. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(@javax.annotation.Nonnull String placemarkType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetWithHttpInfo(placemarkType, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Annotation Placemark Type Metadata
     * 
     * @param placemarkType The name of the placemark type. For example, sticky__sys. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetWithHttpInfo(@javax.annotation.Nonnull String placemarkType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetValidateBeforeCall(placemarkType, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Annotation Placemark Type Metadata (asynchronously)
     * 
     * @param placemarkType The name of the placemark type. For example, sticky__sys. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetAsync(@javax.annotation.Nonnull String placemarkType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetValidateBeforeCall(placemarkType, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet
     * @param referenceType  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetCall(@javax.annotation.Nonnull String referenceType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/annotations/references/types/{reference_type}"
            .replace("{" + "reference_type" + "}", localVarApiClient.escapeString(referenceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetValidateBeforeCall(@javax.annotation.Nonnull String referenceType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'referenceType' is set
        if (referenceType == null) {
            throw new ApiException("Missing the required parameter 'referenceType' when calling metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(Async)");
        }

        return metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetCall(referenceType, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Annotation Reference Type Metadata
     * 
     * @param referenceType  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(@javax.annotation.Nonnull String referenceType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetWithHttpInfo(referenceType, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Annotation Reference Type Metadata
     * 
     * @param referenceType  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetWithHttpInfo(@javax.annotation.Nonnull String referenceType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetValidateBeforeCall(referenceType, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Annotation Reference Type Metadata (asynchronously)
     * 
     * @param referenceType  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetAsync(@javax.annotation.Nonnull String referenceType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetValidateBeforeCall(referenceType, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet
     * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetCall(@javax.annotation.Nonnull String annotationType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/annotations/types/{annotation_type}"
            .replace("{" + "annotation_type" + "}", localVarApiClient.escapeString(annotationType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetValidateBeforeCall(@javax.annotation.Nonnull String annotationType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'annotationType' is set
        if (annotationType == null) {
            throw new ApiException("Missing the required parameter 'annotationType' when calling metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(Async)");
        }

        return metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetCall(annotationType, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Annotation Type Metadata
     * 
     * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(@javax.annotation.Nonnull String annotationType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetWithHttpInfo(annotationType, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Annotation Type Metadata
     * 
     * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetWithHttpInfo(@javax.annotation.Nonnull String annotationType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetValidateBeforeCall(annotationType, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Annotation Type Metadata (asynchronously)
     * 
     * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetAsync(@javax.annotation.Nonnull String annotationType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetValidateBeforeCall(annotationType, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet
     * @param eventType The event type. For example, distribution__v. (required)
     * @param eventSubtype The event subtype. For example, approved_email__v. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetCall(@javax.annotation.Nonnull String eventType, @javax.annotation.Nonnull String eventSubtype, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/events/{event_type}/types/{event_subtype}"
            .replace("{" + "event_type" + "}", localVarApiClient.escapeString(eventType.toString()))
            .replace("{" + "event_subtype" + "}", localVarApiClient.escapeString(eventSubtype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetValidateBeforeCall(@javax.annotation.Nonnull String eventType, @javax.annotation.Nonnull String eventSubtype, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventType' is set
        if (eventType == null) {
            throw new ApiException("Missing the required parameter 'eventType' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(Async)");
        }

        // verify the required parameter 'eventSubtype' is set
        if (eventSubtype == null) {
            throw new ApiException("Missing the required parameter 'eventSubtype' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(Async)");
        }

        return metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetCall(eventType, eventSubtype, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Event SubType Metadata
     * 
     * @param eventType The event type. For example, distribution__v. (required)
     * @param eventSubtype The event subtype. For example, approved_email__v. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(@javax.annotation.Nonnull String eventType, @javax.annotation.Nonnull String eventSubtype, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetWithHttpInfo(eventType, eventSubtype, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Event SubType Metadata
     * 
     * @param eventType The event type. For example, distribution__v. (required)
     * @param eventSubtype The event subtype. For example, approved_email__v. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetWithHttpInfo(@javax.annotation.Nonnull String eventType, @javax.annotation.Nonnull String eventSubtype, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetValidateBeforeCall(eventType, eventSubtype, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Event SubType Metadata (asynchronously)
     * 
     * @param eventType The event type. For example, distribution__v. (required)
     * @param eventSubtype The event subtype. For example, approved_email__v. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetAsync(@javax.annotation.Nonnull String eventType, @javax.annotation.Nonnull String eventSubtype, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetValidateBeforeCall(eventType, eventSubtype, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsEventsGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsEventsGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsEventsGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataObjectsDocumentsEventsGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Event Types and Subtypes
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsEventsGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsEventsGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Event Types and Subtypes
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsEventsGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsEventsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Event Types and Subtypes (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsEventsGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsEventsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsLockGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsLockGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/lock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsLockGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataObjectsDocumentsLockGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Lock Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsLockGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsLockGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Lock Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsLockGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsLockGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Lock Metadata (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsLockGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsLockGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsPropertiesFindCommonPost
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsPropertiesFindCommonPostCall(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/properties/find_common";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsPropertiesFindCommonPostValidateBeforeCall(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataObjectsDocumentsPropertiesFindCommonPostCall(contentType, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Common Document Fields
     * 
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsPropertiesFindCommonPost(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsPropertiesFindCommonPostWithHttpInfo(contentType, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Retrieve Common Document Fields
     * 
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsPropertiesFindCommonPostWithHttpInfo(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsPropertiesFindCommonPostValidateBeforeCall(contentType, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Common Document Fields (asynchronously)
     * 
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsPropertiesFindCommonPostAsync(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsPropertiesFindCommonPostValidateBeforeCall(contentType, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsPropertiesGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsPropertiesGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsPropertiesGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataObjectsDocumentsPropertiesGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Document Fields
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsPropertiesGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsPropertiesGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Document Fields
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsPropertiesGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsPropertiesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Document Fields (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsPropertiesGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsPropertiesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsTemplatesGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsTemplatesGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsTemplatesGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataObjectsDocumentsTemplatesGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Template Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsTemplatesGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsTemplatesGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Template Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsTemplatesGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsTemplatesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Template Metadata (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsTemplatesGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsTemplatesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsTypesGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsTypesGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsTypesGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataObjectsDocumentsTypesGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Document Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsTypesGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsTypesGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Document Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsTypesGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsTypesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Document Types (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsTypesGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsTypesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsTypesTypeGet
     * @param type The document type. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsTypesTypeGetCall(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/types/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsTypesTypeGetValidateBeforeCall(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeGet(Async)");
        }

        return metadataObjectsDocumentsTypesTypeGetCall(type, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Type
     * 
     * @param type The document type. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsTypesTypeGet(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsTypesTypeGetWithHttpInfo(type, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Type
     * 
     * @param type The document type. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsTypesTypeGetWithHttpInfo(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsTypesTypeGetValidateBeforeCall(type, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Type (asynchronously)
     * 
     * @param type The document type. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsTypesTypeGetAsync(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsTypesTypeGetValidateBeforeCall(type, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsTypesTypeRelationshipsGet
     * @param type The document type. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsTypesTypeRelationshipsGetCall(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/types/{type}/relationships"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsTypesTypeRelationshipsGetValidateBeforeCall(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeRelationshipsGet(Async)");
        }

        return metadataObjectsDocumentsTypesTypeRelationshipsGetCall(type, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Type Relationships
     * 
     * @param type The document type. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsTypesTypeRelationshipsGet(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsTypesTypeRelationshipsGetWithHttpInfo(type, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Type Relationships
     * 
     * @param type The document type. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsTypesTypeRelationshipsGetWithHttpInfo(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsTypesTypeRelationshipsGetValidateBeforeCall(type, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Type Relationships (asynchronously)
     * 
     * @param type The document type. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsTypesTypeRelationshipsGetAsync(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsTypesTypeRelationshipsGetValidateBeforeCall(type, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet
     * @param type The document type. See Retrieve Document Types. (required)
     * @param subtype The document subtype. See Retrieve Document Types. (required)
     * @param classification The document classification. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetCall(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String subtype, @javax.annotation.Nonnull String classification, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "subtype" + "}", localVarApiClient.escapeString(subtype.toString()))
            .replace("{" + "classification" + "}", localVarApiClient.escapeString(classification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetValidateBeforeCall(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String subtype, @javax.annotation.Nonnull String classification, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(Async)");
        }

        // verify the required parameter 'subtype' is set
        if (subtype == null) {
            throw new ApiException("Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(Async)");
        }

        // verify the required parameter 'classification' is set
        if (classification == null) {
            throw new ApiException("Missing the required parameter 'classification' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(Async)");
        }

        return metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetCall(type, subtype, classification, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Classification
     * 
     * @param type The document type. See Retrieve Document Types. (required)
     * @param subtype The document subtype. See Retrieve Document Types. (required)
     * @param classification The document classification. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String subtype, @javax.annotation.Nonnull String classification, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetWithHttpInfo(type, subtype, classification, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Classification
     * 
     * @param type The document type. See Retrieve Document Types. (required)
     * @param subtype The document subtype. See Retrieve Document Types. (required)
     * @param classification The document classification. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetWithHttpInfo(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String subtype, @javax.annotation.Nonnull String classification, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetValidateBeforeCall(type, subtype, classification, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Classification (asynchronously)
     * 
     * @param type The document type. See Retrieve Document Types. (required)
     * @param subtype The document subtype. See Retrieve Document Types. (required)
     * @param classification The document classification. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetAsync(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String subtype, @javax.annotation.Nonnull String classification, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetValidateBeforeCall(type, subtype, classification, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet
     * @param type The document type. See Retrieve Document Types. (required)
     * @param subtype The document subtype. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetCall(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String subtype, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/documents/types/{type}/subtypes/{subtype}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "subtype" + "}", localVarApiClient.escapeString(subtype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetValidateBeforeCall(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String subtype, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(Async)");
        }

        // verify the required parameter 'subtype' is set
        if (subtype == null) {
            throw new ApiException("Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(Async)");
        }

        return metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetCall(type, subtype, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Subtype
     * 
     * @param type The document type. See Retrieve Document Types. (required)
     * @param subtype The document subtype. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String subtype, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetWithHttpInfo(type, subtype, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Subtype
     * 
     * @param type The document type. See Retrieve Document Types. (required)
     * @param subtype The document subtype. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetWithHttpInfo(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String subtype, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetValidateBeforeCall(type, subtype, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Subtype (asynchronously)
     * 
     * @param type The document type. See Retrieve Document Types. (required)
     * @param subtype The document subtype. See Retrieve Document Types. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetAsync(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String subtype, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetValidateBeforeCall(type, subtype, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsGroupsGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsGroupsGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsGroupsGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataObjectsGroupsGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Group Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsGroupsGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsGroupsGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Group Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsGroupsGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsGroupsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Group Metadata (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsGroupsGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsGroupsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsSecuritypoliciesGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsSecuritypoliciesGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/securitypolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsSecuritypoliciesGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataObjectsSecuritypoliciesGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Security Policy Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsSecuritypoliciesGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsSecuritypoliciesGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Security Policy Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsSecuritypoliciesGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsSecuritypoliciesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Security Policy Metadata (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsSecuritypoliciesGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsSecuritypoliciesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataObjectsUsersGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsUsersGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataObjectsUsersGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataObjectsUsersGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve User Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataObjectsUsersGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataObjectsUsersGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve User Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataObjectsUsersGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataObjectsUsersGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve User Metadata (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataObjectsUsersGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataObjectsUsersGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/query/archived_documents/relationships/document_signature__sysr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Archived Document Signature Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Archived Document Signature Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Archived Document Signature Metadata (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/query/documents/relationships/document_signature__sysr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Signature Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Signature Metadata
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Signature Metadata (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataVobjectsGet
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataVobjectsGetCall(@javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/vobjects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataVobjectsGetValidateBeforeCall(@javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return metadataVobjectsGetCall(loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Object Collection
     * 
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataVobjectsGet(@javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataVobjectsGetWithHttpInfo(loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Object Collection
     * 
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataVobjectsGetWithHttpInfo(@javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataVobjectsGetValidateBeforeCall(loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Object Collection (asynchronously)
     * 
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataVobjectsGetAsync(@javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataVobjectsGetValidateBeforeCall(loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataVobjectsObjectNameActionsCanceldeploymentPost
     * @param objectName  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataVobjectsObjectNameActionsCanceldeploymentPostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/vobjects/{object_name}/actions/canceldeployment"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataVobjectsObjectNameActionsCanceldeploymentPostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameActionsCanceldeploymentPost(Async)");
        }

        return metadataVobjectsObjectNameActionsCanceldeploymentPostCall(objectName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Cancel Raw Object Deployment
     * 
     * @param objectName  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataVobjectsObjectNameActionsCanceldeploymentPost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataVobjectsObjectNameActionsCanceldeploymentPostWithHttpInfo(objectName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Cancel Raw Object Deployment
     * 
     * @param objectName  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataVobjectsObjectNameActionsCanceldeploymentPostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataVobjectsObjectNameActionsCanceldeploymentPostValidateBeforeCall(objectName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Raw Object Deployment (asynchronously)
     * 
     * @param objectName  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataVobjectsObjectNameActionsCanceldeploymentPostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataVobjectsObjectNameActionsCanceldeploymentPostValidateBeforeCall(objectName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataVobjectsObjectNameFieldsObjectFieldNameGet
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.). (required)
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataVobjectsObjectNameFieldsObjectFieldNameGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectFieldName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/vobjects/{object_name}/fields/{object_field_name}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_field_name" + "}", localVarApiClient.escapeString(objectFieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataVobjectsObjectNameFieldsObjectFieldNameGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectFieldName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet(Async)");
        }

        // verify the required parameter 'objectFieldName' is set
        if (objectFieldName == null) {
            throw new ApiException("Missing the required parameter 'objectFieldName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet(Async)");
        }

        return metadataVobjectsObjectNameFieldsObjectFieldNameGetCall(objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Object Field Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.). (required)
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataVobjectsObjectNameFieldsObjectFieldNameGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectFieldName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataVobjectsObjectNameFieldsObjectFieldNameGetWithHttpInfo(objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Object Field Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.). (required)
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataVobjectsObjectNameFieldsObjectFieldNameGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectFieldName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataVobjectsObjectNameFieldsObjectFieldNameGetValidateBeforeCall(objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Object Field Metadata (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.). (required)
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataVobjectsObjectNameFieldsObjectFieldNameGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectFieldName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataVobjectsObjectNameFieldsObjectFieldNameGetValidateBeforeCall(objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataVobjectsObjectNameGet
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataVobjectsObjectNameGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/vobjects/{object_name}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataVobjectsObjectNameGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameGet(Async)");
        }

        return metadataVobjectsObjectNameGetCall(objectName, loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Object Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataVobjectsObjectNameGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataVobjectsObjectNameGetWithHttpInfo(objectName, loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Object Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataVobjectsObjectNameGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataVobjectsObjectNameGetValidateBeforeCall(objectName, loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Object Metadata (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataVobjectsObjectNameGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataVobjectsObjectNameGetValidateBeforeCall(objectName, loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataVobjectsObjectNamePageLayoutsGet
     * @param objectName  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataVobjectsObjectNamePageLayoutsGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/vobjects/{object_name}/page_layouts"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataVobjectsObjectNamePageLayoutsGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsGet(Async)");
        }

        return metadataVobjectsObjectNamePageLayoutsGetCall(objectName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Page Layouts
     * 
     * @param objectName  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataVobjectsObjectNamePageLayoutsGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataVobjectsObjectNamePageLayoutsGetWithHttpInfo(objectName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Page Layouts
     * 
     * @param objectName  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataVobjectsObjectNamePageLayoutsGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataVobjectsObjectNamePageLayoutsGetValidateBeforeCall(objectName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Page Layouts (asynchronously)
     * 
     * @param objectName  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataVobjectsObjectNamePageLayoutsGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataVobjectsObjectNamePageLayoutsGetValidateBeforeCall(objectName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataVobjectsObjectNamePageLayoutsLayoutNameGet
     * @param objectName The name of the object from which to retrieve page layout metadata. (required)
     * @param layoutName The name of the page layout from which to retrieve metadata. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataVobjectsObjectNamePageLayoutsLayoutNameGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String layoutName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/vobjects/{object_name}/page_layouts/{layout_name}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "layout_name" + "}", localVarApiClient.escapeString(layoutName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataVobjectsObjectNamePageLayoutsLayoutNameGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String layoutName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet(Async)");
        }

        // verify the required parameter 'layoutName' is set
        if (layoutName == null) {
            throw new ApiException("Missing the required parameter 'layoutName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet(Async)");
        }

        return metadataVobjectsObjectNamePageLayoutsLayoutNameGetCall(objectName, layoutName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Page Layout Metadata
     * 
     * @param objectName The name of the object from which to retrieve page layout metadata. (required)
     * @param layoutName The name of the page layout from which to retrieve metadata. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void metadataVobjectsObjectNamePageLayoutsLayoutNameGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String layoutName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        metadataVobjectsObjectNamePageLayoutsLayoutNameGetWithHttpInfo(objectName, layoutName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Page Layout Metadata
     * 
     * @param objectName The name of the object from which to retrieve page layout metadata. (required)
     * @param layoutName The name of the page layout from which to retrieve metadata. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataVobjectsObjectNamePageLayoutsLayoutNameGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String layoutName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = metadataVobjectsObjectNamePageLayoutsLayoutNameGetValidateBeforeCall(objectName, layoutName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Page Layout Metadata (asynchronously)
     * 
     * @param objectName The name of the object from which to retrieve page layout metadata. (required)
     * @param layoutName The name of the page layout from which to retrieve metadata. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataVobjectsObjectNamePageLayoutsLayoutNameGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String layoutName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataVobjectsObjectNamePageLayoutsLayoutNameGetValidateBeforeCall(objectName, layoutName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsHistoriesGet
     * @param startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date. (optional)
     * @param endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date. (optional)
     * @param allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours. (optional)
     * @param formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsHistoriesGetCall(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Boolean allDates, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/histories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (allDates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all_dates", allDates));
        }

        if (formatResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format_result", formatResult));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsHistoriesGetValidateBeforeCall(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Boolean allDates, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return notificationsHistoriesGetCall(startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Email Notification Histories
     * 
     * @param startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date. (optional)
     * @param endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date. (optional)
     * @param allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours. (optional)
     * @param formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsHistoriesGet(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Boolean allDates, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        notificationsHistoriesGetWithHttpInfo(startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Email Notification Histories
     * 
     * @param startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date. (optional)
     * @param endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date. (optional)
     * @param allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours. (optional)
     * @param formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsHistoriesGetWithHttpInfo(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Boolean allDates, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = notificationsHistoriesGetValidateBeforeCall(startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Email Notification Histories (asynchronously)
     * 
     * @param startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date. (optional)
     * @param endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date. (optional)
     * @param allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours. (optional)
     * @param formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsHistoriesGetAsync(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable Boolean allDates, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsHistoriesGetValidateBeforeCall(startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectWorkflowActionsActionGet
     * @param action  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsActionGetCall(@javax.annotation.Nonnull String action, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/workflow/actions/{action}"
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectWorkflowActionsActionGetValidateBeforeCall(@javax.annotation.Nonnull String action, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling objectWorkflowActionsActionGet(Async)");
        }

        return objectWorkflowActionsActionGetCall(action, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Bulk Workflow Action Details
     * 
     * @param action  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectWorkflowActionsActionGet(@javax.annotation.Nonnull String action, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectWorkflowActionsActionGetWithHttpInfo(action, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Bulk Workflow Action Details
     * 
     * @param action  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectWorkflowActionsActionGetWithHttpInfo(@javax.annotation.Nonnull String action, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectWorkflowActionsActionGetValidateBeforeCall(action, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Bulk Workflow Action Details (asynchronously)
     * 
     * @param action  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsActionGetAsync(@javax.annotation.Nonnull String action, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectWorkflowActionsActionGetValidateBeforeCall(action, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectWorkflowActionsActionPost
     * @param action  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsActionPostCall(@javax.annotation.Nonnull String action, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/workflow/actions/{action}"
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectWorkflowActionsActionPostValidateBeforeCall(@javax.annotation.Nonnull String action, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling objectWorkflowActionsActionPost(Async)");
        }

        return objectWorkflowActionsActionPostCall(action, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Initiate Workflow Actions on Multiple Workflows
     * 
     * @param action  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectWorkflowActionsActionPost(@javax.annotation.Nonnull String action, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectWorkflowActionsActionPostWithHttpInfo(action, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Initiate Workflow Actions on Multiple Workflows
     * 
     * @param action  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectWorkflowActionsActionPostWithHttpInfo(@javax.annotation.Nonnull String action, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectWorkflowActionsActionPostValidateBeforeCall(action, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate Workflow Actions on Multiple Workflows (asynchronously)
     * 
     * @param action  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsActionPostAsync(@javax.annotation.Nonnull String action, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectWorkflowActionsActionPostValidateBeforeCall(action, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectWorkflowActionsCanceltasksPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsCanceltasksPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/workflow/actions/canceltasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectWorkflowActionsCanceltasksPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectWorkflowActionsCanceltasksPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Cancel Workflow Tasks
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectWorkflowActionsCanceltasksPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectWorkflowActionsCanceltasksPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Cancel Workflow Tasks
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectWorkflowActionsCanceltasksPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectWorkflowActionsCanceltasksPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Workflow Tasks (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsCanceltasksPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectWorkflowActionsCanceltasksPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectWorkflowActionsCancelworkflowsPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsCancelworkflowsPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/workflow/actions/cancelworkflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectWorkflowActionsCancelworkflowsPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectWorkflowActionsCancelworkflowsPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Cancel Workflows
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectWorkflowActionsCancelworkflowsPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectWorkflowActionsCancelworkflowsPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Cancel Workflows
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectWorkflowActionsCancelworkflowsPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectWorkflowActionsCancelworkflowsPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Workflows (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsCancelworkflowsPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectWorkflowActionsCancelworkflowsPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectWorkflowActionsGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/workflow/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectWorkflowActionsGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectWorkflowActionsGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Bulk Workflow Actions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectWorkflowActionsGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectWorkflowActionsGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Bulk Workflow Actions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectWorkflowActionsGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectWorkflowActionsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Bulk Workflow Actions (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectWorkflowActionsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectWorkflowActionsReassigntasksPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsReassigntasksPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/workflow/actions/reassigntasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectWorkflowActionsReassigntasksPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectWorkflowActionsReassigntasksPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Reassign Workflow Tasks
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectWorkflowActionsReassigntasksPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectWorkflowActionsReassigntasksPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Reassign Workflow Tasks
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectWorkflowActionsReassigntasksPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectWorkflowActionsReassigntasksPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reassign Workflow Tasks (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsReassigntasksPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectWorkflowActionsReassigntasksPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectWorkflowActionsReplaceworkflowownerPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsReplaceworkflowownerPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/object/workflow/actions/replaceworkflowowner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectWorkflowActionsReplaceworkflowownerPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectWorkflowActionsReplaceworkflowownerPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Replace Workflow Owner
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectWorkflowActionsReplaceworkflowownerPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectWorkflowActionsReplaceworkflowownerPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Replace Workflow Owner
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectWorkflowActionsReplaceworkflowownerPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectWorkflowActionsReplaceworkflowownerPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Replace Workflow Owner (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectWorkflowActionsReplaceworkflowownerPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectWorkflowActionsReplaceworkflowownerPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersActionsExportJobIdResultsGet
     * @param jobId The id value of the requested export job. This is returned with the export binder requests above. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersActionsExportJobIdResultsGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/actions/export/{job_id}/results"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersActionsExportJobIdResultsGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling objectsBindersActionsExportJobIdResultsGet(Async)");
        }

        return objectsBindersActionsExportJobIdResultsGetCall(jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder Export Results
     * 
     * @param jobId The id value of the requested export job. This is returned with the export binder requests above. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersActionsExportJobIdResultsGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersActionsExportJobIdResultsGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder Export Results
     * 
     * @param jobId The id value of the requested export job. This is returned with the export binder requests above. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersActionsExportJobIdResultsGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersActionsExportJobIdResultsGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder Export Results (asynchronously)
     * 
     * @param jobId The id value of the requested export job. This is returned with the export binder requests above. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersActionsExportJobIdResultsGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersActionsExportJobIdResultsGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdActionsExportPost
     * @param binderId The binder id field value. (required)
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdActionsExportPostCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable Boolean source, @javax.annotation.Nullable String renditiontype, @javax.annotation.Nullable String docversion, @javax.annotation.Nullable String attachments, @javax.annotation.Nullable String export, @javax.annotation.Nullable Boolean docfield, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/actions/export"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (renditiontype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("renditiontype", renditiontype));
        }

        if (docversion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("docversion", docversion));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (export != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export", export));
        }

        if (docfield != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("docfield", docfield));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdActionsExportPostValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable Boolean source, @javax.annotation.Nullable String renditiontype, @javax.annotation.Nullable String docversion, @javax.annotation.Nullable String attachments, @javax.annotation.Nullable String export, @javax.annotation.Nullable Boolean docfield, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsExportPost(Async)");
        }

        return objectsBindersBinderIdActionsExportPostCall(binderId, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Export Binder (Latest Version)
     * 
     * @param binderId The binder id field value. (required)
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdActionsExportPost(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable Boolean source, @javax.annotation.Nullable String renditiontype, @javax.annotation.Nullable String docversion, @javax.annotation.Nullable String attachments, @javax.annotation.Nullable String export, @javax.annotation.Nullable Boolean docfield, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdActionsExportPostWithHttpInfo(binderId, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Export Binder (Latest Version)
     * 
     * @param binderId The binder id field value. (required)
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdActionsExportPostWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable Boolean source, @javax.annotation.Nullable String renditiontype, @javax.annotation.Nullable String docversion, @javax.annotation.Nullable String attachments, @javax.annotation.Nullable String export, @javax.annotation.Nullable Boolean docfield, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdActionsExportPostValidateBeforeCall(binderId, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Export Binder (Latest Version) (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdActionsExportPostAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable Boolean source, @javax.annotation.Nullable String renditiontype, @javax.annotation.Nullable String docversion, @javax.annotation.Nullable String attachments, @javax.annotation.Nullable String export, @javax.annotation.Nullable Boolean docfield, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdActionsExportPostValidateBeforeCall(binderId, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdActionsPost
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdActionsPostCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/actions"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdActionsPostValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsPost(Async)");
        }

        return objectsBindersBinderIdActionsPostCall(binderId, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Refresh Binder Auto-Filing
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdActionsPost(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdActionsPostWithHttpInfo(binderId, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Refresh Binder Auto-Filing
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdActionsPostWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdActionsPostValidateBeforeCall(binderId, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Refresh Binder Auto-Filing (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdActionsPostAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdActionsPostValidateBeforeCall(binderId, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdBindingRulePut
     * @param binderId The binder id field value. (required)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdBindingRulePutCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/binding_rule"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdBindingRulePutValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdBindingRulePut(Async)");
        }

        return objectsBindersBinderIdBindingRulePutCall(binderId, contentType, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Update Binding Rule
     * 
     * @param binderId The binder id field value. (required)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdBindingRulePut(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdBindingRulePutWithHttpInfo(binderId, contentType, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Update Binding Rule
     * 
     * @param binderId The binder id field value. (required)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdBindingRulePutWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdBindingRulePutValidateBeforeCall(binderId, contentType, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Binding Rule (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdBindingRulePutAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdBindingRulePutValidateBeforeCall(binderId, contentType, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdDelete
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdDeleteCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDelete(Async)");
        }

        return objectsBindersBinderIdDeleteCall(binderId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Binder
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdDelete(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdDeleteWithHttpInfo(binderId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Binder
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdDeleteWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdDeleteValidateBeforeCall(binderId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Binder (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdDeleteAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdDeleteValidateBeforeCall(binderId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdDocumentsNodeIdBindingRulePut
     * @param binderId The binder id field value. (required)
     * @param nodeId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdDocumentsNodeIdBindingRulePutCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/documents/{node_id}/binding_rule"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "node_id" + "}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdDocumentsNodeIdBindingRulePutValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut(Async)");
        }

        return objectsBindersBinderIdDocumentsNodeIdBindingRulePutCall(binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Update Binder Document Binding Rule
     * 
     * @param binderId The binder id field value. (required)
     * @param nodeId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdDocumentsNodeIdBindingRulePut(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdDocumentsNodeIdBindingRulePutWithHttpInfo(binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Update Binder Document Binding Rule
     * 
     * @param binderId The binder id field value. (required)
     * @param nodeId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdDocumentsNodeIdBindingRulePutWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdDocumentsNodeIdBindingRulePutValidateBeforeCall(binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Binder Document Binding Rule (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param nodeId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdDocumentsNodeIdBindingRulePutAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdDocumentsNodeIdBindingRulePutValidateBeforeCall(binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdDocumentsPost
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdDocumentsPostCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/documents"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdDocumentsPostValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsPost(Async)");
        }

        return objectsBindersBinderIdDocumentsPostCall(binderId, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Add Document to Binder
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdDocumentsPost(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdDocumentsPostWithHttpInfo(binderId, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Add Document to Binder
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdDocumentsPostWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdDocumentsPostValidateBeforeCall(binderId, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add Document to Binder (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdDocumentsPostAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdDocumentsPostValidateBeforeCall(binderId, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdDocumentsSectionIdDelete
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdDocumentsSectionIdDeleteCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/documents/{section_id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "section_id" + "}", localVarApiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdDocumentsSectionIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdDelete(Async)");
        }

        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdDelete(Async)");
        }

        return objectsBindersBinderIdDocumentsSectionIdDeleteCall(binderId, sectionId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Remove Document from Binder
     * 
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdDocumentsSectionIdDelete(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdDocumentsSectionIdDeleteWithHttpInfo(binderId, sectionId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Remove Document from Binder
     * 
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdDocumentsSectionIdDeleteWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdDocumentsSectionIdDeleteValidateBeforeCall(binderId, sectionId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove Document from Binder (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdDocumentsSectionIdDeleteAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdDocumentsSectionIdDeleteValidateBeforeCall(binderId, sectionId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdDocumentsSectionIdPut
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdDocumentsSectionIdPutCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/documents/{section_id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "section_id" + "}", localVarApiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdDocumentsSectionIdPutValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdPut(Async)");
        }

        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdPut(Async)");
        }

        return objectsBindersBinderIdDocumentsSectionIdPutCall(binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Move Document in Binder
     * 
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdDocumentsSectionIdPut(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdDocumentsSectionIdPutWithHttpInfo(binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Move Document in Binder
     * 
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdDocumentsSectionIdPutWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdDocumentsSectionIdPutValidateBeforeCall(binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Move Document in Binder (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdDocumentsSectionIdPutAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdDocumentsSectionIdPutValidateBeforeCall(binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdGet
     * @param binderId The binder id field value. (required)
     * @param depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdGetCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String depth, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdGetValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String depth, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdGet(Async)");
        }

        return objectsBindersBinderIdGetCall(binderId, depth, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder
     * 
     * @param binderId The binder id field value. (required)
     * @param depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdGet(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String depth, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdGetWithHttpInfo(binderId, depth, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder
     * 
     * @param binderId The binder id field value. (required)
     * @param depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdGetWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String depth, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdGetValidateBeforeCall(binderId, depth, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdGetAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String depth, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdGetValidateBeforeCall(binderId, depth, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdPost
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdPostCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdPostValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdPost(Async)");
        }

        return objectsBindersBinderIdPostCall(binderId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Create Binder Version
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdPost(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdPostWithHttpInfo(binderId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Create Binder Version
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdPostWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdPostValidateBeforeCall(binderId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Binder Version (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdPostAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdPostValidateBeforeCall(binderId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdPut
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdPutCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdPutValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdPut(Async)");
        }

        return objectsBindersBinderIdPutCall(binderId, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Update Binder
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdPut(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdPutWithHttpInfo(binderId, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Update Binder
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdPutWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdPutValidateBeforeCall(binderId, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Binder (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdPutAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdPutValidateBeforeCall(binderId, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete
     * @param binderId The id value of the binder from which to remove roles. (required)
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;. (required)
     * @param id The id value of the user or group to remove from the role. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String roleNameAndUserOrGroup, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "role_name_and_user_or_group" + "}", localVarApiClient.escapeString(roleNameAndUserOrGroup.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String roleNameAndUserOrGroup, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(Async)");
        }

        // verify the required parameter 'roleNameAndUserOrGroup' is set
        if (roleNameAndUserOrGroup == null) {
            throw new ApiException("Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(Async)");
        }

        return objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteCall(binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Remove Users &amp; Groups from Roles on a Single Binder
     * 
     * @param binderId The id value of the binder from which to remove roles. (required)
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;. (required)
     * @param id The id value of the user or group to remove from the role. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String roleNameAndUserOrGroup, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Remove Users &amp; Groups from Roles on a Single Binder
     * 
     * @param binderId The id value of the binder from which to remove roles. (required)
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;. (required)
     * @param id The id value of the user or group to remove from the role. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String roleNameAndUserOrGroup, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteValidateBeforeCall(binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove Users &amp; Groups from Roles on a Single Binder (asynchronously)
     * 
     * @param binderId The id value of the binder from which to remove roles. (required)
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;. (required)
     * @param id The id value of the user or group to remove from the role. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String roleNameAndUserOrGroup, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteValidateBeforeCall(binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdSectionsNodeIdBindingRulePut
     * @param binderId The binder id field value. (required)
     * @param nodeId The binder node id field value. (required)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdSectionsNodeIdBindingRulePutCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/sections/{node_id}/binding_rule"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "node_id" + "}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdSectionsNodeIdBindingRulePutValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut(Async)");
        }

        return objectsBindersBinderIdSectionsNodeIdBindingRulePutCall(binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Update Binder Section Binding Rule
     * 
     * @param binderId The binder id field value. (required)
     * @param nodeId The binder node id field value. (required)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdSectionsNodeIdBindingRulePut(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdSectionsNodeIdBindingRulePutWithHttpInfo(binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Update Binder Section Binding Rule
     * 
     * @param binderId The binder id field value. (required)
     * @param nodeId The binder node id field value. (required)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdSectionsNodeIdBindingRulePutWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdSectionsNodeIdBindingRulePutValidateBeforeCall(binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Binder Section Binding Rule (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param nodeId The binder node id field value. (required)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdSectionsNodeIdBindingRulePutAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdSectionsNodeIdBindingRulePutValidateBeforeCall(binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdSectionsNodeIdPut
     * @param binderId The binder id field value. (required)
     * @param nodeId The binder node id of the section. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdSectionsNodeIdPutCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/sections/{node_id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "node_id" + "}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdSectionsNodeIdPutValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdPut(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdPut(Async)");
        }

        return objectsBindersBinderIdSectionsNodeIdPutCall(binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Binder Section
     * 
     * @param binderId The binder id field value. (required)
     * @param nodeId The binder node id of the section. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdSectionsNodeIdPut(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdSectionsNodeIdPutWithHttpInfo(binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Binder Section
     * 
     * @param binderId The binder id field value. (required)
     * @param nodeId The binder node id of the section. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdSectionsNodeIdPutWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdSectionsNodeIdPutValidateBeforeCall(binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Binder Section (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param nodeId The binder node id of the section. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdSectionsNodeIdPutAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdSectionsNodeIdPutValidateBeforeCall(binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdSectionsPost
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdSectionsPostCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/sections"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdSectionsPostValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsPost(Async)");
        }

        return objectsBindersBinderIdSectionsPostCall(binderId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Binder Section
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdSectionsPost(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdSectionsPostWithHttpInfo(binderId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Binder Section
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdSectionsPostWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdSectionsPostValidateBeforeCall(binderId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Binder Section (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdSectionsPostAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdSectionsPostValidateBeforeCall(binderId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdSectionsSectionIdDelete
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdSectionsSectionIdDeleteCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/sections/{section_id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "section_id" + "}", localVarApiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdSectionsSectionIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdDelete(Async)");
        }

        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdDelete(Async)");
        }

        return objectsBindersBinderIdSectionsSectionIdDeleteCall(binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Binder Section
     * 
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdSectionsSectionIdDelete(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdSectionsSectionIdDeleteWithHttpInfo(binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Delete Binder Section
     * 
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdSectionsSectionIdDeleteWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdSectionsSectionIdDeleteValidateBeforeCall(binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Binder Section (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdSectionsSectionIdDeleteAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdSectionsSectionIdDeleteValidateBeforeCall(binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdSectionsSectionIdGet
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdSectionsSectionIdGetCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/sections/{section_id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "section_id" + "}", localVarApiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdSectionsSectionIdGetValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdGet(Async)");
        }

        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdGet(Async)");
        }

        return objectsBindersBinderIdSectionsSectionIdGetCall(binderId, sectionId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder Sections
     * 
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdSectionsSectionIdGet(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdSectionsSectionIdGetWithHttpInfo(binderId, sectionId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder Sections
     * 
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdSectionsSectionIdGetWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdSectionsSectionIdGetValidateBeforeCall(binderId, sectionId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder Sections (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param sectionId The binder node id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdSectionsSectionIdGetAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdSectionsSectionIdGetValidateBeforeCall(binderId, sectionId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdVersionsGet
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsGetCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/versions"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdVersionsGetValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsGet(Async)");
        }

        return objectsBindersBinderIdVersionsGetCall(binderId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Binder Versions
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdVersionsGet(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdVersionsGetWithHttpInfo(binderId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Binder Versions
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdVersionsGetWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsGetValidateBeforeCall(binderId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Binder Versions (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsGetAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsGetValidateBeforeCall(binderId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable Boolean source, @javax.annotation.Nullable String renditiontype, @javax.annotation.Nullable String docversion, @javax.annotation.Nullable String attachments, @javax.annotation.Nullable String export, @javax.annotation.Nullable Boolean docfield, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (renditiontype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("renditiontype", renditiontype));
        }

        if (docversion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("docversion", docversion));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (export != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export", export));
        }

        if (docfield != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("docfield", docfield));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable Boolean source, @javax.annotation.Nullable String renditiontype, @javax.annotation.Nullable String docversion, @javax.annotation.Nullable String attachments, @javax.annotation.Nullable String export, @javax.annotation.Nullable Boolean docfield, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(Async)");
        }

        return objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostCall(binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Export Binder (Specific Version)
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable Boolean source, @javax.annotation.Nullable String renditiontype, @javax.annotation.Nullable String docversion, @javax.annotation.Nullable String attachments, @javax.annotation.Nullable String export, @javax.annotation.Nullable Boolean docfield, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostWithHttpInfo(binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Export Binder (Specific Version)
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable Boolean source, @javax.annotation.Nullable String renditiontype, @javax.annotation.Nullable String docversion, @javax.annotation.Nullable String attachments, @javax.annotation.Nullable String export, @javax.annotation.Nullable Boolean docfield, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostValidateBeforeCall(binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Export Binder (Specific Version) (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param source to include source content or not (optional)
     * @param renditiontype to include viewable renditions (optional)
     * @param docversion to include all major versions (optional)
     * @param attachments to include all versions of attachments (optional)
     * @param export configurable filename metadata (optional)
     * @param docfield to exclude document metadata csv (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable Boolean source, @javax.annotation.Nullable String renditiontype, @javax.annotation.Nullable String docversion, @javax.annotation.Nullable String attachments, @javax.annotation.Nullable String export, @javax.annotation.Nullable Boolean docfield, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostValidateBeforeCall(binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(Async)");
        }

        return objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteCall(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Binder Version
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Binder Version
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteValidateBeforeCall(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Binder Version (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteValidateBeforeCall(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdVersionsMajorVersionMinorVersionGet
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionGetCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionGetValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(Async)");
        }

        return objectsBindersBinderIdVersionsMajorVersionMinorVersionGetCall(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder Version
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdVersionsMajorVersionMinorVersionGetWithHttpInfo(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder Version
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdVersionsMajorVersionMinorVersionGetWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionGetValidateBeforeCall(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder Version (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionGetAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionGetValidateBeforeCall(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdVersionsMajorVersionMinorVersionPut
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionPutCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionPutValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(Async)");
        }

        return objectsBindersBinderIdVersionsMajorVersionMinorVersionPutCall(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Update Binder Version
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdVersionsMajorVersionMinorVersionPutWithHttpInfo(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Update Binder Version
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdVersionsMajorVersionMinorVersionPutWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionPutValidateBeforeCall(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Binder Version (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionPutAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionPutValidateBeforeCall(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(Async)");
        }

        return objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostCall(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Create Binder Relationship
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Create Binder Relationship
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostValidateBeforeCall(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Binder Relationship (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostValidateBeforeCall(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param relationshipId The binder relationship id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "relationship_id" + "}", localVarApiClient.escapeString(relationshipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(Async)");
        }

        // verify the required parameter 'relationshipId' is set
        if (relationshipId == null) {
            throw new ApiException("Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(Async)");
        }

        return objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCall(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Binder Relationship
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param relationshipId The binder relationship id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Binder Relationship
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param relationshipId The binder relationship id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteValidateBeforeCall(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Binder Relationship (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param relationshipId The binder relationship id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteValidateBeforeCall(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param relationshipId The binder relationship id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "relationship_id" + "}", localVarApiClient.escapeString(relationshipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(Async)");
        }

        // verify the required parameter 'relationshipId' is set
        if (relationshipId == null) {
            throw new ApiException("Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(Async)");
        }

        return objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCall(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder Relationship
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param relationshipId The binder relationship id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder Relationship
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param relationshipId The binder relationship id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetValidateBeforeCall(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder Relationship (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param relationshipId The binder relationship id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetValidateBeforeCall(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}"
            .replace("{" + "binder_id" + "}", localVarApiClient.escapeString(binderId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "section_id" + "}", localVarApiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetValidateBeforeCall(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'binderId' is set
        if (binderId == null) {
            throw new ApiException("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(Async)");
        }

        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(Async)");
        }

        return objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetCall(binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder Version Section
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetWithHttpInfo(binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder Version Section
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetWithHttpInfo(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetValidateBeforeCall(binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder Version Section (asynchronously)
     * 
     * @param binderId The binder id field value. (required)
     * @param majorVersion The binder major_version_number__v field value. (required)
     * @param minorVersion The binder minor_version_number__v field value. (required)
     * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetAsync(@javax.annotation.Nonnull String binderId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String sectionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetValidateBeforeCall(binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersIdRolesGet
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersIdRolesGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{id}/roles"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersIdRolesGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsBindersIdRolesGet(Async)");
        }

        return objectsBindersIdRolesGetCall(id, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Binder Roles
     * 
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersIdRolesGet(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersIdRolesGetWithHttpInfo(id, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Binder Roles
     * 
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersIdRolesGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersIdRolesGetValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Binder Roles (asynchronously)
     * 
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersIdRolesGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersIdRolesGetValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersIdRolesPost
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersIdRolesPostCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{id}/roles"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersIdRolesPostValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsBindersIdRolesPost(Async)");
        }

        return objectsBindersIdRolesPostCall(id, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Assign Users &amp; Groups to Roles on a Single Binder
     * 
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersIdRolesPost(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersIdRolesPostWithHttpInfo(id, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Assign Users &amp; Groups to Roles on a Single Binder
     * 
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersIdRolesPostWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersIdRolesPostValidateBeforeCall(id, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Assign Users &amp; Groups to Roles on a Single Binder (asynchronously)
     * 
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersIdRolesPostAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersIdRolesPostValidateBeforeCall(id, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersIdRolesRoleNameGet
     * @param id The binder &#x60;id&#x60;. (required)
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersIdRolesRoleNameGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{id}/roles/{role_name}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role_name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersIdRolesRoleNameGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsBindersIdRolesRoleNameGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling objectsBindersIdRolesRoleNameGet(Async)");
        }

        return objectsBindersIdRolesRoleNameGetCall(id, roleName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Role
     * 
     * @param id The binder &#x60;id&#x60;. (required)
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersIdRolesRoleNameGet(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersIdRolesRoleNameGetWithHttpInfo(id, roleName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Role
     * 
     * @param id The binder &#x60;id&#x60;. (required)
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersIdRolesRoleNameGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersIdRolesRoleNameGetValidateBeforeCall(id, roleName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Role (asynchronously)
     * 
     * @param id The binder &#x60;id&#x60;. (required)
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersIdRolesRoleNameGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersIdRolesRoleNameGetValidateBeforeCall(id, roleName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet
     * @param id The binder id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the binder. (required)
     * @param minorVersion The minor version number of the binder. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(Async)");
        }

        return objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetCall(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder User Actions
     * 
     * @param id The binder id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the binder. (required)
     * @param minorVersion The minor version number of the binder. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder User Actions
     * 
     * @param id The binder id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the binder. (required)
     * @param minorVersion The minor version number of the binder. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetValidateBeforeCall(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder User Actions (asynchronously)
     * 
     * @param id The binder id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the binder. (required)
     * @param minorVersion The minor version number of the binder. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetValidateBeforeCall(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet
     * @param id The binder id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the binder. (required)
     * @param minorVersion The minor version number of the binder. (required)
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "name__v" + "}", localVarApiClient.escapeString(nameV.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(Async)");
        }

        // verify the required parameter 'nameV' is set
        if (nameV == null) {
            throw new ApiException("Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(Async)");
        }

        return objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCall(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder Entry Criteria
     * 
     * @param id The binder id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the binder. (required)
     * @param minorVersion The minor version number of the binder. (required)
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder Entry Criteria
     * 
     * @param id The binder id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the binder. (required)
     * @param minorVersion The minor version number of the binder. (required)
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetValidateBeforeCall(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder Entry Criteria (asynchronously)
     * 
     * @param id The binder id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the binder. (required)
     * @param minorVersion The minor version number of the binder. (required)
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetValidateBeforeCall(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut
     * @param id The binder id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the binder. (required)
     * @param minorVersion The minor version number of the binder. (required)
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "name__v" + "}", localVarApiClient.escapeString(nameV.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(Async)");
        }

        // verify the required parameter 'nameV' is set
        if (nameV == null) {
            throw new ApiException("Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(Async)");
        }

        return objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCall(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Initiate Binder User Action
     * 
     * @param id The binder id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the binder. (required)
     * @param minorVersion The minor version number of the binder. (required)
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Initiate Binder User Action
     * 
     * @param id The binder id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the binder. (required)
     * @param minorVersion The minor version number of the binder. (required)
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutValidateBeforeCall(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate Binder User Action (asynchronously)
     * 
     * @param id The binder id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the binder. (required)
     * @param minorVersion The minor version number of the binder. (required)
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutValidateBeforeCall(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersLifecycleActionsPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersLifecycleActionsPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/lifecycle_actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersLifecycleActionsPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsBindersLifecycleActionsPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve User Actions on Multiple Binders
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersLifecycleActionsPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersLifecycleActionsPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Retrieve User Actions on Multiple Binders
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersLifecycleActionsPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersLifecycleActionsPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve User Actions on Multiple Binders (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersLifecycleActionsPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersLifecycleActionsPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersLifecycleActionsUserActionNamePut
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersLifecycleActionsUserActionNamePutCall(@javax.annotation.Nonnull String userActionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/lifecycle_actions/{user_action_name}"
            .replace("{" + "user_action_name" + "}", localVarApiClient.escapeString(userActionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersLifecycleActionsUserActionNamePutValidateBeforeCall(@javax.annotation.Nonnull String userActionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userActionName' is set
        if (userActionName == null) {
            throw new ApiException("Missing the required parameter 'userActionName' when calling objectsBindersLifecycleActionsUserActionNamePut(Async)");
        }

        return objectsBindersLifecycleActionsUserActionNamePutCall(userActionName, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Initiate Bulk Binder User Actions
     * 
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersLifecycleActionsUserActionNamePut(@javax.annotation.Nonnull String userActionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersLifecycleActionsUserActionNamePutWithHttpInfo(userActionName, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Initiate Bulk Binder User Actions
     * 
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersLifecycleActionsUserActionNamePutWithHttpInfo(@javax.annotation.Nonnull String userActionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersLifecycleActionsUserActionNamePutValidateBeforeCall(userActionName, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate Bulk Binder User Actions (asynchronously)
     * 
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersLifecycleActionsUserActionNamePutAsync(@javax.annotation.Nonnull String userActionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersLifecycleActionsUserActionNamePutValidateBeforeCall(userActionName, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersPost
     * @param async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data.  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersPostCall(@javax.annotation.Nullable Boolean async, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersPostValidateBeforeCall(@javax.annotation.Nullable Boolean async, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsBindersPostCall(async, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Create Binder
     * 
     * @param async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data.  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersPost(@javax.annotation.Nullable Boolean async, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersPostWithHttpInfo(async, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Create Binder
     * 
     * @param async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data.  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersPostWithHttpInfo(@javax.annotation.Nullable Boolean async, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersPostValidateBeforeCall(async, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Binder (asynchronously)
     * 
     * @param async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data.  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersPostAsync(@javax.annotation.Nullable Boolean async, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersPostValidateBeforeCall(async, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersTemplatesGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersTemplatesGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsBindersTemplatesGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder Template Collection
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersTemplatesGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersTemplatesGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder Template Collection
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersTemplatesGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersTemplatesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder Template Collection (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersTemplatesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersTemplatesPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersTemplatesPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsBindersTemplatesPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Binder Template
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersTemplatesPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersTemplatesPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Binder Template
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersTemplatesPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersTemplatesPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Binder Template (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersTemplatesPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersTemplatesPut
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesPutCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersTemplatesPutValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsBindersTemplatesPutCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Binder Template
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersTemplatesPut(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersTemplatesPutWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Binder Template
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersTemplatesPutWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersTemplatesPutValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Binder Template (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesPutAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersTemplatesPutValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersTemplatesTemplateNameBindernodesGet
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesTemplateNameBindernodesGetCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/templates/{template_name}/bindernodes"
            .replace("{" + "template_name" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersTemplatesTemplateNameBindernodesGetValidateBeforeCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesGet(Async)");
        }

        return objectsBindersTemplatesTemplateNameBindernodesGetCall(templateName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder Template Node Attributes
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersTemplatesTemplateNameBindernodesGet(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersTemplatesTemplateNameBindernodesGetWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder Template Node Attributes
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersTemplatesTemplateNameBindernodesGetWithHttpInfo(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersTemplatesTemplateNameBindernodesGetValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder Template Node Attributes (asynchronously)
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesTemplateNameBindernodesGetAsync(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersTemplatesTemplateNameBindernodesGetValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersTemplatesTemplateNameBindernodesPost
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesTemplateNameBindernodesPostCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/templates/{template_name}/bindernodes"
            .replace("{" + "template_name" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersTemplatesTemplateNameBindernodesPostValidateBeforeCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPost(Async)");
        }

        return objectsBindersTemplatesTemplateNameBindernodesPostCall(templateName, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Binder Template Node
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersTemplatesTemplateNameBindernodesPost(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersTemplatesTemplateNameBindernodesPostWithHttpInfo(templateName, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Binder Template Node
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersTemplatesTemplateNameBindernodesPostWithHttpInfo(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersTemplatesTemplateNameBindernodesPostValidateBeforeCall(templateName, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Binder Template Node (asynchronously)
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesTemplateNameBindernodesPostAsync(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersTemplatesTemplateNameBindernodesPostValidateBeforeCall(templateName, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersTemplatesTemplateNameBindernodesPut
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesTemplateNameBindernodesPutCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/templates/{template_name}/bindernodes"
            .replace("{" + "template_name" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersTemplatesTemplateNameBindernodesPutValidateBeforeCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPut(Async)");
        }

        return objectsBindersTemplatesTemplateNameBindernodesPutCall(templateName, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Replace Binder Template Nodes
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersTemplatesTemplateNameBindernodesPut(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersTemplatesTemplateNameBindernodesPutWithHttpInfo(templateName, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Replace Binder Template Nodes
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersTemplatesTemplateNameBindernodesPutWithHttpInfo(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersTemplatesTemplateNameBindernodesPutValidateBeforeCall(templateName, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Replace Binder Template Nodes (asynchronously)
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesTemplateNameBindernodesPutAsync(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersTemplatesTemplateNameBindernodesPutValidateBeforeCall(templateName, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersTemplatesTemplateNameDelete
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesTemplateNameDeleteCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/templates/{template_name}"
            .replace("{" + "template_name" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersTemplatesTemplateNameDeleteValidateBeforeCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameDelete(Async)");
        }

        return objectsBindersTemplatesTemplateNameDeleteCall(templateName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Binder Template
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersTemplatesTemplateNameDelete(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersTemplatesTemplateNameDeleteWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Binder Template
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersTemplatesTemplateNameDeleteWithHttpInfo(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersTemplatesTemplateNameDeleteValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Binder Template (asynchronously)
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesTemplateNameDeleteAsync(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersTemplatesTemplateNameDeleteValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsBindersTemplatesTemplateNameGet
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesTemplateNameGetCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/binders/templates/{template_name}"
            .replace("{" + "template_name" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsBindersTemplatesTemplateNameGetValidateBeforeCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameGet(Async)");
        }

        return objectsBindersTemplatesTemplateNameGetCall(templateName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Binder Template Attributes
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsBindersTemplatesTemplateNameGet(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsBindersTemplatesTemplateNameGetWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Binder Template Attributes
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsBindersTemplatesTemplateNameGetWithHttpInfo(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsBindersTemplatesTemplateNameGetValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Binder Template Attributes (asynchronously)
     * 
     * @param templateName The binder template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsBindersTemplatesTemplateNameGetAsync(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsBindersTemplatesTemplateNameGetValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDeletionsDocumentsGet
     * @param startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z (optional)
     * @param endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDeletionsDocumentsGetCall(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/deletions/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDeletionsDocumentsGetValidateBeforeCall(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDeletionsDocumentsGetCall(startDate, endDate, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Deleted Document IDs
     * 
     * @param startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z (optional)
     * @param endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDeletionsDocumentsGet(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDeletionsDocumentsGetWithHttpInfo(startDate, endDate, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Deleted Document IDs
     * 
     * @param startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z (optional)
     * @param endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDeletionsDocumentsGetWithHttpInfo(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDeletionsDocumentsGetValidateBeforeCall(startDate, endDate, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Deleted Document IDs (asynchronously)
     * 
     * @param startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z (optional)
     * @param endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDeletionsDocumentsGetAsync(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDeletionsDocumentsGetValidateBeforeCall(startDate, endDate, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDeletionsVobjectsObjectNameGet
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDeletionsVobjectsObjectNameGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/deletions/vobjects/{object_name}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDeletionsVobjectsObjectNameGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling objectsDeletionsVobjectsObjectNameGet(Async)");
        }

        return objectsDeletionsVobjectsObjectNameGetCall(objectName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Deleted Object Record ID
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDeletionsVobjectsObjectNameGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDeletionsVobjectsObjectNameGetWithHttpInfo(objectName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Deleted Object Record ID
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDeletionsVobjectsObjectNameGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDeletionsVobjectsObjectNameGetValidateBeforeCall(objectName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Deleted Object Record ID (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDeletionsVobjectsObjectNameGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDeletionsVobjectsObjectNameGetValidateBeforeCall(objectName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsActionsGet
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsActionsGetCall(@javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsActionsGetValidateBeforeCall(@javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsActionsGetCall(loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Document Workflows
     * 
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsActionsGet(@javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsActionsGetWithHttpInfo(loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Document Workflows
     * 
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsActionsGetWithHttpInfo(@javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsActionsGetValidateBeforeCall(loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Document Workflows (asynchronously)
     * 
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsActionsGetAsync(@javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsActionsGetValidateBeforeCall(loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet
     * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link. (required)
     * @param jobId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetCall(@javax.annotation.Nonnull String lifecycleAndStateAndAction, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results"
            .replace("{" + "lifecycle_and_state_and_action" + "}", localVarApiClient.escapeString(lifecycleAndStateAndAction.toString()))
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetValidateBeforeCall(@javax.annotation.Nonnull String lifecycleAndStateAndAction, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lifecycleAndStateAndAction' is set
        if (lifecycleAndStateAndAction == null) {
            throw new ApiException("Missing the required parameter 'lifecycleAndStateAndAction' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(Async)");
        }

        return objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetCall(lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download Controlled Copy Job Results
     * 
     * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link. (required)
     * @param jobId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(@javax.annotation.Nonnull String lifecycleAndStateAndAction, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetWithHttpInfo(lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download Controlled Copy Job Results
     * 
     * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link. (required)
     * @param jobId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetWithHttpInfo(@javax.annotation.Nonnull String lifecycleAndStateAndAction, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetValidateBeforeCall(lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Controlled Copy Job Results (asynchronously)
     * 
     * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link. (required)
     * @param jobId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetAsync(@javax.annotation.Nonnull String lifecycleAndStateAndAction, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetValidateBeforeCall(lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsActionsWorkflowNameGet
     * @param workflowName The document workflow name value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsActionsWorkflowNameGetCall(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/actions/{workflow_name}"
            .replace("{" + "workflow_name" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsActionsWorkflowNameGetValidateBeforeCall(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNameGet(Async)");
        }

        return objectsDocumentsActionsWorkflowNameGetCall(workflowName, loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Workflow Details
     * 
     * @param workflowName The document workflow name value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsActionsWorkflowNameGet(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsActionsWorkflowNameGetWithHttpInfo(workflowName, loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Workflow Details
     * 
     * @param workflowName The document workflow name value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsActionsWorkflowNameGetWithHttpInfo(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsActionsWorkflowNameGetValidateBeforeCall(workflowName, loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Workflow Details (asynchronously)
     * 
     * @param workflowName The document workflow name value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsActionsWorkflowNameGetAsync(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsActionsWorkflowNameGetValidateBeforeCall(workflowName, loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsActionsWorkflowNamePost
     * @param workflowName The document workflow name value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsActionsWorkflowNamePostCall(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/actions/{workflow_name}"
            .replace("{" + "workflow_name" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsActionsWorkflowNamePostValidateBeforeCall(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNamePost(Async)");
        }

        return objectsDocumentsActionsWorkflowNamePostCall(workflowName, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Initiate Document Workflow
     * 
     * @param workflowName The document workflow name value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsActionsWorkflowNamePost(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsActionsWorkflowNamePostWithHttpInfo(workflowName, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Initiate Document Workflow
     * 
     * @param workflowName The document workflow name value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsActionsWorkflowNamePostWithHttpInfo(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsActionsWorkflowNamePostValidateBeforeCall(workflowName, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate Document Workflow (asynchronously)
     * 
     * @param workflowName The document workflow name value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsActionsWorkflowNamePostAsync(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsActionsWorkflowNamePostValidateBeforeCall(workflowName, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsAnnotationsBatchDelete
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAnnotationsBatchDeleteCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/annotations/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsAnnotationsBatchDeleteValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsAnnotationsBatchDeleteCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Annotations
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsAnnotationsBatchDelete(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsAnnotationsBatchDeleteWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Delete Annotations
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsAnnotationsBatchDeleteWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsAnnotationsBatchDeleteValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Annotations (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAnnotationsBatchDeleteAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsAnnotationsBatchDeleteValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsAnnotationsBatchPost
     * @param authorization  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAnnotationsBatchPostCall(@javax.annotation.Nonnull String authorization, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/annotations/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsAnnotationsBatchPostValidateBeforeCall(@javax.annotation.Nonnull String authorization, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling objectsDocumentsAnnotationsBatchPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling objectsDocumentsAnnotationsBatchPost(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling objectsDocumentsAnnotationsBatchPost(Async)");
        }

        // verify the required parameter 'xVaultAPIClientID' is set
        if (xVaultAPIClientID == null) {
            throw new ApiException("Missing the required parameter 'xVaultAPIClientID' when calling objectsDocumentsAnnotationsBatchPost(Async)");
        }

        return objectsDocumentsAnnotationsBatchPostCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Create Multiple Annotations
     * 
     * @param authorization  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsAnnotationsBatchPost(@javax.annotation.Nonnull String authorization, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String xVaultAPIClientID) throws ApiException {
        objectsDocumentsAnnotationsBatchPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Create Multiple Annotations
     * 
     * @param authorization  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsAnnotationsBatchPostWithHttpInfo(@javax.annotation.Nonnull String authorization, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsAnnotationsBatchPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Multiple Annotations (asynchronously)
     * 
     * @param authorization  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAnnotationsBatchPostAsync(@javax.annotation.Nonnull String authorization, @javax.annotation.Nonnull String contentType, @javax.annotation.Nonnull String accept, @javax.annotation.Nonnull String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsAnnotationsBatchPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsAnnotationsBatchPut
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAnnotationsBatchPutCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/annotations/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsAnnotationsBatchPutValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsAnnotationsBatchPutCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Update Annotations
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsAnnotationsBatchPut(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsAnnotationsBatchPutWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Update Annotations
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsAnnotationsBatchPutWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsAnnotationsBatchPutValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Annotations (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAnnotationsBatchPutAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsAnnotationsBatchPutValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsAnnotationsRepliesBatchPost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAnnotationsRepliesBatchPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/annotations/replies/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsAnnotationsRepliesBatchPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsAnnotationsRepliesBatchPostCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Add Annotation Replies
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsAnnotationsRepliesBatchPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsAnnotationsRepliesBatchPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Add Annotation Replies
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsAnnotationsRepliesBatchPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsAnnotationsRepliesBatchPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add Annotation Replies (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAnnotationsRepliesBatchPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsAnnotationsRepliesBatchPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsAttachmentsBatchDelete
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAttachmentsBatchDeleteCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/attachments/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsAttachmentsBatchDeleteValidateBeforeCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsAttachmentsBatchDeleteCall(accept, authorization, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Multiple Document Attachments
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsAttachmentsBatchDelete(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsAttachmentsBatchDeleteWithHttpInfo(accept, authorization, contentType, xVaultAPIClientID);
    }

    /**
     * Delete Multiple Document Attachments
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsAttachmentsBatchDeleteWithHttpInfo(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsAttachmentsBatchDeleteValidateBeforeCall(accept, authorization, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Multiple Document Attachments (asynchronously)
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAttachmentsBatchDeleteAsync(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsAttachmentsBatchDeleteValidateBeforeCall(accept, authorization, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsAttachmentsBatchPost
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAttachmentsBatchPostCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/attachments/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsAttachmentsBatchPostValidateBeforeCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsAttachmentsBatchPostCall(accept, authorization, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Multiple Document Attachments
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsAttachmentsBatchPost(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsAttachmentsBatchPostWithHttpInfo(accept, authorization, contentType, xVaultAPIClientID);
    }

    /**
     * Create Multiple Document Attachments
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsAttachmentsBatchPostWithHttpInfo(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsAttachmentsBatchPostValidateBeforeCall(accept, authorization, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Multiple Document Attachments (asynchronously)
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAttachmentsBatchPostAsync(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsAttachmentsBatchPostValidateBeforeCall(accept, authorization, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsAttachmentsBatchPut
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAttachmentsBatchPutCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/attachments/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsAttachmentsBatchPutValidateBeforeCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsAttachmentsBatchPutCall(accept, authorization, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Multiple Document Attachment Descriptions
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsAttachmentsBatchPut(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsAttachmentsBatchPutWithHttpInfo(accept, authorization, contentType, xVaultAPIClientID);
    }

    /**
     * Update Multiple Document Attachment Descriptions
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsAttachmentsBatchPutWithHttpInfo(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsAttachmentsBatchPutValidateBeforeCall(accept, authorization, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Multiple Document Attachment Descriptions (asynchronously)
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsAttachmentsBatchPutAsync(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsAttachmentsBatchPutValidateBeforeCall(accept, authorization, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsBatchActionsFileextractJobIdResultsGet
     * @param jobId The id value of the requested export job. This is returned with the export document requests. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchActionsFileextractJobIdResultsGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/batch/actions/fileextract/{job_id}/results"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsBatchActionsFileextractJobIdResultsGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling objectsDocumentsBatchActionsFileextractJobIdResultsGet(Async)");
        }

        return objectsDocumentsBatchActionsFileextractJobIdResultsGetCall(jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Export Results
     * 
     * @param jobId The id value of the requested export job. This is returned with the export document requests. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsBatchActionsFileextractJobIdResultsGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsBatchActionsFileextractJobIdResultsGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Export Results
     * 
     * @param jobId The id value of the requested export job. This is returned with the export document requests. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsBatchActionsFileextractJobIdResultsGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsBatchActionsFileextractJobIdResultsGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Export Results (asynchronously)
     * 
     * @param jobId The id value of the requested export job. This is returned with the export document requests. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchActionsFileextractJobIdResultsGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsBatchActionsFileextractJobIdResultsGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsBatchActionsFileextractPost
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchActionsFileextractPostCall(@javax.annotation.Nullable Boolean source, @javax.annotation.Nullable Boolean renditions, @javax.annotation.Nullable Boolean allversions, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/batch/actions/fileextract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (renditions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("renditions", renditions));
        }

        if (allversions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allversions", allversions));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsBatchActionsFileextractPostValidateBeforeCall(@javax.annotation.Nullable Boolean source, @javax.annotation.Nullable Boolean renditions, @javax.annotation.Nullable Boolean allversions, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsBatchActionsFileextractPostCall(source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Export Documents
     * 
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsBatchActionsFileextractPost(@javax.annotation.Nullable Boolean source, @javax.annotation.Nullable Boolean renditions, @javax.annotation.Nullable Boolean allversions, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsBatchActionsFileextractPostWithHttpInfo(source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Export Documents
     * 
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsBatchActionsFileextractPostWithHttpInfo(@javax.annotation.Nullable Boolean source, @javax.annotation.Nullable Boolean renditions, @javax.annotation.Nullable Boolean allversions, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsBatchActionsFileextractPostValidateBeforeCall(source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Export Documents (asynchronously)
     * 
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchActionsFileextractPostAsync(@javax.annotation.Nullable Boolean source, @javax.annotation.Nullable Boolean renditions, @javax.annotation.Nullable Boolean allversions, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsBatchActionsFileextractPostValidateBeforeCall(source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsBatchActionsReclassifyPut
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchActionsReclassifyPutCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/batch/actions/reclassify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIMigrationMode != null) {
            localVarHeaderParams.put("X-VaultAPI-MigrationMode", localVarApiClient.parameterToString(xVaultAPIMigrationMode));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsBatchActionsReclassifyPutValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsBatchActionsReclassifyPutCall(authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);

    }

    /**
     * Reclassify Multiple Documents
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsBatchActionsReclassifyPut(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsBatchActionsReclassifyPutWithHttpInfo(authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
    }

    /**
     * Reclassify Multiple Documents
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsBatchActionsReclassifyPutWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsBatchActionsReclassifyPutValidateBeforeCall(authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reclassify Multiple Documents (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchActionsReclassifyPutAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsBatchActionsReclassifyPutValidateBeforeCall(authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsBatchActionsRerenderPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchActionsRerenderPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/batch/actions/rerender";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsBatchActionsRerenderPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsBatchActionsRerenderPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Multiple Document Renditions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsBatchActionsRerenderPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsBatchActionsRerenderPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Multiple Document Renditions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsBatchActionsRerenderPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsBatchActionsRerenderPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Multiple Document Renditions (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchActionsRerenderPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsBatchActionsRerenderPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsBatchDelete
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchDeleteCall(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idParam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idParam", idParam));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsBatchDeleteValidateBeforeCall(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsBatchDeleteCall(idParam, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Multiple Documents
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsBatchDelete(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsBatchDeleteWithHttpInfo(idParam, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Delete Multiple Documents
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsBatchDeleteWithHttpInfo(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsBatchDeleteValidateBeforeCall(idParam, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Multiple Documents (asynchronously)
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchDeleteAsync(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsBatchDeleteValidateBeforeCall(idParam, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsBatchLockDelete
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchLockDeleteCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/batch/lock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsBatchLockDeleteValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsBatchLockDeleteCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Undo Collaborative Authoring Checkout
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsBatchLockDelete(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsBatchLockDeleteWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Undo Collaborative Authoring Checkout
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsBatchLockDeleteWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsBatchLockDeleteValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Undo Collaborative Authoring Checkout (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchLockDeleteAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsBatchLockDeleteValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsBatchPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIMigrationMode != null) {
            localVarHeaderParams.put("X-VaultAPI-MigrationMode", localVarApiClient.parameterToString(xVaultAPIMigrationMode));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsBatchPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsBatchPostCall(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);

    }

    /**
     * Create Multiple Documents
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsBatchPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsBatchPostWithHttpInfo(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
    }

    /**
     * Create Multiple Documents
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsBatchPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsBatchPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Multiple Documents (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsBatchPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsBatchPut
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchPutCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIMigrationMode != null) {
            localVarHeaderParams.put("X-VaultAPI-MigrationMode", localVarApiClient.parameterToString(xVaultAPIMigrationMode));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsBatchPutValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsBatchPutCall(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);

    }

    /**
     * Update Multiple Documents
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsBatchPut(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsBatchPutWithHttpInfo(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
    }

    /**
     * Update Multiple Documents
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsBatchPutWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsBatchPutValidateBeforeCall(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Multiple Documents (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsBatchPutAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsBatchPutValidateBeforeCall(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAnchorsGet
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAnchorsGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/anchors"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAnchorsGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnchorsGet(Async)");
        }

        return objectsDocumentsDocIdAnchorsGetCall(docId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Anchor IDs
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAnchorsGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAnchorsGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Anchor IDs
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAnchorsGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAnchorsGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Anchor IDs (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAnchorsGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAnchorsGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAnnotationsFileGet
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAnnotationsFileGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/annotations/file"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAnnotationsFileGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFileGet(Async)");
        }

        return objectsDocumentsDocIdAnnotationsFileGetCall(docId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Export Document Annotations to PDF
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAnnotationsFileGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAnnotationsFileGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Export Document Annotations to PDF
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAnnotationsFileGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAnnotationsFileGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Export Document Annotations to PDF (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAnnotationsFileGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAnnotationsFileGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAnnotationsFilePost
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAnnotationsFilePostCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/annotations/file"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAnnotationsFilePostValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFilePost(Async)");
        }

        return objectsDocumentsDocIdAnnotationsFilePostCall(docId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Import Document Annotations from PDF
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAnnotationsFilePost(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAnnotationsFilePostWithHttpInfo(docId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Import Document Annotations from PDF
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAnnotationsFilePostWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAnnotationsFilePostValidateBeforeCall(docId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import Document Annotations from PDF (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAnnotationsFilePostAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAnnotationsFilePostValidateBeforeCall(docId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAttachmentsAttachmentIdDelete
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdDeleteCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete(Async)");
        }

        return objectsDocumentsDocIdAttachmentsAttachmentIdDeleteCall(docId, attachmentId, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Single Document Attachment
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAttachmentsAttachmentIdDelete(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAttachmentsAttachmentIdDeleteWithHttpInfo(docId, attachmentId, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Delete Single Document Attachment
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAttachmentsAttachmentIdDeleteWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdDeleteValidateBeforeCall(docId, attachmentId, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Single Document Attachment (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdDeleteAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdDeleteValidateBeforeCall(docId, attachmentId, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAttachmentsAttachmentIdFileGet
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdFileGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}/file"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdFileGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(Async)");
        }

        return objectsDocumentsDocIdAttachmentsAttachmentIdFileGetCall(docId, attachmentId, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Download Document Attachment
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAttachmentsAttachmentIdFileGetWithHttpInfo(docId, attachmentId, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Download Document Attachment
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAttachmentsAttachmentIdFileGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdFileGetValidateBeforeCall(docId, attachmentId, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Document Attachment (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdFileGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdFileGetValidateBeforeCall(docId, attachmentId, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAttachmentsAttachmentIdGet
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet(Async)");
        }

        return objectsDocumentsDocIdAttachmentsAttachmentIdGetCall(docId, attachmentId, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Attachment Metadata
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAttachmentsAttachmentIdGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAttachmentsAttachmentIdGetWithHttpInfo(docId, attachmentId, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Attachment Metadata
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAttachmentsAttachmentIdGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdGetValidateBeforeCall(docId, attachmentId, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Attachment Metadata (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdGetValidateBeforeCall(docId, attachmentId, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAttachmentsAttachmentIdPut
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdPutCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdPutValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut(Async)");
        }

        return objectsDocumentsDocIdAttachmentsAttachmentIdPutCall(docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Document Attachment Description
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAttachmentsAttachmentIdPut(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAttachmentsAttachmentIdPutWithHttpInfo(docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID);
    }

    /**
     * Update Document Attachment Description
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAttachmentsAttachmentIdPutWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdPutValidateBeforeCall(docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Document Attachment Description (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdPutAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdPutValidateBeforeCall(docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "attachment_version" + "}", localVarApiClient.escapeString(attachmentVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(Async)");
        }

        // verify the required parameter 'attachmentVersion' is set
        if (attachmentVersion == null) {
            throw new ApiException("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(Async)");
        }

        return objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCall(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Single Document Attachment Version
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Delete Single Document Attachment Version
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteValidateBeforeCall(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Single Document Attachment Version (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteValidateBeforeCall(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "attachment_version" + "}", localVarApiClient.escapeString(attachmentVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(Async)");
        }

        // verify the required parameter 'attachmentVersion' is set
        if (attachmentVersion == null) {
            throw new ApiException("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(Async)");
        }

        return objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCall(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Download Document Attachment Version
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Download Document Attachment Version
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetValidateBeforeCall(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Document Attachment Version (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetValidateBeforeCall(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "attachment_version" + "}", localVarApiClient.escapeString(attachmentVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(Async)");
        }

        // verify the required parameter 'attachmentVersion' is set
        if (attachmentVersion == null) {
            throw new ApiException("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(Async)");
        }

        return objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCall(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Attachment Version Metadata
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Attachment Version Metadata
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetValidateBeforeCall(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Attachment Version Metadata (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetValidateBeforeCall(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param restore The parameter restore must be set to true.  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable Boolean restore, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "attachment_version" + "}", localVarApiClient.escapeString(attachmentVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (restore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("restore", restore));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable Boolean restore, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(Async)");
        }

        // verify the required parameter 'attachmentVersion' is set
        if (attachmentVersion == null) {
            throw new ApiException("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(Async)");
        }

        return objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCall(docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Restore Document Attachment Version
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param restore The parameter restore must be set to true.  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable Boolean restore, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Restore Document Attachment Version
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param restore The parameter restore must be set to true.  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable Boolean restore, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostValidateBeforeCall(docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restore Document Attachment Version (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param restore The parameter restore must be set to true.  (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable Boolean restore, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostValidateBeforeCall(docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(Async)");
        }

        return objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetCall(docId, attachmentId, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Attachment Versions
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(docId, attachmentId, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Attachment Versions
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetValidateBeforeCall(docId, attachmentId, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Attachment Versions (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetValidateBeforeCall(docId, attachmentId, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAttachmentsFileGet
     * @param docId The document id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsFileGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/attachments/file"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAttachmentsFileGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsFileGet(Async)");
        }

        return objectsDocumentsDocIdAttachmentsFileGetCall(docId, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Download All Document Attachments
     * 
     * @param docId The document id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAttachmentsFileGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAttachmentsFileGetWithHttpInfo(docId, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Download All Document Attachments
     * 
     * @param docId The document id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAttachmentsFileGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsFileGetValidateBeforeCall(docId, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download All Document Attachments (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsFileGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsFileGetValidateBeforeCall(docId, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAttachmentsGet
     * @param docId The document id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/attachments"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAttachmentsGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsGet(Async)");
        }

        return objectsDocumentsDocIdAttachmentsGetCall(docId, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Attachments
     * 
     * @param docId The document id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAttachmentsGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAttachmentsGetWithHttpInfo(docId, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Attachments
     * 
     * @param docId The document id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAttachmentsGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsGetValidateBeforeCall(docId, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Attachments (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsGetValidateBeforeCall(docId, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAttachmentsPost
     * @param docId The document id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsPostCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/attachments"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAttachmentsPostValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsPost(Async)");
        }

        return objectsDocumentsDocIdAttachmentsPostCall(docId, accept, authorization, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Document Attachment
     * 
     * @param docId The document id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAttachmentsPost(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAttachmentsPostWithHttpInfo(docId, accept, authorization, contentType, xVaultAPIClientID);
    }

    /**
     * Create Document Attachment
     * 
     * @param docId The document id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAttachmentsPostWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsPostValidateBeforeCall(docId, accept, authorization, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Document Attachment (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAttachmentsPostAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAttachmentsPostValidateBeforeCall(docId, accept, authorization, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdAudittrailGet
     * @param docId The document ID for which to retrieve audit history. (required)
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAudittrailGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/audittrail"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (formatResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format_result", formatResult));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (events != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("events", events));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdAudittrailGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAudittrailGet(Async)");
        }

        return objectsDocumentsDocIdAudittrailGetCall(docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Complete Audit History for a Single Document
     * 
     * @param docId The document ID for which to retrieve audit history. (required)
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdAudittrailGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdAudittrailGetWithHttpInfo(docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Complete Audit History for a Single Document
     * 
     * @param docId The document ID for which to retrieve audit history. (required)
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdAudittrailGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdAudittrailGetValidateBeforeCall(docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Complete Audit History for a Single Document (asynchronously)
     * 
     * @param docId The document ID for which to retrieve audit history. (required)
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdAudittrailGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdAudittrailGetValidateBeforeCall(docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdDelete
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdDeleteCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdDelete(Async)");
        }

        return objectsDocumentsDocIdDeleteCall(docId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Single Document
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdDelete(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdDeleteWithHttpInfo(docId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Single Document
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdDeleteWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdDeleteValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Single Document (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdDeleteAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdDeleteValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdEventsGet
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdEventsGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/events"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdEventsGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdEventsGet(Async)");
        }

        return objectsDocumentsDocIdEventsGetCall(docId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Events
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdEventsGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdEventsGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Events
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdEventsGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdEventsGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Events (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdEventsGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdEventsGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdFileGet
     * @param docId The document id field value. (required)
     * @param lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdFileGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable Boolean lockDocument, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/file"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lockDocument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lockDocument", lockDocument));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdFileGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable Boolean lockDocument, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdFileGet(Async)");
        }

        return objectsDocumentsDocIdFileGetCall(docId, lockDocument, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Download Document File
     * 
     * @param docId The document id field value. (required)
     * @param lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdFileGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable Boolean lockDocument, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdFileGetWithHttpInfo(docId, lockDocument, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Download Document File
     * 
     * @param docId The document id field value. (required)
     * @param lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdFileGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable Boolean lockDocument, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdFileGetValidateBeforeCall(docId, lockDocument, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Document File (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdFileGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable Boolean lockDocument, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdFileGetValidateBeforeCall(docId, lockDocument, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdGet
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdGet(Async)");
        }

        return objectsDocumentsDocIdGetCall(docId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdLockDelete
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdLockDeleteCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/lock"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdLockDeleteValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockDelete(Async)");
        }

        return objectsDocumentsDocIdLockDeleteCall(docId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Document Lock
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdLockDelete(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdLockDeleteWithHttpInfo(docId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Document Lock
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdLockDeleteWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdLockDeleteValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Document Lock (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdLockDeleteAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdLockDeleteValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdLockGet
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdLockGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/lock"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdLockGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockGet(Async)");
        }

        return objectsDocumentsDocIdLockGetCall(docId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Lock
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdLockGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdLockGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Lock
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdLockGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdLockGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Lock (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdLockGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdLockGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdLockPost
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdLockPostCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/lock"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdLockPostValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockPost(Async)");
        }

        return objectsDocumentsDocIdLockPostCall(docId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Create Document Lock
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdLockPost(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdLockPostWithHttpInfo(docId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Create Document Lock
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdLockPostWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdLockPostValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Document Lock (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdLockPostAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdLockPostValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(Async)");
        }

        return objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetCall(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Download All Document Version Attachments
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetWithHttpInfo(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Download All Document Version Attachments
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetValidateBeforeCall(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download All Document Version Attachments (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetValidateBeforeCall(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdPost
     * @param docId The document id field value. (required)
     * @param suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdPostCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String suppressRendition, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (suppressRendition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("suppressRendition", suppressRendition));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdPostValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String suppressRendition, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdPost(Async)");
        }

        return objectsDocumentsDocIdPostCall(docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Create Single Document Version
     * 
     * @param docId The document id field value. (required)
     * @param suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdPost(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String suppressRendition, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdPostWithHttpInfo(docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Create Single Document Version
     * 
     * @param docId The document id field value. (required)
     * @param suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdPostWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String suppressRendition, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdPostValidateBeforeCall(docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Single Document Version (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdPostAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String suppressRendition, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdPostValidateBeforeCall(docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdPut
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdPutCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIMigrationMode != null) {
            localVarHeaderParams.put("X-VaultAPI-MigrationMode", localVarApiClient.parameterToString(xVaultAPIMigrationMode));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdPutValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdPut(Async)");
        }

        return objectsDocumentsDocIdPutCall(docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);

    }

    /**
     * Update Single Document
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdPut(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdPutWithHttpInfo(docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
    }

    /**
     * Update Single Document
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdPutWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdPutValidateBeforeCall(docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Single Document (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdPutAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdPutValidateBeforeCall(docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdRenditionsGet
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdRenditionsGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/renditions"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdRenditionsGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsGet(Async)");
        }

        return objectsDocumentsDocIdRenditionsGetCall(docId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Renditions
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdRenditionsGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdRenditionsGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Renditions
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdRenditionsGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdRenditionsGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Renditions (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdRenditionsGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdRenditionsGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdRenditionsRenditionTypeDelete
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdRenditionsRenditionTypeDeleteCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/renditions/{rendition_type}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "rendition_type" + "}", localVarApiClient.escapeString(renditionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdRenditionsRenditionTypeDeleteValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete(Async)");
        }

        // verify the required parameter 'renditionType' is set
        if (renditionType == null) {
            throw new ApiException("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete(Async)");
        }

        return objectsDocumentsDocIdRenditionsRenditionTypeDeleteCall(docId, renditionType, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Single Document Rendition
     * 
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdRenditionsRenditionTypeDelete(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdRenditionsRenditionTypeDeleteWithHttpInfo(docId, renditionType, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Single Document Rendition
     * 
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdRenditionsRenditionTypeDeleteWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdRenditionsRenditionTypeDeleteValidateBeforeCall(docId, renditionType, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Single Document Rendition (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdRenditionsRenditionTypeDeleteAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdRenditionsRenditionTypeDeleteValidateBeforeCall(docId, renditionType, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdRenditionsRenditionTypeGet
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdRenditionsRenditionTypeGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String steadyState, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/renditions/{rendition_type}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "rendition_type" + "}", localVarApiClient.escapeString(renditionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (steadyState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("steadyState", steadyState));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdRenditionsRenditionTypeGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String steadyState, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet(Async)");
        }

        // verify the required parameter 'renditionType' is set
        if (renditionType == null) {
            throw new ApiException("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet(Async)");
        }

        return objectsDocumentsDocIdRenditionsRenditionTypeGetCall(docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download Document Rendition File
     * 
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdRenditionsRenditionTypeGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String steadyState, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdRenditionsRenditionTypeGetWithHttpInfo(docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download Document Rendition File
     * 
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdRenditionsRenditionTypeGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String steadyState, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdRenditionsRenditionTypeGetValidateBeforeCall(docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Document Rendition File (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdRenditionsRenditionTypeGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String steadyState, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdRenditionsRenditionTypeGetValidateBeforeCall(docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdRenditionsRenditionTypePost
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdRenditionsRenditionTypePostCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/renditions/{rendition_type}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "rendition_type" + "}", localVarApiClient.escapeString(renditionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdRenditionsRenditionTypePostValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePost(Async)");
        }

        // verify the required parameter 'renditionType' is set
        if (renditionType == null) {
            throw new ApiException("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePost(Async)");
        }

        return objectsDocumentsDocIdRenditionsRenditionTypePostCall(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Add Single Document Rendition
     * 
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdRenditionsRenditionTypePost(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdRenditionsRenditionTypePostWithHttpInfo(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Add Single Document Rendition
     * 
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdRenditionsRenditionTypePostWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdRenditionsRenditionTypePostValidateBeforeCall(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add Single Document Rendition (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdRenditionsRenditionTypePostAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdRenditionsRenditionTypePostValidateBeforeCall(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdRenditionsRenditionTypePut
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdRenditionsRenditionTypePutCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/renditions/{rendition_type}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "rendition_type" + "}", localVarApiClient.escapeString(renditionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdRenditionsRenditionTypePutValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePut(Async)");
        }

        // verify the required parameter 'renditionType' is set
        if (renditionType == null) {
            throw new ApiException("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePut(Async)");
        }

        return objectsDocumentsDocIdRenditionsRenditionTypePutCall(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Replace Document Rendition
     * 
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdRenditionsRenditionTypePut(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdRenditionsRenditionTypePutWithHttpInfo(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Replace Document Rendition
     * 
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdRenditionsRenditionTypePutWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdRenditionsRenditionTypePutValidateBeforeCall(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Replace Document Rendition (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdRenditionsRenditionTypePutAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdRenditionsRenditionTypePutValidateBeforeCall(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete
     * @param docId The id value of the document from which to remove roles. (required)
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;. (required)
     * @param id The id value of the user or group to remove from the role. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String roleNameAndUserOrGroup, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "role_name_and_user_or_group" + "}", localVarApiClient.escapeString(roleNameAndUserOrGroup.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String roleNameAndUserOrGroup, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(Async)");
        }

        // verify the required parameter 'roleNameAndUserOrGroup' is set
        if (roleNameAndUserOrGroup == null) {
            throw new ApiException("Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(Async)");
        }

        return objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteCall(docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Remove Users &amp; Groups from Roles on a Single Document
     * 
     * @param docId The id value of the document from which to remove roles. (required)
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;. (required)
     * @param id The id value of the user or group to remove from the role. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String roleNameAndUserOrGroup, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Remove Users &amp; Groups from Roles on a Single Document
     * 
     * @param docId The id value of the document from which to remove roles. (required)
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;. (required)
     * @param id The id value of the user or group to remove from the role. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String roleNameAndUserOrGroup, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteValidateBeforeCall(docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove Users &amp; Groups from Roles on a Single Document (asynchronously)
     * 
     * @param docId The id value of the document from which to remove roles. (required)
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;. (required)
     * @param id The id value of the user or group to remove from the role. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String roleNameAndUserOrGroup, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteValidateBeforeCall(docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(Async)");
        }

        return objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetCall(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Version Attachments
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetWithHttpInfo(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Version Attachments
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetValidateBeforeCall(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Version Attachments (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetValidateBeforeCall(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsGet
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsGet(Async)");
        }

        return objectsDocumentsDocIdVersionsGetCall(docId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Versions
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Versions
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Versions (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsGetValidateBeforeCall(docId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String annotationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "annotation_id" + "}", localVarApiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String annotationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(Async)");
        }

        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetCall(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Read Annotations by ID
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String annotationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetWithHttpInfo(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Read Annotations by ID
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String annotationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetValidateBeforeCall(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Read Annotations by ID (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String annotationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetValidateBeforeCall(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String annotationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "annotation_id" + "}", localVarApiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String annotationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(Async)");
        }

        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetCall(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Read Replies of Parent Annotation
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String annotationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetWithHttpInfo(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Read Replies of Parent Annotation
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String annotationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetValidateBeforeCall(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Read Replies of Parent Annotation (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String annotationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetValidateBeforeCall(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Export Document Version Annotations to PDF
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Export Document Version Annotations to PDF
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Export Document Version Annotations to PDF (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostCall(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Import Document Version Annotations from PDF
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Import Document Version Annotations from PDF
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import Document Version Annotations from PDF (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored. (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201. (optional)
     * @param annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;  (optional)
     * @param paginationId A unique identifier used to load requests with paginated results. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String annotationTypes, @javax.annotation.Nullable String paginationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (annotationTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("annotation_types", annotationTypes));
        }

        if (paginationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_id", paginationId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String annotationTypes, @javax.annotation.Nullable String paginationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetCall(docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Read Annotations by Document Version and Type
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored. (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201. (optional)
     * @param annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;  (optional)
     * @param paginationId A unique identifier used to load requests with paginated results. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String annotationTypes, @javax.annotation.Nullable String paginationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetWithHttpInfo(docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Read Annotations by Document Version and Type
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored. (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201. (optional)
     * @param annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;  (optional)
     * @param paginationId A unique identifier used to load requests with paginated results. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String annotationTypes, @javax.annotation.Nullable String paginationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetValidateBeforeCall(docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Read Annotations by Document Version and Type (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored. (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201. (optional)
     * @param annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;  (optional)
     * @param paginationId A unique identifier used to load requests with paginated results. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String annotationTypes, @javax.annotation.Nullable String paginationId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetValidateBeforeCall(docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param attachmentId The id field value of the attachment. (required)
     * @param attachmentVersion The version of the attachment. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "attachment_version" + "}", localVarApiClient.escapeString(attachmentVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(Async)");
        }

        // verify the required parameter 'attachmentVersion' is set
        if (attachmentVersion == null) {
            throw new ApiException("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCall(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Download Document Version Attachment Version
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param attachmentId The id field value of the attachment. (required)
     * @param attachmentVersion The version of the attachment. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Download Document Version Attachment Version
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param attachmentId The id field value of the attachment. (required)
     * @param attachmentVersion The version of the attachment. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetValidateBeforeCall(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Document Version Attachment Version (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param attachmentId The id field value of the attachment. (required)
     * @param attachmentVersion The version of the attachment. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetValidateBeforeCall(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param attachmentId The id of the document attachment to retrieve. (required)
     * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "attachment_version" + "}", localVarApiClient.escapeString(attachmentVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(Async)");
        }

        // verify the required parameter 'attachmentVersion' is set
        if (attachmentVersion == null) {
            throw new ApiException("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetCall(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Version Attachment Versions
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param attachmentId The id of the document attachment to retrieve. (required)
     * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Version Attachment Versions
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param attachmentId The id of the document attachment to retrieve. (required)
     * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetValidateBeforeCall(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Version Attachment Versions (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param attachmentId The id of the document attachment to retrieve. (required)
     * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetValidateBeforeCall(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Single Document Version
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Single Document Version
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Single Document Version (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Version Notes as CSV
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Version Notes as CSV
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Version Notes as CSV (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostCall(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Document Event
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Document Event
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Document Event (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet
     * @param docId The video document id field value. (required)
     * @param majorVersion The video document major_version_number__v field value. (required)
     * @param minorVersion The video document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Video Annotations
     * 
     * @param docId The video document id field value. (required)
     * @param majorVersion The video document major_version_number__v field value. (required)
     * @param minorVersion The video document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Video Annotations
     * 
     * @param docId The video document id field value. (required)
     * @param majorVersion The video document major_version_number__v field value. (required)
     * @param minorVersion The video document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Video Annotations (asynchronously)
     * 
     * @param docId The video document id field value. (required)
     * @param majorVersion The video document major_version_number__v field value. (required)
     * @param minorVersion The video document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetCall(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Download Document Version File
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetWithHttpInfo(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Download Document Version File
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetValidateBeforeCall(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Document Version File (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetValidateBeforeCall(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Version
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Version
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Version (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIMigrationMode != null) {
            localVarHeaderParams.put("X-VaultAPI-MigrationMode", localVarApiClient.parameterToString(xVaultAPIMigrationMode));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutCall(docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);

    }

    /**
     * Update Document Version
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutWithHttpInfo(docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
    }

    /**
     * Update Document Version
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutValidateBeforeCall(docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Document Version (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutValidateBeforeCall(docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Relationships
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Relationships
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Relationships (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostCall(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Single Document Relationship
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Single Document Relationship
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Single Document Relationship (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "relationship_id" + "}", localVarApiClient.escapeString(relationshipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(Async)");
        }

        // verify the required parameter 'relationshipId' is set
        if (relationshipId == null) {
            throw new ApiException("Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCall(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Single Document Relationship
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Single Document Relationship
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteValidateBeforeCall(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Single Document Relationship (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteValidateBeforeCall(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "relationship_id" + "}", localVarApiClient.escapeString(relationshipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(Async)");
        }

        // verify the required parameter 'relationshipId' is set
        if (relationshipId == null) {
            throw new ApiException("Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCall(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Relationship
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Relationship
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetValidateBeforeCall(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Relationship (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String relationshipId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetValidateBeforeCall(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Version Renditions
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Version Renditions
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Version Renditions (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetValidateBeforeCall(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "rendition_type" + "}", localVarApiClient.escapeString(renditionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(Async)");
        }

        // verify the required parameter 'renditionType' is set
        if (renditionType == null) {
            throw new ApiException("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteCall(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Document Version Rendition
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteWithHttpInfo(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Document Version Rendition
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteValidateBeforeCall(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Document Version Rendition (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteValidateBeforeCall(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "rendition_type" + "}", localVarApiClient.escapeString(renditionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(Async)");
        }

        // verify the required parameter 'renditionType' is set
        if (renditionType == null) {
            throw new ApiException("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetCall(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download Document Version Rendition File
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetWithHttpInfo(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download Document Version Rendition File
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetValidateBeforeCall(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Document Version Rendition File (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetValidateBeforeCall(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "rendition_type" + "}", localVarApiClient.escapeString(renditionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(Async)");
        }

        // verify the required parameter 'renditionType' is set
        if (renditionType == null) {
            throw new ApiException("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostCall(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Upload Document Version Rendition
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostWithHttpInfo(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Upload Document Version Rendition
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostValidateBeforeCall(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload Document Version Rendition (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostValidateBeforeCall(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "rendition_type" + "}", localVarApiClient.escapeString(renditionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(Async)");
        }

        // verify the required parameter 'renditionType' is set
        if (renditionType == null) {
            throw new ApiException("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutCall(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Replace Document Version Rendition
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutWithHttpInfo(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Replace Document Version Rendition
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutValidateBeforeCall(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Replace Document Version Rendition (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param renditionType The document rendition type. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String renditionType, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutValidateBeforeCall(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail"
            .replace("{" + "doc_id" + "}", localVarApiClient.escapeString(docId.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetValidateBeforeCall(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(Async)");
        }

        return objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetCall(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Download Document Version Thumbnail File
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetWithHttpInfo(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Download Document Version Thumbnail File
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetWithHttpInfo(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetValidateBeforeCall(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Document Version Thumbnail File (asynchronously)
     * 
     * @param docId The document id field value. (required)
     * @param majorVersion The document major_version_number__v field value. (required)
     * @param minorVersion The document minor_version_number__v field value. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetAsync(@javax.annotation.Nonnull String docId, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetValidateBeforeCall(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsGet
     * @param namedFilter Retrieves only documents which you have created. (optional)
     * @param scope Searches only within the document content. (optional)
     * @param versionscope Retrieves all document versions, rather than only the latest version. (optional)
     * @param search Search for documents based on a {keyword} in searchable document fields. (optional)
     * @param limit See VQL documentation for more information. (optional)
     * @param sort See VQL documentation for more information. (optional)
     * @param start See VQL documentation for more information. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsGetCall(@javax.annotation.Nullable String namedFilter, @javax.annotation.Nullable String scope, @javax.annotation.Nullable String versionscope, @javax.annotation.Nullable String search, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String start, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (namedFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("named_filter", namedFilter));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (versionscope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionscope", versionscope));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsGetValidateBeforeCall(@javax.annotation.Nullable String namedFilter, @javax.annotation.Nullable String scope, @javax.annotation.Nullable String versionscope, @javax.annotation.Nullable String search, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String start, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsGetCall(namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Documents
     * 
     * @param namedFilter Retrieves only documents which you have created. (optional)
     * @param scope Searches only within the document content. (optional)
     * @param versionscope Retrieves all document versions, rather than only the latest version. (optional)
     * @param search Search for documents based on a {keyword} in searchable document fields. (optional)
     * @param limit See VQL documentation for more information. (optional)
     * @param sort See VQL documentation for more information. (optional)
     * @param start See VQL documentation for more information. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsGet(@javax.annotation.Nullable String namedFilter, @javax.annotation.Nullable String scope, @javax.annotation.Nullable String versionscope, @javax.annotation.Nullable String search, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String start, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsGetWithHttpInfo(namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Documents
     * 
     * @param namedFilter Retrieves only documents which you have created. (optional)
     * @param scope Searches only within the document content. (optional)
     * @param versionscope Retrieves all document versions, rather than only the latest version. (optional)
     * @param search Search for documents based on a {keyword} in searchable document fields. (optional)
     * @param limit See VQL documentation for more information. (optional)
     * @param sort See VQL documentation for more information. (optional)
     * @param start See VQL documentation for more information. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsGetWithHttpInfo(@javax.annotation.Nullable String namedFilter, @javax.annotation.Nullable String scope, @javax.annotation.Nullable String versionscope, @javax.annotation.Nullable String search, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String start, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsGetValidateBeforeCall(namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Documents (asynchronously)
     * 
     * @param namedFilter Retrieves only documents which you have created. (optional)
     * @param scope Searches only within the document content. (optional)
     * @param versionscope Retrieves all document versions, rather than only the latest version. (optional)
     * @param search Search for documents based on a {keyword} in searchable document fields. (optional)
     * @param limit See VQL documentation for more information. (optional)
     * @param sort See VQL documentation for more information. (optional)
     * @param start See VQL documentation for more information. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsGetAsync(@javax.annotation.Nullable String namedFilter, @javax.annotation.Nullable String scope, @javax.annotation.Nullable String versionscope, @javax.annotation.Nullable String search, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String start, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsGetValidateBeforeCall(namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsIdRolesGet
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsIdRolesGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{id}/roles"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsIdRolesGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsDocumentsIdRolesGet(Async)");
        }

        return objectsDocumentsIdRolesGetCall(id, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Document Roles
     * 
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsIdRolesGet(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsIdRolesGetWithHttpInfo(id, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Document Roles
     * 
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsIdRolesGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsIdRolesGetValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Document Roles (asynchronously)
     * 
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsIdRolesGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsIdRolesGetValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsIdRolesPost
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsIdRolesPostCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{id}/roles"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsIdRolesPostValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsDocumentsIdRolesPost(Async)");
        }

        return objectsDocumentsIdRolesPostCall(id, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Assign Users &amp; Groups to Roles on a Single Document
     * 
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsIdRolesPost(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsIdRolesPostWithHttpInfo(id, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Assign Users &amp; Groups to Roles on a Single Document
     * 
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsIdRolesPostWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsIdRolesPostValidateBeforeCall(id, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Assign Users &amp; Groups to Roles on a Single Document (asynchronously)
     * 
     * @param id  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsIdRolesPostAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsIdRolesPostValidateBeforeCall(id, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsIdRolesRoleNameGet
     * @param id The document &#x60;id&#x60;. (required)
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsIdRolesRoleNameGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{id}/roles/{role_name}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role_name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsIdRolesRoleNameGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsDocumentsIdRolesRoleNameGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling objectsDocumentsIdRolesRoleNameGet(Async)");
        }

        return objectsDocumentsIdRolesRoleNameGetCall(id, roleName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Role
     * 
     * @param id The document &#x60;id&#x60;. (required)
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsIdRolesRoleNameGet(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsIdRolesRoleNameGetWithHttpInfo(id, roleName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Role
     * 
     * @param id The document &#x60;id&#x60;. (required)
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsIdRolesRoleNameGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsIdRolesRoleNameGetValidateBeforeCall(id, roleName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Role (asynchronously)
     * 
     * @param id The document &#x60;id&#x60;. (required)
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsIdRolesRoleNameGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsIdRolesRoleNameGetValidateBeforeCall(id, roleName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet
     * @param id The document id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the document. (required)
     * @param minorVersion The minor version number of the document. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(Async)");
        }

        return objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetCall(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document User Actions
     * 
     * @param id The document id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the document. (required)
     * @param minorVersion The minor version number of the document. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document User Actions
     * 
     * @param id The document id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the document. (required)
     * @param minorVersion The minor version number of the document. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetValidateBeforeCall(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document User Actions (asynchronously)
     * 
     * @param id The document id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the document. (required)
     * @param minorVersion The minor version number of the document. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetValidateBeforeCall(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet
     * @param id The document id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the document. (required)
     * @param minorVersion The minor version number of the document. (required)
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "name__v" + "}", localVarApiClient.escapeString(nameV.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(Async)");
        }

        // verify the required parameter 'nameV' is set
        if (nameV == null) {
            throw new ApiException("Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(Async)");
        }

        return objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCall(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Entry Criteria
     * 
     * @param id The document id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the document. (required)
     * @param minorVersion The minor version number of the document. (required)
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Entry Criteria
     * 
     * @param id The document id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the document. (required)
     * @param minorVersion The minor version number of the document. (required)
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetValidateBeforeCall(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Entry Criteria (asynchronously)
     * 
     * @param id The document id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the document. (required)
     * @param minorVersion The minor version number of the document. (required)
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetValidateBeforeCall(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut
     * @param id The document id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the document. (required)
     * @param minorVersion The minor version number of the document. (required)
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "major_version" + "}", localVarApiClient.escapeString(majorVersion.toString()))
            .replace("{" + "minor_version" + "}", localVarApiClient.escapeString(minorVersion.toString()))
            .replace("{" + "name__v" + "}", localVarApiClient.escapeString(nameV.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(Async)");
        }

        // verify the required parameter 'majorVersion' is set
        if (majorVersion == null) {
            throw new ApiException("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(Async)");
        }

        // verify the required parameter 'minorVersion' is set
        if (minorVersion == null) {
            throw new ApiException("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(Async)");
        }

        // verify the required parameter 'nameV' is set
        if (nameV == null) {
            throw new ApiException("Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(Async)");
        }

        return objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCall(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Initiate Document User Action
     * 
     * @param id The document id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the document. (required)
     * @param minorVersion The minor version number of the document. (required)
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Initiate Document User Action
     * 
     * @param id The document id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the document. (required)
     * @param minorVersion The minor version number of the document. (required)
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutValidateBeforeCall(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate Document User Action (asynchronously)
     * 
     * @param id The document id field value from which to retrieve available user actions. (required)
     * @param majorVersion The major version number of the document. (required)
     * @param minorVersion The minor version number of the document. (required)
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String majorVersion, @javax.annotation.Nonnull String minorVersion, @javax.annotation.Nonnull String nameV, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutValidateBeforeCall(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsLifecycleActionsPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsLifecycleActionsPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/lifecycle_actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsLifecycleActionsPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsLifecycleActionsPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve User Actions on Multiple Documents
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsLifecycleActionsPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsLifecycleActionsPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Retrieve User Actions on Multiple Documents
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsLifecycleActionsPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsLifecycleActionsPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve User Actions on Multiple Documents (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsLifecycleActionsPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsLifecycleActionsPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsLifecycleActionsUserActionNamePut
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsLifecycleActionsUserActionNamePutCall(@javax.annotation.Nonnull String userActionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/lifecycle_actions/{user_action_name}"
            .replace("{" + "user_action_name" + "}", localVarApiClient.escapeString(userActionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsLifecycleActionsUserActionNamePutValidateBeforeCall(@javax.annotation.Nonnull String userActionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userActionName' is set
        if (userActionName == null) {
            throw new ApiException("Missing the required parameter 'userActionName' when calling objectsDocumentsLifecycleActionsUserActionNamePut(Async)");
        }

        return objectsDocumentsLifecycleActionsUserActionNamePutCall(userActionName, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Initiate Bulk Document User Actions
     * 
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsLifecycleActionsUserActionNamePut(@javax.annotation.Nonnull String userActionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsLifecycleActionsUserActionNamePutWithHttpInfo(userActionName, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Initiate Bulk Document User Actions
     * 
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsLifecycleActionsUserActionNamePutWithHttpInfo(@javax.annotation.Nonnull String userActionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsLifecycleActionsUserActionNamePutValidateBeforeCall(userActionName, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate Bulk Document User Actions (asynchronously)
     * 
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsLifecycleActionsUserActionNamePutAsync(@javax.annotation.Nonnull String userActionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsLifecycleActionsUserActionNamePutValidateBeforeCall(userActionName, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIMigrationMode != null) {
            localVarHeaderParams.put("X-VaultAPI-MigrationMode", localVarApiClient.parameterToString(xVaultAPIMigrationMode));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsPostCall(authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);

    }

    /**
     * Create Single Document
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsPostWithHttpInfo(authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
    }

    /**
     * Create Single Document
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsPostValidateBeforeCall(authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Single Document (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsPostValidateBeforeCall(authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsRelationshipsBatchDelete
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsRelationshipsBatchDeleteCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/relationships/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsRelationshipsBatchDeleteValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsRelationshipsBatchDeleteCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Multiple Document Relationships
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsRelationshipsBatchDelete(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsRelationshipsBatchDeleteWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Delete Multiple Document Relationships
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsRelationshipsBatchDeleteWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsRelationshipsBatchDeleteValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Multiple Document Relationships (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsRelationshipsBatchDeleteAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsRelationshipsBatchDeleteValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsRelationshipsBatchPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsRelationshipsBatchPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/relationships/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsRelationshipsBatchPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsRelationshipsBatchPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Multiple Document Relationships
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsRelationshipsBatchPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsRelationshipsBatchPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Multiple Document Relationships
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsRelationshipsBatchPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsRelationshipsBatchPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Multiple Document Relationships (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsRelationshipsBatchPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsRelationshipsBatchPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsRenditionsBatchDelete
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsRenditionsBatchDeleteCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/renditions/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsRenditionsBatchDeleteValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsRenditionsBatchDeleteCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Multiple Document Renditions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsRenditionsBatchDelete(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsRenditionsBatchDeleteWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Delete Multiple Document Renditions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsRenditionsBatchDeleteWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsRenditionsBatchDeleteValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Multiple Document Renditions (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsRenditionsBatchDeleteAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsRenditionsBatchDeleteValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsRenditionsBatchPost
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsRenditionsBatchPostCall(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String largeSizeAsset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/renditions/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idParam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idParam", idParam));
        }

        if (largeSizeAsset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("largeSizeAsset", largeSizeAsset));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIMigrationMode != null) {
            localVarHeaderParams.put("X-VaultAPI-MigrationMode", localVarApiClient.parameterToString(xVaultAPIMigrationMode));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsRenditionsBatchPostValidateBeforeCall(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String largeSizeAsset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsRenditionsBatchPostCall(idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);

    }

    /**
     * Add Multiple Document Renditions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsRenditionsBatchPost(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String largeSizeAsset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsRenditionsBatchPostWithHttpInfo(idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
    }

    /**
     * Add Multiple Document Renditions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsRenditionsBatchPostWithHttpInfo(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String largeSizeAsset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsRenditionsBatchPostValidateBeforeCall(idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add Multiple Document Renditions (asynchronously)
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsRenditionsBatchPostAsync(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String largeSizeAsset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsRenditionsBatchPostValidateBeforeCall(idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsRolesBatchDelete
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsRolesBatchDeleteCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/roles/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsRolesBatchDeleteValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsRolesBatchDeleteCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Remove Users and Groups from Roles on Multiple Documents &amp; Binders
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsRolesBatchDelete(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsRolesBatchDeleteWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Remove Users and Groups from Roles on Multiple Documents &amp; Binders
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsRolesBatchDeleteWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsRolesBatchDeleteValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove Users and Groups from Roles on Multiple Documents &amp; Binders (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsRolesBatchDeleteAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsRolesBatchDeleteValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsRolesBatchPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsRolesBatchPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/roles/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsRolesBatchPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsRolesBatchPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsRolesBatchPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsRolesBatchPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsRolesBatchPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsRolesBatchPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsRolesBatchPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsRolesBatchPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsTemplatesGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsTemplatesGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsTemplatesGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Template Collection
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsTemplatesGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsTemplatesGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Template Collection
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsTemplatesGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsTemplatesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Template Collection (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsTemplatesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsTemplatesPost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsTemplatesPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsTemplatesPostCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Create Single Document Template
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsTemplatesPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsTemplatesPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Create Single Document Template
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsTemplatesPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsTemplatesPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Single Document Template (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsTemplatesPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsTemplatesPut
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesPutCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsTemplatesPutValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsTemplatesPutCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Multiple Document Templates
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsTemplatesPut(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsTemplatesPutWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Multiple Document Templates
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsTemplatesPutWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsTemplatesPutValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Multiple Document Templates (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesPutAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsTemplatesPutValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsTemplatesTemplateNameDelete
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesTemplateNameDeleteCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/templates/{template_name}"
            .replace("{" + "template_name" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsTemplatesTemplateNameDeleteValidateBeforeCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameDelete(Async)");
        }

        return objectsDocumentsTemplatesTemplateNameDeleteCall(templateName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Basic Document Template
     * 
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsTemplatesTemplateNameDelete(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsTemplatesTemplateNameDeleteWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Basic Document Template
     * 
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsTemplatesTemplateNameDeleteWithHttpInfo(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsTemplatesTemplateNameDeleteValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Basic Document Template (asynchronously)
     * 
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesTemplateNameDeleteAsync(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsTemplatesTemplateNameDeleteValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsTemplatesTemplateNameFileGet
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesTemplateNameFileGetCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/templates/{template_name}/file"
            .replace("{" + "template_name" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsTemplatesTemplateNameFileGetValidateBeforeCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameFileGet(Async)");
        }

        return objectsDocumentsTemplatesTemplateNameFileGetCall(templateName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download Document Template File
     * 
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsTemplatesTemplateNameFileGet(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsTemplatesTemplateNameFileGetWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download Document Template File
     * 
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsTemplatesTemplateNameFileGetWithHttpInfo(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsTemplatesTemplateNameFileGetValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Document Template File (asynchronously)
     * 
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesTemplateNameFileGetAsync(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsTemplatesTemplateNameFileGetValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsTemplatesTemplateNameGet
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesTemplateNameGetCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/templates/{template_name}"
            .replace("{" + "template_name" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsTemplatesTemplateNameGetValidateBeforeCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameGet(Async)");
        }

        return objectsDocumentsTemplatesTemplateNameGetCall(templateName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Document Template Attributes
     * 
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsTemplatesTemplateNameGet(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsTemplatesTemplateNameGetWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Document Template Attributes
     * 
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsTemplatesTemplateNameGetWithHttpInfo(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsTemplatesTemplateNameGetValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Document Template Attributes (asynchronously)
     * 
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesTemplateNameGetAsync(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsTemplatesTemplateNameGetValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsTemplatesTemplateNamePut
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesTemplateNamePutCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/templates/{template_name}"
            .replace("{" + "template_name" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsTemplatesTemplateNamePutValidateBeforeCall(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNamePut(Async)");
        }

        return objectsDocumentsTemplatesTemplateNamePutCall(templateName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Update Single Document Template
     * 
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsTemplatesTemplateNamePut(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsTemplatesTemplateNamePutWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Update Single Document Template
     * 
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsTemplatesTemplateNamePutWithHttpInfo(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsTemplatesTemplateNamePutValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Single Document Template (asynchronously)
     * 
     * @param templateName The document template name__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTemplatesTemplateNamePutAsync(@javax.annotation.Nonnull String templateName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsTemplatesTemplateNamePutValidateBeforeCall(templateName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsTokensPost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTokensPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsTokensPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsTokensPostCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Document Tokens
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsTokensPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsTokensPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Document Tokens
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsTokensPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsTokensPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Document Tokens (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsTokensPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsTokensPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsVersionsBatchActionsFileextractPost
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsVersionsBatchActionsFileextractPostCall(@javax.annotation.Nullable Boolean source, @javax.annotation.Nullable Boolean renditions, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/versions/batch/actions/fileextract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (renditions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("renditions", renditions));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsVersionsBatchActionsFileextractPostValidateBeforeCall(@javax.annotation.Nullable Boolean source, @javax.annotation.Nullable Boolean renditions, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsVersionsBatchActionsFileextractPostCall(source, renditions, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Export Document Versions
     * 
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsVersionsBatchActionsFileextractPost(@javax.annotation.Nullable Boolean source, @javax.annotation.Nullable Boolean renditions, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsVersionsBatchActionsFileextractPostWithHttpInfo(source, renditions, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Export Document Versions
     * 
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsVersionsBatchActionsFileextractPostWithHttpInfo(@javax.annotation.Nullable Boolean source, @javax.annotation.Nullable Boolean renditions, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsVersionsBatchActionsFileextractPostValidateBeforeCall(source, renditions, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Export Document Versions (asynchronously)
     * 
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsVersionsBatchActionsFileextractPostAsync(@javax.annotation.Nullable Boolean source, @javax.annotation.Nullable Boolean renditions, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsVersionsBatchActionsFileextractPostValidateBeforeCall(source, renditions, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsVersionsBatchDelete
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsVersionsBatchDeleteCall(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/versions/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idParam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idParam", idParam));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsVersionsBatchDeleteValidateBeforeCall(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsVersionsBatchDeleteCall(idParam, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Multiple Document Versions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsVersionsBatchDelete(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsVersionsBatchDeleteWithHttpInfo(idParam, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Delete Multiple Document Versions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsVersionsBatchDeleteWithHttpInfo(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsVersionsBatchDeleteValidateBeforeCall(idParam, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Multiple Document Versions (asynchronously)
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsVersionsBatchDeleteAsync(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsVersionsBatchDeleteValidateBeforeCall(idParam, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDocumentsVersionsBatchPost
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsVersionsBatchPostCall(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/documents/versions/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idParam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idParam", idParam));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIMigrationMode != null) {
            localVarHeaderParams.put("X-VaultAPI-MigrationMode", localVarApiClient.parameterToString(xVaultAPIMigrationMode));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDocumentsVersionsBatchPostValidateBeforeCall(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDocumentsVersionsBatchPostCall(idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);

    }

    /**
     * Create Multiple Document Versions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDocumentsVersionsBatchPost(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDocumentsVersionsBatchPostWithHttpInfo(idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
    }

    /**
     * Create Multiple Document Versions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDocumentsVersionsBatchPostWithHttpInfo(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDocumentsVersionsBatchPostValidateBeforeCall(idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Multiple Document Versions (asynchronously)
     * 
     * @param idParam If you’re identifying documents in your input by their external ID (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDocumentsVersionsBatchPostAsync(@javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIMigrationMode, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDocumentsVersionsBatchPostValidateBeforeCall(idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDomainGet
     * @param includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDomainGetCall(@javax.annotation.Nullable Boolean includeApplication, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/domain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeApplication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_application", includeApplication));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDomainGetValidateBeforeCall(@javax.annotation.Nullable Boolean includeApplication, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDomainGetCall(includeApplication, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Domain Information
     * 
     * @param includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDomainGet(@javax.annotation.Nullable Boolean includeApplication, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDomainGetWithHttpInfo(includeApplication, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Retrieve Domain Information
     * 
     * @param includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDomainGetWithHttpInfo(@javax.annotation.Nullable Boolean includeApplication, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDomainGetValidateBeforeCall(includeApplication, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Domain Information (asynchronously)
     * 
     * @param includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDomainGetAsync(@javax.annotation.Nullable Boolean includeApplication, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDomainGetValidateBeforeCall(includeApplication, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsDomainsGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDomainsGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsDomainsGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsDomainsGetCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Domains
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsDomainsGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsDomainsGetWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Retrieve Domains
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsDomainsGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsDomainsGetValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Domains (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsDomainsGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsDomainsGetValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsEdlMatchedDocumentsBatchActionsAddPost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsEdlMatchedDocumentsBatchActionsAddPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/edl_matched_documents/batch/actions/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsEdlMatchedDocumentsBatchActionsAddPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsEdlMatchedDocumentsBatchActionsAddPostCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Add EDL Matched Documents
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsEdlMatchedDocumentsBatchActionsAddPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsEdlMatchedDocumentsBatchActionsAddPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Add EDL Matched Documents
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsEdlMatchedDocumentsBatchActionsAddPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsEdlMatchedDocumentsBatchActionsAddPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add EDL Matched Documents (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsEdlMatchedDocumentsBatchActionsAddPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsEdlMatchedDocumentsBatchActionsAddPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsEdlMatchedDocumentsBatchActionsRemovePost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsEdlMatchedDocumentsBatchActionsRemovePostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/edl_matched_documents/batch/actions/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsEdlMatchedDocumentsBatchActionsRemovePostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsEdlMatchedDocumentsBatchActionsRemovePostCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Remove EDL Matched Documents
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsEdlMatchedDocumentsBatchActionsRemovePost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsEdlMatchedDocumentsBatchActionsRemovePostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Remove EDL Matched Documents
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsEdlMatchedDocumentsBatchActionsRemovePostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsEdlMatchedDocumentsBatchActionsRemovePostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove EDL Matched Documents (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsEdlMatchedDocumentsBatchActionsRemovePostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsEdlMatchedDocumentsBatchActionsRemovePostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsGroupsAutoGet
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000.  (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsGroupsAutoGetCall(@javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/groups/auto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsGroupsAutoGetValidateBeforeCall(@javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsGroupsAutoGetCall(limit, offset, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Auto Managed Groups
     * 
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000.  (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsGroupsAutoGet(@javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsGroupsAutoGetWithHttpInfo(limit, offset, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Auto Managed Groups
     * 
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000.  (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsGroupsAutoGetWithHttpInfo(@javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsGroupsAutoGetValidateBeforeCall(limit, offset, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Auto Managed Groups (asynchronously)
     * 
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000.  (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsGroupsAutoGetAsync(@javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsGroupsAutoGetValidateBeforeCall(limit, offset, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsGroupsGet
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsGroupsGetCall(@javax.annotation.Nullable String includeImplied, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeImplied != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeImplied", includeImplied));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsGroupsGetValidateBeforeCall(@javax.annotation.Nullable String includeImplied, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsGroupsGetCall(includeImplied, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Groups
     * 
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsGroupsGet(@javax.annotation.Nullable String includeImplied, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsGroupsGetWithHttpInfo(includeImplied, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Groups
     * 
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsGroupsGetWithHttpInfo(@javax.annotation.Nullable String includeImplied, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsGroupsGetValidateBeforeCall(includeImplied, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Groups (asynchronously)
     * 
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsGroupsGetAsync(@javax.annotation.Nullable String includeImplied, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsGroupsGetValidateBeforeCall(includeImplied, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsGroupsGroupIdDelete
     * @param groupId The group id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsGroupsGroupIdDeleteCall(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsGroupsGroupIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdDelete(Async)");
        }

        return objectsGroupsGroupIdDeleteCall(groupId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Group
     * 
     * @param groupId The group id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsGroupsGroupIdDelete(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsGroupsGroupIdDeleteWithHttpInfo(groupId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Group
     * 
     * @param groupId The group id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsGroupsGroupIdDeleteWithHttpInfo(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsGroupsGroupIdDeleteValidateBeforeCall(groupId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Group (asynchronously)
     * 
     * @param groupId The group id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsGroupsGroupIdDeleteAsync(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsGroupsGroupIdDeleteValidateBeforeCall(groupId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsGroupsGroupIdGet
     * @param groupId The group id field value. (required)
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsGroupsGroupIdGetCall(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable Boolean includeImplied, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeImplied != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeImplied", includeImplied));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsGroupsGroupIdGetValidateBeforeCall(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable Boolean includeImplied, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdGet(Async)");
        }

        return objectsGroupsGroupIdGetCall(groupId, includeImplied, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Group
     * 
     * @param groupId The group id field value. (required)
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsGroupsGroupIdGet(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable Boolean includeImplied, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsGroupsGroupIdGetWithHttpInfo(groupId, includeImplied, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Group
     * 
     * @param groupId The group id field value. (required)
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsGroupsGroupIdGetWithHttpInfo(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable Boolean includeImplied, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsGroupsGroupIdGetValidateBeforeCall(groupId, includeImplied, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Group (asynchronously)
     * 
     * @param groupId The group id field value. (required)
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsGroupsGroupIdGetAsync(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable Boolean includeImplied, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsGroupsGroupIdGetValidateBeforeCall(groupId, includeImplied, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsGroupsGroupIdPut
     * @param groupId The group id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsGroupsGroupIdPutCall(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsGroupsGroupIdPutValidateBeforeCall(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdPut(Async)");
        }

        return objectsGroupsGroupIdPutCall(groupId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Group
     * 
     * @param groupId The group id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsGroupsGroupIdPut(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsGroupsGroupIdPutWithHttpInfo(groupId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Group
     * 
     * @param groupId The group id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsGroupsGroupIdPutWithHttpInfo(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsGroupsGroupIdPutValidateBeforeCall(groupId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Group (asynchronously)
     * 
     * @param groupId The group id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsGroupsGroupIdPutAsync(@javax.annotation.Nonnull String groupId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsGroupsGroupIdPutValidateBeforeCall(groupId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsGroupsPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsGroupsPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsGroupsPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsGroupsPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Group 
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsGroupsPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsGroupsPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Group 
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsGroupsPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsGroupsPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Group  (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsGroupsPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsGroupsPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsLicensesGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsLicensesGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsLicensesGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsLicensesGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Application License Usage
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsLicensesGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsLicensesGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Application License Usage
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsLicensesGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsLicensesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Application License Usage (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsLicensesGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsLicensesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsActionsGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsActionsGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsActionsGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsObjectworkflowsActionsGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Multi-Record Workflows
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsActionsGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsActionsGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Multi-Record Workflows
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsActionsGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsActionsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Multi-Record Workflows (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsActionsGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsActionsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsActionsWorkflowNameGet
     * @param workflowName  (required)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsActionsWorkflowNameGetCall(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/actions/{workflow_name}"
            .replace("{" + "workflow_name" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsActionsWorkflowNameGetValidateBeforeCall(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNameGet(Async)");
        }

        return objectsObjectworkflowsActionsWorkflowNameGetCall(workflowName, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Multi-Record Workflow Details
     * 
     * @param workflowName  (required)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsActionsWorkflowNameGet(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsActionsWorkflowNameGetWithHttpInfo(workflowName, authorization, xVaultAPIClientID);
    }

    /**
     * Retrieve Multi-Record Workflow Details
     * 
     * @param workflowName  (required)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsActionsWorkflowNameGetWithHttpInfo(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsActionsWorkflowNameGetValidateBeforeCall(workflowName, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Multi-Record Workflow Details (asynchronously)
     * 
     * @param workflowName  (required)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsActionsWorkflowNameGetAsync(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsActionsWorkflowNameGetValidateBeforeCall(workflowName, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsActionsWorkflowNamePost
     * @param workflowName  (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsActionsWorkflowNamePostCall(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/actions/{workflow_name}"
            .replace("{" + "workflow_name" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsActionsWorkflowNamePostValidateBeforeCall(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNamePost(Async)");
        }

        return objectsObjectworkflowsActionsWorkflowNamePostCall(workflowName, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Initiate Multi-Record Workflow
     * 
     * @param workflowName  (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsActionsWorkflowNamePost(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsActionsWorkflowNamePostWithHttpInfo(workflowName, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Initiate Multi-Record Workflow
     * 
     * @param workflowName  (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsActionsWorkflowNamePostWithHttpInfo(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsActionsWorkflowNamePostValidateBeforeCall(workflowName, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate Multi-Record Workflow (asynchronously)
     * 
     * @param workflowName  (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsActionsWorkflowNamePostAsync(@javax.annotation.Nonnull String workflowName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsActionsWorkflowNamePostValidateBeforeCall(workflowName, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsGet
     * @param objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsGetCall(@javax.annotation.Nullable String objectV, @javax.annotation.Nullable String recordIdV, @javax.annotation.Nullable String participant, @javax.annotation.Nullable String statusV, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object__v", objectV));
        }

        if (recordIdV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("record_id__v", recordIdV));
        }

        if (participant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("participant", participant));
        }

        if (statusV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__v", statusV));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsGetValidateBeforeCall(@javax.annotation.Nullable String objectV, @javax.annotation.Nullable String recordIdV, @javax.annotation.Nullable String participant, @javax.annotation.Nullable String statusV, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsObjectworkflowsGetCall(objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Workflows
     * 
     * @param objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsGet(@javax.annotation.Nullable String objectV, @javax.annotation.Nullable String recordIdV, @javax.annotation.Nullable String participant, @javax.annotation.Nullable String statusV, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsGetWithHttpInfo(objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Workflows
     * 
     * @param objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsGetWithHttpInfo(@javax.annotation.Nullable String objectV, @javax.annotation.Nullable String recordIdV, @javax.annotation.Nullable String participant, @javax.annotation.Nullable String statusV, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsGetValidateBeforeCall(objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Workflows (asynchronously)
     * 
     * @param objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
     * @param participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsGetAsync(@javax.annotation.Nullable String objectV, @javax.annotation.Nullable String recordIdV, @javax.annotation.Nullable String participant, @javax.annotation.Nullable String statusV, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsGetValidateBeforeCall(objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksGet
     * @param objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v.  (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksGetCall(@javax.annotation.Nullable String objectV, @javax.annotation.Nullable String recordIdV, @javax.annotation.Nullable String assigneeV, @javax.annotation.Nullable String statusV, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object__v", objectV));
        }

        if (recordIdV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("record_id__v", recordIdV));
        }

        if (assigneeV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee__v", assigneeV));
        }

        if (statusV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__v", statusV));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksGetValidateBeforeCall(@javax.annotation.Nullable String objectV, @javax.annotation.Nullable String recordIdV, @javax.annotation.Nullable String assigneeV, @javax.annotation.Nullable String statusV, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsObjectworkflowsTasksGetCall(objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Workflow Tasks
     * 
     * @param objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v.  (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksGet(@javax.annotation.Nullable String objectV, @javax.annotation.Nullable String recordIdV, @javax.annotation.Nullable String assigneeV, @javax.annotation.Nullable String statusV, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksGetWithHttpInfo(objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Workflow Tasks
     * 
     * @param objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v.  (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksGetWithHttpInfo(@javax.annotation.Nullable String objectV, @javax.annotation.Nullable String recordIdV, @javax.annotation.Nullable String assigneeV, @javax.annotation.Nullable String statusV, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksGetValidateBeforeCall(objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Workflow Tasks (asynchronously)
     * 
     * @param objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
     * @param assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
     * @param statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v.  (optional)
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksGetAsync(@javax.annotation.Nullable String objectV, @javax.annotation.Nullable String recordIdV, @javax.annotation.Nullable String assigneeV, @javax.annotation.Nullable String statusV, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksGetValidateBeforeCall(objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdActionsAcceptPost
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsAcceptPostCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/accept"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsAcceptPostValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsAcceptPost(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdActionsAcceptPostCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Accept Single Record Workflow Task
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdActionsAcceptPost(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdActionsAcceptPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Accept Single Record Workflow Task
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdActionsAcceptPostWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsAcceptPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Accept Single Record Workflow Task (asynchronously)
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsAcceptPostAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsAcceptPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdActionsCancelPost
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsCancelPostCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/cancel"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsCancelPostValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCancelPost(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdActionsCancelPostCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Cancel Workflow Task
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdActionsCancelPost(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdActionsCancelPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Cancel Workflow Task
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdActionsCancelPostWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsCancelPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Workflow Task (asynchronously)
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsCancelPostAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsCancelPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdActionsCompletePost
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsCompletePostCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/complete"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsCompletePostValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCompletePost(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdActionsCompletePostCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Complete Single Record Workflow Task
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdActionsCompletePost(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdActionsCompletePostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Complete Single Record Workflow Task
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdActionsCompletePostWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsCompletePostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Complete Single Record Workflow Task (asynchronously)
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsCompletePostAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsCompletePostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdActionsGet
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsGetCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsGetValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsGet(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdActionsGetCall(taskId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Workflow Task Actions
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdActionsGet(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdActionsGetWithHttpInfo(taskId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Workflow Task Actions
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdActionsGetWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsGetValidateBeforeCall(taskId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Workflow Task Actions (asynchronously)
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsGetAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsGetValidateBeforeCall(taskId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Accept Multi-item Workflow Task
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Accept Multi-item Workflow Task
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Accept Multi-item Workflow Task (asynchronously)
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Complete Multi-item Workflow Task
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Complete Multi-item Workflow Task
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Complete Multi-item Workflow Task (asynchronously)
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Manage Multi-Item Workflow Content
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Manage Multi-Item Workflow Content
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Manage Multi-Item Workflow Content (asynchronously)
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost
     * @param taskId The id of the task to reassign. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Reassign Multi-item Workflow Task
     * 
     * @param taskId The id of the task to reassign. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Reassign Multi-item Workflow Task
     * 
     * @param taskId The id of the task to reassign. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reassign Multi-item Workflow Task (asynchronously)
     * 
     * @param taskId The id of the task to reassign. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdActionsReassignPost
     * @param taskId The id of the task to reassign. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsReassignPostCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/reassign"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsReassignPostValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsReassignPost(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdActionsReassignPostCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Reassign Single Record Workflow Task
     * 
     * @param taskId The id of the task to reassign. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdActionsReassignPost(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdActionsReassignPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Reassign Single Record Workflow Task
     * 
     * @param taskId The id of the task to reassign. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdActionsReassignPostWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsReassignPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reassign Single Record Workflow Task (asynchronously)
     * 
     * @param taskId The id of the task to reassign. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsReassignPostAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsReassignPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdActionsTaskActionGet
     * @param taskId The task id field value. (required)
     * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsTaskActionGetCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nonnull String taskAction, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/{task_action}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "task_action" + "}", localVarApiClient.escapeString(taskAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsTaskActionGetValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nonnull String taskAction, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(Async)");
        }

        // verify the required parameter 'taskAction' is set
        if (taskAction == null) {
            throw new ApiException("Missing the required parameter 'taskAction' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdActionsTaskActionGetCall(taskId, taskAction, loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Workflow Task Action Details
     * 
     * @param taskId The task id field value. (required)
     * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(@javax.annotation.Nonnull String taskId, @javax.annotation.Nonnull String taskAction, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdActionsTaskActionGetWithHttpInfo(taskId, taskAction, loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Workflow Task Action Details
     * 
     * @param taskId The task id field value. (required)
     * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdActionsTaskActionGetWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nonnull String taskAction, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsTaskActionGetValidateBeforeCall(taskId, taskAction, loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Workflow Task Action Details (asynchronously)
     * 
     * @param taskId The task id field value. (required)
     * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsTaskActionGetAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nonnull String taskAction, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsTaskActionGetValidateBeforeCall(taskId, taskAction, loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/undoaccept"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Undo Workflow Task Acceptance
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Undo Workflow Task Acceptance
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Undo Workflow Task Acceptance (asynchronously)
     * 
     * @param taskId The task id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost
     * @param taskId The id of the task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/updateduedate"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Workflow Task Due Date
     * 
     * @param taskId The id of the task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Workflow Task Due Date
     * 
     * @param taskId The id of the task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Workflow Task Due Date (asynchronously)
     * 
     * @param taskId The id of the task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostValidateBeforeCall(taskId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsTasksTaskIdGet
     * @param taskId The task id field value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdGetCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/tasks/{task_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsTasksTaskIdGetValidateBeforeCall(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdGet(Async)");
        }

        return objectsObjectworkflowsTasksTaskIdGetCall(taskId, loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Workflow Task Details
     * 
     * @param taskId The task id field value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsTasksTaskIdGet(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsTasksTaskIdGetWithHttpInfo(taskId, loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Workflow Task Details
     * 
     * @param taskId The task id field value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsTasksTaskIdGetWithHttpInfo(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdGetValidateBeforeCall(taskId, loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Workflow Task Details (asynchronously)
     * 
     * @param taskId The task id field value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsTasksTaskIdGetAsync(@javax.annotation.Nonnull String taskId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsTasksTaskIdGetValidateBeforeCall(taskId, loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsWorkflowIdActionsGet
     * @param workflowId The workflow id field value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsWorkflowIdActionsGetCall(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/{workflow_id}/actions"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsWorkflowIdActionsGetValidateBeforeCall(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsGet(Async)");
        }

        return objectsObjectworkflowsWorkflowIdActionsGetCall(workflowId, loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Workflow Actions
     * 
     * @param workflowId The workflow id field value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsWorkflowIdActionsGet(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsWorkflowIdActionsGetWithHttpInfo(workflowId, loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Workflow Actions
     * 
     * @param workflowId The workflow id field value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsWorkflowIdActionsGetWithHttpInfo(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsWorkflowIdActionsGetValidateBeforeCall(workflowId, loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Workflow Actions (asynchronously)
     * 
     * @param workflowId The workflow id field value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsWorkflowIdActionsGetAsync(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nullable String loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsWorkflowIdActionsGetValidateBeforeCall(workflowId, loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet
     * @param workflowId The workflow id field value. (required)
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetCall(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nonnull String workflowAction, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/{workflow_id}/actions/{workflow_action}"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()))
            .replace("{" + "workflow_action" + "}", localVarApiClient.escapeString(workflowAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetValidateBeforeCall(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nonnull String workflowAction, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(Async)");
        }

        // verify the required parameter 'workflowAction' is set
        if (workflowAction == null) {
            throw new ApiException("Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(Async)");
        }

        return objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetCall(workflowId, workflowAction, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Workflow Action Details
     * 
     * @param workflowId The workflow id field value. (required)
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nonnull String workflowAction, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetWithHttpInfo(workflowId, workflowAction, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Workflow Action Details
     * 
     * @param workflowId The workflow id field value. (required)
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetWithHttpInfo(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nonnull String workflowAction, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetValidateBeforeCall(workflowId, workflowAction, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Workflow Action Details (asynchronously)
     * 
     * @param workflowId The workflow id field value. (required)
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetAsync(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nonnull String workflowAction, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetValidateBeforeCall(workflowId, workflowAction, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost
     * @param workflowId The workflow id field value. (required)
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions. (required)
     * @param documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostCall(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nonnull String workflowAction, @javax.annotation.Nullable String documentsSys, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/{workflow_id}/actions/{workflow_action}"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()))
            .replace("{" + "workflow_action" + "}", localVarApiClient.escapeString(workflowAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (documentsSys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documents__sys", documentsSys));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostValidateBeforeCall(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nonnull String workflowAction, @javax.annotation.Nullable String documentsSys, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(Async)");
        }

        // verify the required parameter 'workflowAction' is set
        if (workflowAction == null) {
            throw new ApiException("Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(Async)");
        }

        return objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostCall(workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Initiate Workflow Action
     * 
     * @param workflowId The workflow id field value. (required)
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions. (required)
     * @param documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nonnull String workflowAction, @javax.annotation.Nullable String documentsSys, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostWithHttpInfo(workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Initiate Workflow Action
     * 
     * @param workflowId The workflow id field value. (required)
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions. (required)
     * @param documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostWithHttpInfo(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nonnull String workflowAction, @javax.annotation.Nullable String documentsSys, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostValidateBeforeCall(workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate Workflow Action (asynchronously)
     * 
     * @param workflowId The workflow id field value. (required)
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions. (required)
     * @param documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids. (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostAsync(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nonnull String workflowAction, @javax.annotation.Nullable String documentsSys, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostValidateBeforeCall(workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsObjectworkflowsWorkflowIdGet
     * @param workflowId The workflow id field value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsWorkflowIdGetCall(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/objectworkflows/{workflow_id}"
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsObjectworkflowsWorkflowIdGetValidateBeforeCall(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdGet(Async)");
        }

        return objectsObjectworkflowsWorkflowIdGetCall(workflowId, loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Workflow Details
     * 
     * @param workflowId The workflow id field value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsObjectworkflowsWorkflowIdGet(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsObjectworkflowsWorkflowIdGetWithHttpInfo(workflowId, loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Workflow Details
     * 
     * @param workflowId The workflow id field value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsObjectworkflowsWorkflowIdGetWithHttpInfo(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsObjectworkflowsWorkflowIdGetValidateBeforeCall(workflowId, loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Workflow Details (asynchronously)
     * 
     * @param workflowId The workflow id field value. (required)
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsObjectworkflowsWorkflowIdGetAsync(@javax.annotation.Nonnull String workflowId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsObjectworkflowsWorkflowIdGetValidateBeforeCall(workflowId, loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsPicklistsGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsPicklistsGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/picklists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsPicklistsGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsPicklistsGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Picklists
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsPicklistsGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsPicklistsGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Picklists
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsPicklistsGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsPicklistsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Picklists (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsPicklistsGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsPicklistsGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsPicklistsPicklistNameGet
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsPicklistsPicklistNameGetCall(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/picklists/{picklist_name}"
            .replace("{" + "picklist_name" + "}", localVarApiClient.escapeString(picklistName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsPicklistsPicklistNameGetValidateBeforeCall(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'picklistName' is set
        if (picklistName == null) {
            throw new ApiException("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNameGet(Async)");
        }

        return objectsPicklistsPicklistNameGetCall(picklistName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Picklist Values
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsPicklistsPicklistNameGet(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsPicklistsPicklistNameGetWithHttpInfo(picklistName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Picklist Values
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsPicklistsPicklistNameGetWithHttpInfo(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsPicklistsPicklistNameGetValidateBeforeCall(picklistName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Picklist Values (asynchronously)
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsPicklistsPicklistNameGetAsync(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsPicklistsPicklistNameGetValidateBeforeCall(picklistName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsPicklistsPicklistNamePicklistValueNameDelete
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsPicklistsPicklistNamePicklistValueNameDeleteCall(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nonnull String picklistValueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/picklists/{picklist_name}/{picklist_value_name}"
            .replace("{" + "picklist_name" + "}", localVarApiClient.escapeString(picklistName.toString()))
            .replace("{" + "picklist_value_name" + "}", localVarApiClient.escapeString(picklistValueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsPicklistsPicklistNamePicklistValueNameDeleteValidateBeforeCall(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nonnull String picklistValueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'picklistName' is set
        if (picklistName == null) {
            throw new ApiException("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete(Async)");
        }

        // verify the required parameter 'picklistValueName' is set
        if (picklistValueName == null) {
            throw new ApiException("Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete(Async)");
        }

        return objectsPicklistsPicklistNamePicklistValueNameDeleteCall(picklistName, picklistValueName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Inactivate Picklist Value
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsPicklistsPicklistNamePicklistValueNameDelete(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nonnull String picklistValueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsPicklistsPicklistNamePicklistValueNameDeleteWithHttpInfo(picklistName, picklistValueName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Inactivate Picklist Value
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsPicklistsPicklistNamePicklistValueNameDeleteWithHttpInfo(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nonnull String picklistValueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsPicklistsPicklistNamePicklistValueNameDeleteValidateBeforeCall(picklistName, picklistValueName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Inactivate Picklist Value (asynchronously)
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsPicklistsPicklistNamePicklistValueNameDeleteAsync(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nonnull String picklistValueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsPicklistsPicklistNamePicklistValueNameDeleteValidateBeforeCall(picklistName, picklistValueName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsPicklistsPicklistNamePicklistValueNamePut
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsPicklistsPicklistNamePicklistValueNamePutCall(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nonnull String picklistValueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/picklists/{picklist_name}/{picklist_value_name}"
            .replace("{" + "picklist_name" + "}", localVarApiClient.escapeString(picklistName.toString()))
            .replace("{" + "picklist_value_name" + "}", localVarApiClient.escapeString(picklistValueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsPicklistsPicklistNamePicklistValueNamePutValidateBeforeCall(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nonnull String picklistValueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'picklistName' is set
        if (picklistName == null) {
            throw new ApiException("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNamePut(Async)");
        }

        // verify the required parameter 'picklistValueName' is set
        if (picklistValueName == null) {
            throw new ApiException("Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNamePut(Async)");
        }

        return objectsPicklistsPicklistNamePicklistValueNamePutCall(picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Picklist Value
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsPicklistsPicklistNamePicklistValueNamePut(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nonnull String picklistValueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsPicklistsPicklistNamePicklistValueNamePutWithHttpInfo(picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Picklist Value
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsPicklistsPicklistNamePicklistValueNamePutWithHttpInfo(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nonnull String picklistValueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsPicklistsPicklistNamePicklistValueNamePutValidateBeforeCall(picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Picklist Value (asynchronously)
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsPicklistsPicklistNamePicklistValueNamePutAsync(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nonnull String picklistValueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsPicklistsPicklistNamePicklistValueNamePutValidateBeforeCall(picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsPicklistsPicklistNamePost
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsPicklistsPicklistNamePostCall(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/picklists/{picklist_name}"
            .replace("{" + "picklist_name" + "}", localVarApiClient.escapeString(picklistName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsPicklistsPicklistNamePostValidateBeforeCall(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'picklistName' is set
        if (picklistName == null) {
            throw new ApiException("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePost(Async)");
        }

        return objectsPicklistsPicklistNamePostCall(picklistName, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Picklist Values
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsPicklistsPicklistNamePost(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsPicklistsPicklistNamePostWithHttpInfo(picklistName, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Picklist Values
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsPicklistsPicklistNamePostWithHttpInfo(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsPicklistsPicklistNamePostValidateBeforeCall(picklistName, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Picklist Values (asynchronously)
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsPicklistsPicklistNamePostAsync(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsPicklistsPicklistNamePostValidateBeforeCall(picklistName, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsPicklistsPicklistNamePut
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsPicklistsPicklistNamePutCall(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/picklists/{picklist_name}"
            .replace("{" + "picklist_name" + "}", localVarApiClient.escapeString(picklistName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsPicklistsPicklistNamePutValidateBeforeCall(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'picklistName' is set
        if (picklistName == null) {
            throw new ApiException("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePut(Async)");
        }

        return objectsPicklistsPicklistNamePutCall(picklistName, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Picklist Value Label
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsPicklistsPicklistNamePut(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsPicklistsPicklistNamePutWithHttpInfo(picklistName, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Picklist Value Label
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsPicklistsPicklistNamePutWithHttpInfo(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsPicklistsPicklistNamePutValidateBeforeCall(picklistName, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Picklist Value Label (asynchronously)
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.) (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsPicklistsPicklistNamePutAsync(@javax.annotation.Nonnull String picklistName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsPicklistsPicklistNamePutValidateBeforeCall(picklistName, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxActionsBuildproductionPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxActionsBuildproductionPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/actions/buildproduction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxActionsBuildproductionPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsSandboxActionsBuildproductionPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Build Production Vault
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxActionsBuildproductionPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxActionsBuildproductionPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Build Production Vault
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxActionsBuildproductionPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxActionsBuildproductionPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Build Production Vault (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxActionsBuildproductionPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxActionsBuildproductionPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxActionsPromoteproductionPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxActionsPromoteproductionPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/actions/promoteproduction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxActionsPromoteproductionPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsSandboxActionsPromoteproductionPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Promote to Production
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxActionsPromoteproductionPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxActionsPromoteproductionPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Promote to Production
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxActionsPromoteproductionPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxActionsPromoteproductionPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Promote to Production (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxActionsPromoteproductionPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxActionsPromoteproductionPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxActionsRecheckusagePost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxActionsRecheckusagePostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/actions/recheckusage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxActionsRecheckusagePostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsSandboxActionsRecheckusagePostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Recheck Sandbox Usage Limit
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxActionsRecheckusagePost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxActionsRecheckusagePostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Recheck Sandbox Usage Limit
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxActionsRecheckusagePostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxActionsRecheckusagePostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Recheck Sandbox Usage Limit (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxActionsRecheckusagePostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxActionsRecheckusagePostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxBatchChangesizePost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxBatchChangesizePostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/batch/changesize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxBatchChangesizePostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsSandboxBatchChangesizePostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Change Sandbox Size
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxBatchChangesizePost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxBatchChangesizePostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Change Sandbox Size
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxBatchChangesizePostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxBatchChangesizePostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change Sandbox Size (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxBatchChangesizePostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxBatchChangesizePostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxEntitlementsSetPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxEntitlementsSetPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/entitlements/set";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxEntitlementsSetPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsSandboxEntitlementsSetPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Set Sandbox Entitlements
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxEntitlementsSetPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxEntitlementsSetPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Set Sandbox Entitlements
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxEntitlementsSetPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxEntitlementsSetPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set Sandbox Entitlements (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxEntitlementsSetPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxEntitlementsSetPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsSandboxGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Sandboxes
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Sandboxes
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Sandboxes (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxNameDelete
     * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxNameDeleteCall(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxNameDeleteValidateBeforeCall(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling objectsSandboxNameDelete(Async)");
        }

        return objectsSandboxNameDeleteCall(name, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Sandbox
     * 
     * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxNameDelete(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxNameDeleteWithHttpInfo(name, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Sandbox
     * 
     * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxNameDeleteWithHttpInfo(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxNameDeleteValidateBeforeCall(name, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Sandbox (asynchronously)
     * 
     * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxNameDeleteAsync(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxNameDeleteValidateBeforeCall(name, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsSandboxPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create or Refresh Sandbox
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create or Refresh Sandbox
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or Refresh Sandbox (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxSnapshotApiNameActionsUpdatePost
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxSnapshotApiNameActionsUpdatePostCall(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/snapshot/{api_name}/actions/update"
            .replace("{" + "api_name" + "}", localVarApiClient.escapeString(apiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxSnapshotApiNameActionsUpdatePostValidateBeforeCall(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiName' is set
        if (apiName == null) {
            throw new ApiException("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpdatePost(Async)");
        }

        return objectsSandboxSnapshotApiNameActionsUpdatePostCall(apiName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Update Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxSnapshotApiNameActionsUpdatePost(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxSnapshotApiNameActionsUpdatePostWithHttpInfo(apiName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Update Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxSnapshotApiNameActionsUpdatePostWithHttpInfo(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxSnapshotApiNameActionsUpdatePostValidateBeforeCall(apiName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Sandbox Snapshot (asynchronously)
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxSnapshotApiNameActionsUpdatePostAsync(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxSnapshotApiNameActionsUpdatePostValidateBeforeCall(apiName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxSnapshotApiNameActionsUpgradePost
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxSnapshotApiNameActionsUpgradePostCall(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/snapshot/{api_name}/actions/upgrade"
            .replace("{" + "api_name" + "}", localVarApiClient.escapeString(apiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxSnapshotApiNameActionsUpgradePostValidateBeforeCall(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiName' is set
        if (apiName == null) {
            throw new ApiException("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpgradePost(Async)");
        }

        return objectsSandboxSnapshotApiNameActionsUpgradePostCall(apiName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Upgrade Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxSnapshotApiNameActionsUpgradePost(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxSnapshotApiNameActionsUpgradePostWithHttpInfo(apiName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Upgrade Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxSnapshotApiNameActionsUpgradePostWithHttpInfo(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxSnapshotApiNameActionsUpgradePostValidateBeforeCall(apiName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upgrade Sandbox Snapshot (asynchronously)
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxSnapshotApiNameActionsUpgradePostAsync(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxSnapshotApiNameActionsUpgradePostValidateBeforeCall(apiName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxSnapshotApiNameDelete
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxSnapshotApiNameDeleteCall(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/snapshot/{api_name}"
            .replace("{" + "api_name" + "}", localVarApiClient.escapeString(apiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxSnapshotApiNameDeleteValidateBeforeCall(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiName' is set
        if (apiName == null) {
            throw new ApiException("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameDelete(Async)");
        }

        return objectsSandboxSnapshotApiNameDeleteCall(apiName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxSnapshotApiNameDelete(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxSnapshotApiNameDeleteWithHttpInfo(apiName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxSnapshotApiNameDeleteWithHttpInfo(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxSnapshotApiNameDeleteValidateBeforeCall(apiName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Sandbox Snapshot (asynchronously)
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxSnapshotApiNameDeleteAsync(@javax.annotation.Nonnull String apiName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxSnapshotApiNameDeleteValidateBeforeCall(apiName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxSnapshotGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxSnapshotGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxSnapshotGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsSandboxSnapshotGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Sandbox Snapshots
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxSnapshotGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxSnapshotGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Sandbox Snapshots
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxSnapshotGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxSnapshotGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Sandbox Snapshots (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxSnapshotGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxSnapshotGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxSnapshotPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxSnapshotPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxSnapshotPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsSandboxSnapshotPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Sandbox Snapshot
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxSnapshotPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxSnapshotPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Sandbox Snapshot
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxSnapshotPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxSnapshotPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Sandbox Snapshot (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxSnapshotPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxSnapshotPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxVaultIdActionsRefreshPost
     * @param vaultId The Vault ID of the sandbox to be refreshed. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxVaultIdActionsRefreshPostCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/{vault_id}/actions/refresh"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxVaultIdActionsRefreshPostValidateBeforeCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdActionsRefreshPost(Async)");
        }

        return objectsSandboxVaultIdActionsRefreshPostCall(vaultId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Refresh Sandbox from Snapshot
     * 
     * @param vaultId The Vault ID of the sandbox to be refreshed. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxVaultIdActionsRefreshPost(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxVaultIdActionsRefreshPostWithHttpInfo(vaultId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Refresh Sandbox from Snapshot
     * 
     * @param vaultId The Vault ID of the sandbox to be refreshed. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxVaultIdActionsRefreshPostWithHttpInfo(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxVaultIdActionsRefreshPostValidateBeforeCall(vaultId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Refresh Sandbox from Snapshot (asynchronously)
     * 
     * @param vaultId The Vault ID of the sandbox to be refreshed. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxVaultIdActionsRefreshPostAsync(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxVaultIdActionsRefreshPostValidateBeforeCall(vaultId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSandboxVaultIdGet
     * @param vaultId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxVaultIdGetCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/sandbox/{vault_id}"
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSandboxVaultIdGetValidateBeforeCall(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdGet(Async)");
        }

        return objectsSandboxVaultIdGetCall(vaultId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Sandbox Details by ID
     * 
     * @param vaultId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSandboxVaultIdGet(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSandboxVaultIdGetWithHttpInfo(vaultId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Sandbox Details by ID
     * 
     * @param vaultId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSandboxVaultIdGetWithHttpInfo(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSandboxVaultIdGetValidateBeforeCall(vaultId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Sandbox Details by ID (asynchronously)
     * 
     * @param vaultId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSandboxVaultIdGetAsync(@javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSandboxVaultIdGetValidateBeforeCall(vaultId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSecuritypoliciesGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSecuritypoliciesGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/securitypolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSecuritypoliciesGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsSecuritypoliciesGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Security Policies
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSecuritypoliciesGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSecuritypoliciesGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Security Policies
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSecuritypoliciesGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSecuritypoliciesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Security Policies (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSecuritypoliciesGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSecuritypoliciesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsSecuritypoliciesSecurityPolicyNameGet
     * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSecuritypoliciesSecurityPolicyNameGetCall(@javax.annotation.Nonnull String securityPolicyName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/securitypolicies/{security_policy_name}"
            .replace("{" + "security_policy_name" + "}", localVarApiClient.escapeString(securityPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsSecuritypoliciesSecurityPolicyNameGetValidateBeforeCall(@javax.annotation.Nonnull String securityPolicyName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'securityPolicyName' is set
        if (securityPolicyName == null) {
            throw new ApiException("Missing the required parameter 'securityPolicyName' when calling objectsSecuritypoliciesSecurityPolicyNameGet(Async)");
        }

        return objectsSecuritypoliciesSecurityPolicyNameGetCall(securityPolicyName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Security Policy
     * 
     * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsSecuritypoliciesSecurityPolicyNameGet(@javax.annotation.Nonnull String securityPolicyName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsSecuritypoliciesSecurityPolicyNameGetWithHttpInfo(securityPolicyName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Security Policy
     * 
     * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsSecuritypoliciesSecurityPolicyNameGetWithHttpInfo(@javax.annotation.Nonnull String securityPolicyName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsSecuritypoliciesSecurityPolicyNameGetValidateBeforeCall(securityPolicyName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Security Policy (asynchronously)
     * 
     * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsSecuritypoliciesSecurityPolicyNameGetAsync(@javax.annotation.Nonnull String securityPolicyName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsSecuritypoliciesSecurityPolicyNameGetValidateBeforeCall(securityPolicyName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsUsersGet
     * @param vaults Retrieve all users assigned to all Vaults in your domain. (optional)
     * @param excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersGetCall(@javax.annotation.Nullable String vaults, @javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/users/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vaults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vaults", vaults));
        }

        if (excludeVaultMembership != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_vault_membership", excludeVaultMembership));
        }

        if (excludeAppLicensing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_app_licensing", excludeAppLicensing));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsUsersGetValidateBeforeCall(@javax.annotation.Nullable String vaults, @javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsUsersGetCall(vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Users
     * 
     * @param vaults Retrieve all users assigned to all Vaults in your domain. (optional)
     * @param excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsUsersGet(@javax.annotation.Nullable String vaults, @javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsUsersGetWithHttpInfo(vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Users
     * 
     * @param vaults Retrieve all users assigned to all Vaults in your domain. (optional)
     * @param excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsUsersGetWithHttpInfo(@javax.annotation.Nullable String vaults, @javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsUsersGetValidateBeforeCall(vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Users (asynchronously)
     * 
     * @param vaults Retrieve all users assigned to all Vaults in your domain. (optional)
     * @param excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersGetAsync(@javax.annotation.Nullable String vaults, @javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsUsersGetValidateBeforeCall(vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsUsersIdGet
     * @param id The user id field value. Use the value me to get information for the currently authenticated user. (required)
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersIdGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludeVaultMembership != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_vault_membership", excludeVaultMembership));
        }

        if (excludeAppLicensing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_app_licensing", excludeAppLicensing));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsUsersIdGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsUsersIdGet(Async)");
        }

        return objectsUsersIdGetCall(id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve User
     * 
     * @param id The user id field value. Use the value me to get information for the currently authenticated user. (required)
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsUsersIdGet(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsUsersIdGetWithHttpInfo(id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve User
     * 
     * @param id The user id field value. Use the value me to get information for the currently authenticated user. (required)
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsUsersIdGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsUsersIdGetValidateBeforeCall(id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve User (asynchronously)
     * 
     * @param id The user id field value. Use the value me to get information for the currently authenticated user. (required)
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersIdGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsUsersIdGetValidateBeforeCall(id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsUsersIdPermissionsGet
     * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user. (required)
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersIdPermissionsGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/users/{id}/permissions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsUsersIdPermissionsGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsUsersIdPermissionsGet(Async)");
        }

        return objectsUsersIdPermissionsGetCall(id, filter, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve User Permissions
     * 
     * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user. (required)
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsUsersIdPermissionsGet(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsUsersIdPermissionsGetWithHttpInfo(id, filter, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve User Permissions
     * 
     * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user. (required)
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsUsersIdPermissionsGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsUsersIdPermissionsGetValidateBeforeCall(id, filter, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve User Permissions (asynchronously)
     * 
     * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user. (required)
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersIdPermissionsGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsUsersIdPermissionsGetValidateBeforeCall(id, filter, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsUsersIdPut
     * @param id The user id field value. Use the value me to get information for the currently authenticated user. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersIdPutCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsUsersIdPutValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling objectsUsersIdPut(Async)");
        }

        return objectsUsersIdPutCall(id, authorization, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Single User
     * 
     * @param id The user id field value. Use the value me to get information for the currently authenticated user. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsUsersIdPut(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsUsersIdPutWithHttpInfo(id, authorization, contentType, xVaultAPIClientID);
    }

    /**
     * Update Single User
     * 
     * @param id The user id field value. Use the value me to get information for the currently authenticated user. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsUsersIdPutWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsUsersIdPutValidateBeforeCall(id, authorization, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Single User (asynchronously)
     * 
     * @param id The user id field value. Use the value me to get information for the currently authenticated user. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersIdPutAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsUsersIdPutValidateBeforeCall(id, authorization, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsUsersMeGet
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersMeGetCall(@javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludeVaultMembership != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_vault_membership", excludeVaultMembership));
        }

        if (excludeAppLicensing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_app_licensing", excludeAppLicensing));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsUsersMeGetValidateBeforeCall(@javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsUsersMeGetCall(excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Validate Session User
     * 
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsUsersMeGet(@javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsUsersMeGetWithHttpInfo(excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Validate Session User
     * 
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsUsersMeGetWithHttpInfo(@javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsUsersMeGetValidateBeforeCall(excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate Session User (asynchronously)
     * 
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersMeGetAsync(@javax.annotation.Nullable String excludeVaultMembership, @javax.annotation.Nullable String excludeAppLicensing, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsUsersMeGetValidateBeforeCall(excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsUsersMePasswordPost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersMePasswordPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/users/me/password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsUsersMePasswordPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsUsersMePasswordPostCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Change My Password
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsUsersMePasswordPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsUsersMePasswordPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Change My Password
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsUsersMePasswordPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsUsersMePasswordPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change My Password (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersMePasswordPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsUsersMePasswordPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsUsersMePermissionsGet
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersMePermissionsGetCall(@javax.annotation.Nullable String filter, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/users/me/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsUsersMePermissionsGetValidateBeforeCall(@javax.annotation.Nullable String filter, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsUsersMePermissionsGetCall(filter, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve My User Permissions
     * 
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsUsersMePermissionsGet(@javax.annotation.Nullable String filter, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsUsersMePermissionsGetWithHttpInfo(filter, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve My User Permissions
     * 
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsUsersMePermissionsGetWithHttpInfo(@javax.annotation.Nullable String filter, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsUsersMePermissionsGetValidateBeforeCall(filter, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve My User Permissions (asynchronously)
     * 
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersMePermissionsGetAsync(@javax.annotation.Nullable String filter, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsUsersMePermissionsGetValidateBeforeCall(filter, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsUsersMePut
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersMePutCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsUsersMePutValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsUsersMePutCall(authorization, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update My User
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsUsersMePut(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsUsersMePutWithHttpInfo(authorization, contentType, xVaultAPIClientID);
    }

    /**
     * Update My User
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsUsersMePutWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsUsersMePutValidateBeforeCall(authorization, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update My User (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersMePutAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsUsersMePutValidateBeforeCall(authorization, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsUsersPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsUsersPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsUsersPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Single User
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsUsersPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsUsersPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Single User
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsUsersPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsUsersPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Single User (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsUsersPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsUsersPut
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersPutCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsUsersPutValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsUsersPutCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Update Multiple Users
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsUsersPut(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsUsersPutWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Update Multiple Users
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsUsersPutWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsUsersPutValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Multiple Users (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersPutAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsUsersPutValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsUsersUserIdDelete
     * @param userId The user id field value.  (required)
     * @param domain When true, this disables the user account in all vaults in the domain. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersUserIdDeleteCall(@javax.annotation.Nonnull String userId, @javax.annotation.Nullable Boolean domain, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsUsersUserIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String userId, @javax.annotation.Nullable Boolean domain, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling objectsUsersUserIdDelete(Async)");
        }

        return objectsUsersUserIdDeleteCall(userId, domain, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Disable User
     * 
     * @param userId The user id field value.  (required)
     * @param domain When true, this disables the user account in all vaults in the domain. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsUsersUserIdDelete(@javax.annotation.Nonnull String userId, @javax.annotation.Nullable Boolean domain, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsUsersUserIdDeleteWithHttpInfo(userId, domain, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Disable User
     * 
     * @param userId The user id field value.  (required)
     * @param domain When true, this disables the user account in all vaults in the domain. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsUsersUserIdDeleteWithHttpInfo(@javax.annotation.Nonnull String userId, @javax.annotation.Nullable Boolean domain, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsUsersUserIdDeleteValidateBeforeCall(userId, domain, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable User (asynchronously)
     * 
     * @param userId The user id field value.  (required)
     * @param domain When true, this disables the user account in all vaults in the domain. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersUserIdDeleteAsync(@javax.annotation.Nonnull String userId, @javax.annotation.Nullable Boolean domain, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsUsersUserIdDeleteValidateBeforeCall(userId, domain, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsUsersUserIdVaultMembershipVaultIdPut
     * @param userId The user id field value. (required)
     * @param vaultId The system-managed id field value assigned to each vault in the domain. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersUserIdVaultMembershipVaultIdPutCall(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/users/{user_id}/vault_membership/{vault_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "vault_id" + "}", localVarApiClient.escapeString(vaultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsUsersUserIdVaultMembershipVaultIdPutValidateBeforeCall(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling objectsUsersUserIdVaultMembershipVaultIdPut(Async)");
        }

        // verify the required parameter 'vaultId' is set
        if (vaultId == null) {
            throw new ApiException("Missing the required parameter 'vaultId' when calling objectsUsersUserIdVaultMembershipVaultIdPut(Async)");
        }

        return objectsUsersUserIdVaultMembershipVaultIdPutCall(userId, vaultId, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Update Vault Membership
     * 
     * @param userId The user id field value. (required)
     * @param vaultId The system-managed id field value assigned to each vault in the domain. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsUsersUserIdVaultMembershipVaultIdPut(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsUsersUserIdVaultMembershipVaultIdPutWithHttpInfo(userId, vaultId, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Update Vault Membership
     * 
     * @param userId The user id field value. (required)
     * @param vaultId The system-managed id field value assigned to each vault in the domain. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsUsersUserIdVaultMembershipVaultIdPutWithHttpInfo(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsUsersUserIdVaultMembershipVaultIdPutValidateBeforeCall(userId, vaultId, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Vault Membership (asynchronously)
     * 
     * @param userId The user id field value. (required)
     * @param vaultId The system-managed id field value assigned to each vault in the domain. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsUsersUserIdVaultMembershipVaultIdPutAsync(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull String vaultId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsUsersUserIdVaultMembershipVaultIdPutValidateBeforeCall(userId, vaultId, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsVaultActionsComparePost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsVaultActionsComparePostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/vault/actions/compare";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsVaultActionsComparePostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsVaultActionsComparePostCall(authorization, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Vault Compare
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsVaultActionsComparePost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsVaultActionsComparePostWithHttpInfo(authorization, contentType, xVaultAPIClientID);
    }

    /**
     * Vault Compare
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsVaultActionsComparePostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsVaultActionsComparePostValidateBeforeCall(authorization, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Vault Compare (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsVaultActionsComparePostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsVaultActionsComparePostValidateBeforeCall(authorization, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for objectsVaultActionsConfigreportPost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsVaultActionsConfigreportPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objects/vault/actions/configreport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call objectsVaultActionsConfigreportPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return objectsVaultActionsConfigreportPostCall(authorization, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Vault Configuration Report
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void objectsVaultActionsConfigreportPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        objectsVaultActionsConfigreportPostWithHttpInfo(authorization, contentType, xVaultAPIClientID);
    }

    /**
     * Vault Configuration Report
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> objectsVaultActionsConfigreportPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = objectsVaultActionsConfigreportPostValidateBeforeCall(authorization, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Vault Configuration Report (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call objectsVaultActionsConfigreportPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = objectsVaultActionsConfigreportPostValidateBeforeCall(authorization, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryComponentsPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryComponentsPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/query/components";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryComponentsPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return queryComponentsPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Component Definition Query
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void queryComponentsPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        queryComponentsPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Component Definition Query
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> queryComponentsPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = queryComponentsPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Component Definition Query (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryComponentsPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryComponentsPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryNextPagePost
     * @param nextPage  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryNextPagePostCall(@javax.annotation.Nonnull String nextPage, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/query/{next_page}"
            .replace("{" + "next_page" + "}", localVarApiClient.escapeString(nextPage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIDescribeQuery != null) {
            localVarHeaderParams.put("X-VaultAPI-DescribeQuery", localVarApiClient.parameterToString(xVaultAPIDescribeQuery));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryNextPagePostValidateBeforeCall(@javax.annotation.Nonnull String nextPage, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nextPage' is set
        if (nextPage == null) {
            throw new ApiException("Missing the required parameter 'nextPage' when calling queryNextPagePost(Async)");
        }

        return queryNextPagePostCall(nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Next Page URL
     * 
     * @param nextPage  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void queryNextPagePost(@javax.annotation.Nonnull String nextPage, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        queryNextPagePostWithHttpInfo(nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID);
    }

    /**
     * Next Page URL
     * 
     * @param nextPage  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> queryNextPagePostWithHttpInfo(@javax.annotation.Nonnull String nextPage, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = queryNextPagePostValidateBeforeCall(nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Next Page URL (asynchronously)
     * 
     * @param nextPage  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryNextPagePostAsync(@javax.annotation.Nonnull String nextPage, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryNextPagePostValidateBeforeCall(nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIDescribeQuery != null) {
            localVarHeaderParams.put("X-VaultAPI-DescribeQuery", localVarApiClient.parameterToString(xVaultAPIDescribeQuery));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return queryPostCall(authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Submitting a Query
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void queryPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        queryPostWithHttpInfo(authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID);
    }

    /**
     * Submitting a Query
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> queryPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = queryPostValidateBeforeCall(authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Submitting a Query (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryPostValidateBeforeCall(authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryPreviousPagePost
     * @param previousPage  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryPreviousPagePostCall(@javax.annotation.Nonnull String previousPage, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/query/{previous_page}"
            .replace("{" + "previous_page" + "}", localVarApiClient.escapeString(previousPage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIDescribeQuery != null) {
            localVarHeaderParams.put("X-VaultAPI-DescribeQuery", localVarApiClient.parameterToString(xVaultAPIDescribeQuery));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryPreviousPagePostValidateBeforeCall(@javax.annotation.Nonnull String previousPage, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'previousPage' is set
        if (previousPage == null) {
            throw new ApiException("Missing the required parameter 'previousPage' when calling queryPreviousPagePost(Async)");
        }

        return queryPreviousPagePostCall(previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Previous Page URL
     * 
     * @param previousPage  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void queryPreviousPagePost(@javax.annotation.Nonnull String previousPage, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        queryPreviousPagePostWithHttpInfo(previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID);
    }

    /**
     * Previous Page URL
     * 
     * @param previousPage  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> queryPreviousPagePostWithHttpInfo(@javax.annotation.Nonnull String previousPage, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = queryPreviousPagePostValidateBeforeCall(previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Previous Page URL (asynchronously)
     * 
     * @param previousPage  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIDescribeQuery  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryPreviousPagePostAsync(@javax.annotation.Nonnull String previousPage, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIDescribeQuery, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryPreviousPagePostValidateBeforeCall(previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2MeGet
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2MeGetCall(@javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/Me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributes", attributes));
        }

        if (excludedAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedAttributes", excludedAttributes));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2MeGetValidateBeforeCall(@javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return scimV2MeGetCall(attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Current User with SCIM
     * 
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2MeGet(@javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2MeGetWithHttpInfo(attributes, excludedAttributes, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Current User with SCIM
     * 
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2MeGetWithHttpInfo(@javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2MeGetValidateBeforeCall(attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Current User with SCIM (asynchronously)
     * 
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2MeGetAsync(@javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2MeGetValidateBeforeCall(attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2MePut
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2MePutCall(@javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/Me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributes", attributes));
        }

        if (excludedAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedAttributes", excludedAttributes));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2MePutValidateBeforeCall(@javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return scimV2MePutCall(attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Current User with SCIM
     * 
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2MePut(@javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2MePutWithHttpInfo(attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Current User with SCIM
     * 
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2MePutWithHttpInfo(@javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2MePutValidateBeforeCall(attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Current User with SCIM (asynchronously)
     * 
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2MePutAsync(@javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2MePutValidateBeforeCall(attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2ResourceTypesGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2ResourceTypesGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/ResourceTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2ResourceTypesGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return scimV2ResourceTypesGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All SCIM Resource Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2ResourceTypesGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2ResourceTypesGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All SCIM Resource Types
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2ResourceTypesGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2ResourceTypesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All SCIM Resource Types (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2ResourceTypesGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2ResourceTypesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2ResourceTypesTypeGet
     * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2ResourceTypesTypeGetCall(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/ResourceTypes/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2ResourceTypesTypeGetValidateBeforeCall(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling scimV2ResourceTypesTypeGet(Async)");
        }

        return scimV2ResourceTypesTypeGetCall(type, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Single SCIM Resource Type
     * 
     * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2ResourceTypesTypeGet(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2ResourceTypesTypeGetWithHttpInfo(type, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Single SCIM Resource Type
     * 
     * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2ResourceTypesTypeGetWithHttpInfo(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2ResourceTypesTypeGetValidateBeforeCall(type, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Single SCIM Resource Type (asynchronously)
     * 
     * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2ResourceTypesTypeGetAsync(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2ResourceTypesTypeGetValidateBeforeCall(type, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2SchemasGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2SchemasGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/Schemas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2SchemasGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return scimV2SchemasGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All SCIM Schema Information
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2SchemasGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2SchemasGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All SCIM Schema Information
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2SchemasGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2SchemasGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All SCIM Schema Information (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2SchemasGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2SchemasGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2SchemasIdGet
     * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2SchemasIdGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/Schemas/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2SchemasIdGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scimV2SchemasIdGet(Async)");
        }

        return scimV2SchemasIdGetCall(id, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Single SCIM Schema Information
     * 
     * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2SchemasIdGet(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2SchemasIdGetWithHttpInfo(id, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Single SCIM Schema Information
     * 
     * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2SchemasIdGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2SchemasIdGetValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Single SCIM Schema Information (asynchronously)
     * 
     * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2SchemasIdGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2SchemasIdGetValidateBeforeCall(id, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2ServiceProviderConfigGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2ServiceProviderConfigGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/ServiceProviderConfig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2ServiceProviderConfigGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return scimV2ServiceProviderConfigGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve SCIM Provider
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2ServiceProviderConfigGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2ServiceProviderConfigGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve SCIM Provider
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2ServiceProviderConfigGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2ServiceProviderConfigGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve SCIM Provider (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2ServiceProviderConfigGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2ServiceProviderConfigGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2TypeGet
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2TypeGetCall(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String startIndex, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributes", attributes));
        }

        if (excludedAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedAttributes", excludedAttributes));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2TypeGetValidateBeforeCall(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String startIndex, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling scimV2TypeGet(Async)");
        }

        return scimV2TypeGetCall(type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve SCIM Resources
     * 
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2TypeGet(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String startIndex, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2TypeGetWithHttpInfo(type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve SCIM Resources
     * 
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2TypeGetWithHttpInfo(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String startIndex, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2TypeGetValidateBeforeCall(type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve SCIM Resources (asynchronously)
     * 
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2TypeGetAsync(@javax.annotation.Nonnull String type, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String startIndex, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2TypeGetValidateBeforeCall(type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2TypeIdGet
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
     * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v. (required)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2TypeIdGetCall(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/{type}/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributes", attributes));
        }

        if (excludedAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedAttributes", excludedAttributes));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2TypeIdGetValidateBeforeCall(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling scimV2TypeIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scimV2TypeIdGet(Async)");
        }

        return scimV2TypeIdGetCall(type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Single SCIM Resource
     * 
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
     * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v. (required)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2TypeIdGet(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2TypeIdGetWithHttpInfo(type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Single SCIM Resource
     * 
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
     * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v. (required)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2TypeIdGetWithHttpInfo(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2TypeIdGetValidateBeforeCall(type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Single SCIM Resource (asynchronously)
     * 
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. (required)
     * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v. (required)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2TypeIdGetAsync(@javax.annotation.Nonnull String type, @javax.annotation.Nonnull String id, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2TypeIdGetValidateBeforeCall(type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2UsersGet
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending. (optional)
     * @param count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2UsersGetCall(@javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String count, @javax.annotation.Nullable String startIndex, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/Users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributes", attributes));
        }

        if (excludedAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedAttributes", excludedAttributes));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2UsersGetValidateBeforeCall(@javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String count, @javax.annotation.Nullable String startIndex, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return scimV2UsersGetCall(filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Users with SCIM
     * 
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending. (optional)
     * @param count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2UsersGet(@javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String count, @javax.annotation.Nullable String startIndex, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2UsersGetWithHttpInfo(filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Users with SCIM
     * 
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending. (optional)
     * @param count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2UsersGetWithHttpInfo(@javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String count, @javax.annotation.Nullable String startIndex, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2UsersGetValidateBeforeCall(filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Users with SCIM (asynchronously)
     * 
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
     * @param sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending. (optional)
     * @param count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2UsersGetAsync(@javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String count, @javax.annotation.Nullable String startIndex, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2UsersGetValidateBeforeCall(filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2UsersIdGet
     * @param id The id of the user you wish to update. (required)
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2UsersIdGetCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/Users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributes", attributes));
        }

        if (excludedAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludedAttributes", excludedAttributes));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2UsersIdGetValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scimV2UsersIdGet(Async)");
        }

        return scimV2UsersIdGetCall(id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Single User with SCIM
     * 
     * @param id The id of the user you wish to update. (required)
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2UsersIdGet(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2UsersIdGetWithHttpInfo(id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Single User with SCIM
     * 
     * @param id The id of the user you wish to update. (required)
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2UsersIdGetWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2UsersIdGetValidateBeforeCall(id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Single User with SCIM (asynchronously)
     * 
     * @param id The id of the user you wish to update. (required)
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2UsersIdGetAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String attributes, @javax.annotation.Nullable String excludedAttributes, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2UsersIdGetValidateBeforeCall(id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2UsersIdPut
     * @param id The id of the user you wish to update. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2UsersIdPutCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/Users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2UsersIdPutValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scimV2UsersIdPut(Async)");
        }

        return scimV2UsersIdPutCall(id, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update User with SCIM
     * 
     * @param id The id of the user you wish to update. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2UsersIdPut(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2UsersIdPutWithHttpInfo(id, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update User with SCIM
     * 
     * @param id The id of the user you wish to update. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2UsersIdPutWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2UsersIdPutValidateBeforeCall(id, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update User with SCIM (asynchronously)
     * 
     * @param id The id of the user you wish to update. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2UsersIdPutAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2UsersIdPutValidateBeforeCall(id, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scimV2UsersPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2UsersPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim/v2/Users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scimV2UsersPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return scimV2UsersPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create User with SCIM
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void scimV2UsersPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        scimV2UsersPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create User with SCIM
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scimV2UsersPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = scimV2UsersPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create User with SCIM (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scimV2UsersPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scimV2UsersPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesCertificateCertIdGet
     * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCertificateCertIdGetCall(@javax.annotation.Nonnull String certId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/certificate/{cert_id}"
            .replace("{" + "cert_id" + "}", localVarApiClient.escapeString(certId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesCertificateCertIdGetValidateBeforeCall(@javax.annotation.Nonnull String certId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certId' is set
        if (certId == null) {
            throw new ApiException("Missing the required parameter 'certId' when calling servicesCertificateCertIdGet(Async)");
        }

        return servicesCertificateCertIdGetCall(certId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Signing Certificate
     * 
     * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesCertificateCertIdGet(@javax.annotation.Nonnull String certId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesCertificateCertIdGetWithHttpInfo(certId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Signing Certificate
     * 
     * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesCertificateCertIdGetWithHttpInfo(@javax.annotation.Nonnull String certId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesCertificateCertIdGetValidateBeforeCall(certId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Signing Certificate (asynchronously)
     * 
     * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCertificateCertIdGetAsync(@javax.annotation.Nonnull String certId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesCertificateCertIdGetValidateBeforeCall(certId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesConfigurationModeActionsDisablePost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesConfigurationModeActionsDisablePostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/configuration_mode/actions/disable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesConfigurationModeActionsDisablePostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesConfigurationModeActionsDisablePostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Disable Configuration Mode
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesConfigurationModeActionsDisablePost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesConfigurationModeActionsDisablePostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Disable Configuration Mode
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesConfigurationModeActionsDisablePostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesConfigurationModeActionsDisablePostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable Configuration Mode (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesConfigurationModeActionsDisablePostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesConfigurationModeActionsDisablePostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesConfigurationModeActionsEnablePost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesConfigurationModeActionsEnablePostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/configuration_mode/actions/enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesConfigurationModeActionsEnablePostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesConfigurationModeActionsEnablePostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Enable Configuration Mode
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesConfigurationModeActionsEnablePost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesConfigurationModeActionsEnablePostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Enable Configuration Mode
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesConfigurationModeActionsEnablePostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesConfigurationModeActionsEnablePostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable Configuration Mode (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesConfigurationModeActionsEnablePostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesConfigurationModeActionsEnablePostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesDirectdataFilesGet
     * @param extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files. (optional)
     * @param startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time. (optional)
     * @param stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesDirectdataFilesGetCall(@javax.annotation.Nullable String extractType, @javax.annotation.Nullable Integer startTime, @javax.annotation.Nullable Integer stopTime, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/directdata/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (extractType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extract_type", extractType));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (stopTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stop_time", stopTime));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesDirectdataFilesGetValidateBeforeCall(@javax.annotation.Nullable String extractType, @javax.annotation.Nullable Integer startTime, @javax.annotation.Nullable Integer stopTime, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesDirectdataFilesGetCall(extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Available Direct Data Files
     * 
     * @param extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files. (optional)
     * @param startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time. (optional)
     * @param stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesDirectdataFilesGet(@javax.annotation.Nullable String extractType, @javax.annotation.Nullable Integer startTime, @javax.annotation.Nullable Integer stopTime, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesDirectdataFilesGetWithHttpInfo(extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Retrieve Available Direct Data Files
     * 
     * @param extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files. (optional)
     * @param startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time. (optional)
     * @param stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesDirectdataFilesGetWithHttpInfo(@javax.annotation.Nullable String extractType, @javax.annotation.Nullable Integer startTime, @javax.annotation.Nullable Integer stopTime, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesDirectdataFilesGetValidateBeforeCall(extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Available Direct Data Files (asynchronously)
     * 
     * @param extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files. (optional)
     * @param startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time. (optional)
     * @param stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time. (optional)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesDirectdataFilesGetAsync(@javax.annotation.Nullable String extractType, @javax.annotation.Nullable Integer startTime, @javax.annotation.Nullable Integer stopTime, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesDirectdataFilesGetValidateBeforeCall(extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesDirectdataFilesNameGet
     * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesDirectdataFilesNameGetCall(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/directdata/files/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesDirectdataFilesNameGetValidateBeforeCall(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling servicesDirectdataFilesNameGet(Async)");
        }

        return servicesDirectdataFilesNameGetCall(name, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Download Direct Data File
     * 
     * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesDirectdataFilesNameGet(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesDirectdataFilesNameGetWithHttpInfo(name, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Download Direct Data File
     * 
     * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesDirectdataFilesNameGetWithHttpInfo(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesDirectdataFilesNameGetValidateBeforeCall(name, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Direct Data File (asynchronously)
     * 
     * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesDirectdataFilesNameGetAsync(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesDirectdataFilesNameGetValidateBeforeCall(name, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesFileStagingItemsContentItemGet
     * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingItemsContentItemGetCall(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String range, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/file_staging/items/content/{item}"
            .replace("{" + "item" + "}", localVarApiClient.escapeString(item.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (range != null) {
            localVarHeaderParams.put("Range", localVarApiClient.parameterToString(range));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesFileStagingItemsContentItemGetValidateBeforeCall(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String range, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling servicesFileStagingItemsContentItemGet(Async)");
        }

        return servicesFileStagingItemsContentItemGetCall(item, authorization, accept, range, xVaultAPIClientID, _callback);

    }

    /**
     * Download Item Content
     * 
     * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesFileStagingItemsContentItemGet(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String range, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesFileStagingItemsContentItemGetWithHttpInfo(item, authorization, accept, range, xVaultAPIClientID);
    }

    /**
     * Download Item Content
     * 
     * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesFileStagingItemsContentItemGetWithHttpInfo(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String range, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesFileStagingItemsContentItemGetValidateBeforeCall(item, authorization, accept, range, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Item Content (asynchronously)
     * 
     * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingItemsContentItemGetAsync(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String range, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesFileStagingItemsContentItemGetValidateBeforeCall(item, authorization, accept, range, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesFileStagingItemsItemDelete
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingItemsItemDeleteCall(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String recursive, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/file_staging/items/{item}"
            .replace("{" + "item" + "}", localVarApiClient.escapeString(item.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesFileStagingItemsItemDeleteValidateBeforeCall(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String recursive, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling servicesFileStagingItemsItemDelete(Async)");
        }

        return servicesFileStagingItemsItemDeleteCall(item, recursive, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete File or Folder
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesFileStagingItemsItemDelete(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String recursive, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesFileStagingItemsItemDeleteWithHttpInfo(item, recursive, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete File or Folder
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesFileStagingItemsItemDeleteWithHttpInfo(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String recursive, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesFileStagingItemsItemDeleteValidateBeforeCall(item, recursive, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete File or Folder (asynchronously)
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingItemsItemDeleteAsync(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String recursive, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesFileStagingItemsItemDeleteValidateBeforeCall(item, recursive, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesFileStagingItemsItemGet
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false. (optional)
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingItemsItemGetCall(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String recursive, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/file_staging/items/{item}"
            .replace("{" + "item" + "}", localVarApiClient.escapeString(item.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (formatResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format_result", formatResult));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesFileStagingItemsItemGetValidateBeforeCall(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String recursive, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling servicesFileStagingItemsItemGet(Async)");
        }

        return servicesFileStagingItemsItemGetCall(item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * List Items at a Path
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false. (optional)
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesFileStagingItemsItemGet(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String recursive, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesFileStagingItemsItemGetWithHttpInfo(item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID);
    }

    /**
     * List Items at a Path
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false. (optional)
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesFileStagingItemsItemGetWithHttpInfo(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String recursive, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesFileStagingItemsItemGetValidateBeforeCall(item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List Items at a Path (asynchronously)
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false. (optional)
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingItemsItemGetAsync(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String recursive, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesFileStagingItemsItemGetValidateBeforeCall(item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesFileStagingItemsItemPut
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingItemsItemPutCall(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/file_staging/items/{item}"
            .replace("{" + "item" + "}", localVarApiClient.escapeString(item.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesFileStagingItemsItemPutValidateBeforeCall(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling servicesFileStagingItemsItemPut(Async)");
        }

        return servicesFileStagingItemsItemPutCall(item, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Update Folder or File
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesFileStagingItemsItemPut(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesFileStagingItemsItemPutWithHttpInfo(item, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Update Folder or File
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesFileStagingItemsItemPutWithHttpInfo(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesFileStagingItemsItemPutValidateBeforeCall(item, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Folder or File (asynchronously)
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingItemsItemPutAsync(@javax.annotation.Nonnull String item, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesFileStagingItemsItemPutValidateBeforeCall(item, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesFileStagingItemsPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingItemsPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentMD5, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/file_staging/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentMD5 != null) {
            localVarHeaderParams.put("Content-MD5", localVarApiClient.parameterToString(contentMD5));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesFileStagingItemsPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentMD5, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesFileStagingItemsPostCall(authorization, accept, contentMD5, xVaultAPIClientID, _callback);

    }

    /**
     * Create Folder or File
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesFileStagingItemsPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentMD5, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesFileStagingItemsPostWithHttpInfo(authorization, accept, contentMD5, xVaultAPIClientID);
    }

    /**
     * Create Folder or File
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesFileStagingItemsPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentMD5, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesFileStagingItemsPostValidateBeforeCall(authorization, accept, contentMD5, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Folder or File (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingItemsPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentMD5, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesFileStagingItemsPostValidateBeforeCall(authorization, accept, contentMD5, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesFileStagingUploadGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/file_staging/upload/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesFileStagingUploadGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesFileStagingUploadGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * List Upload Sessions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesFileStagingUploadGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesFileStagingUploadGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * List Upload Sessions
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesFileStagingUploadGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesFileStagingUploadGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List Upload Sessions (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesFileStagingUploadGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesFileStagingUploadPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/file_staging/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesFileStagingUploadPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesFileStagingUploadPostCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Create Resumable Upload Session
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesFileStagingUploadPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesFileStagingUploadPostWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Create Resumable Upload Session
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesFileStagingUploadPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesFileStagingUploadPostValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Resumable Upload Session (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesFileStagingUploadPostValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesFileStagingUploadUploadSessionIdDelete
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadUploadSessionIdDeleteCall(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/file_staging/upload/{upload_session_id}"
            .replace("{" + "upload_session_id" + "}", localVarApiClient.escapeString(uploadSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesFileStagingUploadUploadSessionIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadSessionId' is set
        if (uploadSessionId == null) {
            throw new ApiException("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdDelete(Async)");
        }

        return servicesFileStagingUploadUploadSessionIdDeleteCall(uploadSessionId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Abort Upload Session
     * 
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesFileStagingUploadUploadSessionIdDelete(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesFileStagingUploadUploadSessionIdDeleteWithHttpInfo(uploadSessionId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Abort Upload Session
     * 
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesFileStagingUploadUploadSessionIdDeleteWithHttpInfo(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesFileStagingUploadUploadSessionIdDeleteValidateBeforeCall(uploadSessionId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Abort Upload Session (asynchronously)
     * 
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadUploadSessionIdDeleteAsync(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesFileStagingUploadUploadSessionIdDeleteValidateBeforeCall(uploadSessionId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesFileStagingUploadUploadSessionIdGet
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadUploadSessionIdGetCall(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/file_staging/upload/{upload_session_id}"
            .replace("{" + "upload_session_id" + "}", localVarApiClient.escapeString(uploadSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesFileStagingUploadUploadSessionIdGetValidateBeforeCall(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadSessionId' is set
        if (uploadSessionId == null) {
            throw new ApiException("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdGet(Async)");
        }

        return servicesFileStagingUploadUploadSessionIdGetCall(uploadSessionId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Get Upload Session Details
     * 
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesFileStagingUploadUploadSessionIdGet(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesFileStagingUploadUploadSessionIdGetWithHttpInfo(uploadSessionId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Get Upload Session Details
     * 
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesFileStagingUploadUploadSessionIdGetWithHttpInfo(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesFileStagingUploadUploadSessionIdGetValidateBeforeCall(uploadSessionId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Upload Session Details (asynchronously)
     * 
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadUploadSessionIdGetAsync(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesFileStagingUploadUploadSessionIdGetValidateBeforeCall(uploadSessionId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesFileStagingUploadUploadSessionIdPartsGet
     * @param uploadSessionId  (required)
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadUploadSessionIdPartsGetCall(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/file_staging/upload/{upload_session_id}/parts"
            .replace("{" + "upload_session_id" + "}", localVarApiClient.escapeString(uploadSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesFileStagingUploadUploadSessionIdPartsGetValidateBeforeCall(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadSessionId' is set
        if (uploadSessionId == null) {
            throw new ApiException("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPartsGet(Async)");
        }

        return servicesFileStagingUploadUploadSessionIdPartsGetCall(uploadSessionId, limit, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * List File Parts Uploaded to Session
     * 
     * @param uploadSessionId  (required)
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesFileStagingUploadUploadSessionIdPartsGet(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesFileStagingUploadUploadSessionIdPartsGetWithHttpInfo(uploadSessionId, limit, authorization, accept, xVaultAPIClientID);
    }

    /**
     * List File Parts Uploaded to Session
     * 
     * @param uploadSessionId  (required)
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesFileStagingUploadUploadSessionIdPartsGetWithHttpInfo(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesFileStagingUploadUploadSessionIdPartsGetValidateBeforeCall(uploadSessionId, limit, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List File Parts Uploaded to Session (asynchronously)
     * 
     * @param uploadSessionId  (required)
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadUploadSessionIdPartsGetAsync(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesFileStagingUploadUploadSessionIdPartsGetValidateBeforeCall(uploadSessionId, limit, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesFileStagingUploadUploadSessionIdPost
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadUploadSessionIdPostCall(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/file_staging/upload/{upload_session_id}"
            .replace("{" + "upload_session_id" + "}", localVarApiClient.escapeString(uploadSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesFileStagingUploadUploadSessionIdPostValidateBeforeCall(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadSessionId' is set
        if (uploadSessionId == null) {
            throw new ApiException("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPost(Async)");
        }

        return servicesFileStagingUploadUploadSessionIdPostCall(uploadSessionId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Commit Upload Session
     * 
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesFileStagingUploadUploadSessionIdPost(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesFileStagingUploadUploadSessionIdPostWithHttpInfo(uploadSessionId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Commit Upload Session
     * 
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesFileStagingUploadUploadSessionIdPostWithHttpInfo(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesFileStagingUploadUploadSessionIdPostValidateBeforeCall(uploadSessionId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Commit Upload Session (asynchronously)
     * 
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadUploadSessionIdPostAsync(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesFileStagingUploadUploadSessionIdPostValidateBeforeCall(uploadSessionId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesFileStagingUploadUploadSessionIdPut
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2. (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file part being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadUploadSessionIdPutCall(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIFilePartNumber, @javax.annotation.Nullable String contentMD5, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/file_staging/upload/{upload_session_id}"
            .replace("{" + "upload_session_id" + "}", localVarApiClient.escapeString(uploadSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIFilePartNumber != null) {
            localVarHeaderParams.put("X-VaultAPI-FilePartNumber", localVarApiClient.parameterToString(xVaultAPIFilePartNumber));
        }


        if (contentMD5 != null) {
            localVarHeaderParams.put("Content-MD5", localVarApiClient.parameterToString(contentMD5));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesFileStagingUploadUploadSessionIdPutValidateBeforeCall(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIFilePartNumber, @javax.annotation.Nullable String contentMD5, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadSessionId' is set
        if (uploadSessionId == null) {
            throw new ApiException("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPut(Async)");
        }

        return servicesFileStagingUploadUploadSessionIdPutCall(uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID, _callback);

    }

    /**
     * Upload to a Session
     * 
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2. (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file part being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesFileStagingUploadUploadSessionIdPut(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIFilePartNumber, @javax.annotation.Nullable String contentMD5, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesFileStagingUploadUploadSessionIdPutWithHttpInfo(uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID);
    }

    /**
     * Upload to a Session
     * 
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2. (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file part being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesFileStagingUploadUploadSessionIdPutWithHttpInfo(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIFilePartNumber, @javax.annotation.Nullable String contentMD5, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesFileStagingUploadUploadSessionIdPutValidateBeforeCall(uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload to a Session (asynchronously)
     * 
     * @param uploadSessionId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2. (optional)
     * @param contentMD5 Optional: The MD5 checksum of the file part being uploaded. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesFileStagingUploadUploadSessionIdPutAsync(@javax.annotation.Nonnull String uploadSessionId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIFilePartNumber, @javax.annotation.Nullable String contentMD5, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesFileStagingUploadUploadSessionIdPutValidateBeforeCall(uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesJobsHistoriesGet
     * @param startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsHistoriesGetCall(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String status, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/jobs/histories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesJobsHistoriesGetValidateBeforeCall(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String status, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesJobsHistoriesGetCall(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Job Histories
     * 
     * @param startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesJobsHistoriesGet(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String status, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesJobsHistoriesGetWithHttpInfo(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Job Histories
     * 
     * @param startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesJobsHistoriesGetWithHttpInfo(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String status, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesJobsHistoriesGetValidateBeforeCall(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Job Histories (asynchronously)
     * 
     * @param startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsHistoriesGetAsync(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String status, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesJobsHistoriesGetValidateBeforeCall(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesJobsJobIdErrorsGet
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsJobIdErrorsGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/jobs/{job_id}/errors"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesJobsJobIdErrorsGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling servicesJobsJobIdErrorsGet(Async)");
        }

        return servicesJobsJobIdErrorsGetCall(jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Import Bulk Translation File Job Errors
     * 
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesJobsJobIdErrorsGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesJobsJobIdErrorsGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Import Bulk Translation File Job Errors
     * 
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesJobsJobIdErrorsGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesJobsJobIdErrorsGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Import Bulk Translation File Job Errors (asynchronously)
     * 
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsJobIdErrorsGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesJobsJobIdErrorsGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesJobsJobIdGet
     * @param jobId The ID of the job, returned from the original job request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsJobIdGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesJobsJobIdGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling servicesJobsJobIdGet(Async)");
        }

        return servicesJobsJobIdGetCall(jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Job Status
     * 
     * @param jobId The ID of the job, returned from the original job request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesJobsJobIdGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesJobsJobIdGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Job Status
     * 
     * @param jobId The ID of the job, returned from the original job request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesJobsJobIdGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesJobsJobIdGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Job Status (asynchronously)
     * 
     * @param jobId The ID of the job, returned from the original job request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsJobIdGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesJobsJobIdGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesJobsJobIdSummaryGet
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsJobIdSummaryGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/jobs/{job_id}/summary"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesJobsJobIdSummaryGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling servicesJobsJobIdSummaryGet(Async)");
        }

        return servicesJobsJobIdSummaryGetCall(jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Import Bulk Translation File Job Summary
     * 
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesJobsJobIdSummaryGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesJobsJobIdSummaryGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Import Bulk Translation File Job Summary
     * 
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesJobsJobIdSummaryGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesJobsJobIdSummaryGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Import Bulk Translation File Job Summary (asynchronously)
     * 
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsJobIdSummaryGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesJobsJobIdSummaryGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesJobsJobIdTasksGet
     * @param jobId The ID of the SDK job, returned from the original job request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsJobIdTasksGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/jobs/{job_id}/tasks"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesJobsJobIdTasksGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling servicesJobsJobIdTasksGet(Async)");
        }

        return servicesJobsJobIdTasksGetCall(jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve SDK Job Tasks
     * 
     * @param jobId The ID of the SDK job, returned from the original job request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesJobsJobIdTasksGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesJobsJobIdTasksGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve SDK Job Tasks
     * 
     * @param jobId The ID of the SDK job, returned from the original job request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesJobsJobIdTasksGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesJobsJobIdTasksGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve SDK Job Tasks (asynchronously)
     * 
     * @param jobId The ID of the SDK job, returned from the original job request. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsJobIdTasksGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesJobsJobIdTasksGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesJobsMonitorsGet
     * @param startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsMonitorsGetCall(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String status, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/jobs/monitors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesJobsMonitorsGetValidateBeforeCall(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String status, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesJobsMonitorsGetCall(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Job Monitors
     * 
     * @param startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesJobsMonitorsGet(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String status, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesJobsMonitorsGetWithHttpInfo(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Job Monitors
     * 
     * @param startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesJobsMonitorsGetWithHttpInfo(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String status, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesJobsMonitorsGetValidateBeforeCall(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Job Monitors (asynchronously)
     * 
     * @param startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
     * @param endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses. (optional)
     * @param limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsMonitorsGetAsync(@javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String status, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesJobsMonitorsGetValidateBeforeCall(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesJobsStartNowJobIdPost
     * @param jobId The ID of the scheduled job instance to start. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsStartNowJobIdPostCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/jobs/start_now/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesJobsStartNowJobIdPostValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling servicesJobsStartNowJobIdPost(Async)");
        }

        return servicesJobsStartNowJobIdPostCall(jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Start Job
     * 
     * @param jobId The ID of the scheduled job instance to start. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesJobsStartNowJobIdPost(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesJobsStartNowJobIdPostWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Start Job
     * 
     * @param jobId The ID of the scheduled job instance to start. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesJobsStartNowJobIdPostWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesJobsStartNowJobIdPostValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start Job (asynchronously)
     * 
     * @param jobId The ID of the scheduled job instance to start. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesJobsStartNowJobIdPostAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesJobsStartNowJobIdPostValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesLoaderExtractPost
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesLoaderExtractPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/loader/extract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesLoaderExtractPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesLoaderExtractPostCall(authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Extract Data Files
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesLoaderExtractPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesLoaderExtractPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Extract Data Files
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesLoaderExtractPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesLoaderExtractPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Extract Data Files (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesLoaderExtractPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesLoaderExtractPostValidateBeforeCall(authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesLoaderJobIdTasksTaskIdFailurelogGet
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesLoaderJobIdTasksTaskIdFailurelogGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/loader/{job_id}/tasks/{task_id}/failurelog"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesLoaderJobIdTasksTaskIdFailurelogGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet(Async)");
        }

        return servicesLoaderJobIdTasksTaskIdFailurelogGetCall(jobId, taskId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Load Failure Log Results
     * 
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesLoaderJobIdTasksTaskIdFailurelogGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesLoaderJobIdTasksTaskIdFailurelogGetWithHttpInfo(jobId, taskId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Load Failure Log Results
     * 
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesLoaderJobIdTasksTaskIdFailurelogGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesLoaderJobIdTasksTaskIdFailurelogGetValidateBeforeCall(jobId, taskId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Load Failure Log Results (asynchronously)
     * 
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesLoaderJobIdTasksTaskIdFailurelogGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesLoaderJobIdTasksTaskIdFailurelogGetValidateBeforeCall(jobId, taskId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesLoaderJobIdTasksTaskIdResultsGet
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesLoaderJobIdTasksTaskIdResultsGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/loader/{job_id}/tasks/{task_id}/results"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesLoaderJobIdTasksTaskIdResultsGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsGet(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsGet(Async)");
        }

        return servicesLoaderJobIdTasksTaskIdResultsGetCall(jobId, taskId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Loader Extract Results
     * 
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesLoaderJobIdTasksTaskIdResultsGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesLoaderJobIdTasksTaskIdResultsGetWithHttpInfo(jobId, taskId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Loader Extract Results
     * 
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesLoaderJobIdTasksTaskIdResultsGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesLoaderJobIdTasksTaskIdResultsGetValidateBeforeCall(jobId, taskId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Loader Extract Results (asynchronously)
     * 
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesLoaderJobIdTasksTaskIdResultsGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesLoaderJobIdTasksTaskIdResultsGetValidateBeforeCall(jobId, taskId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesLoaderJobIdTasksTaskIdResultsRenditionsGet
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesLoaderJobIdTasksTaskIdResultsRenditionsGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/loader/{job_id}/tasks/{task_id}/results/renditions"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesLoaderJobIdTasksTaskIdResultsRenditionsGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(Async)");
        }

        return servicesLoaderJobIdTasksTaskIdResultsRenditionsGetCall(jobId, taskId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Loader Extract Renditions Results
     * 
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesLoaderJobIdTasksTaskIdResultsRenditionsGetWithHttpInfo(jobId, taskId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Loader Extract Renditions Results
     * 
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesLoaderJobIdTasksTaskIdResultsRenditionsGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesLoaderJobIdTasksTaskIdResultsRenditionsGetValidateBeforeCall(jobId, taskId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Loader Extract Renditions Results (asynchronously)
     * 
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesLoaderJobIdTasksTaskIdResultsRenditionsGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesLoaderJobIdTasksTaskIdResultsRenditionsGetValidateBeforeCall(jobId, taskId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesLoaderJobIdTasksTaskIdSuccesslogGet
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesLoaderJobIdTasksTaskIdSuccesslogGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/loader/{job_id}/tasks/{task_id}/successlog"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesLoaderJobIdTasksTaskIdSuccesslogGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet(Async)");
        }

        return servicesLoaderJobIdTasksTaskIdSuccesslogGetCall(jobId, taskId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Load Success Log Results
     * 
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesLoaderJobIdTasksTaskIdSuccesslogGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesLoaderJobIdTasksTaskIdSuccesslogGetWithHttpInfo(jobId, taskId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Load Success Log Results
     * 
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesLoaderJobIdTasksTaskIdSuccesslogGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesLoaderJobIdTasksTaskIdSuccesslogGetValidateBeforeCall(jobId, taskId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Load Success Log Results (asynchronously)
     * 
     * @param jobId The id value of the requested extract job. (required)
     * @param taskId The id value of the requested extract task. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesLoaderJobIdTasksTaskIdSuccesslogGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nonnull String taskId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesLoaderJobIdTasksTaskIdSuccesslogGetValidateBeforeCall(jobId, taskId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesLoaderLoadPost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesLoaderLoadPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/loader/load";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesLoaderLoadPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesLoaderLoadPostCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Load Data Objects
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesLoaderLoadPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesLoaderLoadPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Load Data Objects
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesLoaderLoadPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesLoaderLoadPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Load Data Objects (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesLoaderLoadPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesLoaderLoadPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesPackageActionsValidatePost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesPackageActionsValidatePostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/package/actions/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesPackageActionsValidatePostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesPackageActionsValidatePostCall(authorization, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Validate Package
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesPackageActionsValidatePost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesPackageActionsValidatePostWithHttpInfo(authorization, contentType, xVaultAPIClientID);
    }

    /**
     * Validate Package
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesPackageActionsValidatePostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesPackageActionsValidatePostValidateBeforeCall(authorization, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate Package (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesPackageActionsValidatePostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesPackageActionsValidatePostValidateBeforeCall(authorization, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesPackagePost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesPackagePostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/package";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesPackagePostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesPackagePostCall(authorization, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Export Package
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesPackagePost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesPackagePostWithHttpInfo(authorization, contentType, xVaultAPIClientID);
    }

    /**
     * Export Package
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesPackagePostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesPackagePostValidateBeforeCall(authorization, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Export Package (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesPackagePostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesPackagePostValidateBeforeCall(authorization, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesPackagePut
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesPackagePutCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/package";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesPackagePutValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesPackagePutCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Import Package
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesPackagePut(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesPackagePutWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Import Package
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesPackagePutWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesPackagePutValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import Package (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesPackagePutAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesPackagePutValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesQueuesGet
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesQueuesGetCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/queues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesQueuesGetValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return servicesQueuesGetCall(authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Queues
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesQueuesGet(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesQueuesGetWithHttpInfo(authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve All Queues
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesQueuesGetWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesQueuesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Queues (asynchronously)
     * 
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesQueuesGetAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesQueuesGetValidateBeforeCall(authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesQueuesQueueNameActionsDisableDeliveryPut
     * @param queueName The name of a specific Queue. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesQueuesQueueNameActionsDisableDeliveryPutCall(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/queues/{queue_name}/actions/disable_delivery"
            .replace("{" + "queue_name" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesQueuesQueueNameActionsDisableDeliveryPutValidateBeforeCall(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsDisableDeliveryPut(Async)");
        }

        return servicesQueuesQueueNameActionsDisableDeliveryPutCall(queueName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Disable Delivery
     * 
     * @param queueName The name of a specific Queue. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesQueuesQueueNameActionsDisableDeliveryPut(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesQueuesQueueNameActionsDisableDeliveryPutWithHttpInfo(queueName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Disable Delivery
     * 
     * @param queueName The name of a specific Queue. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesQueuesQueueNameActionsDisableDeliveryPutWithHttpInfo(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesQueuesQueueNameActionsDisableDeliveryPutValidateBeforeCall(queueName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable Delivery (asynchronously)
     * 
     * @param queueName The name of a specific Queue. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesQueuesQueueNameActionsDisableDeliveryPutAsync(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesQueuesQueueNameActionsDisableDeliveryPutValidateBeforeCall(queueName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesQueuesQueueNameActionsEnableDeliveryPut
     * @param queueName The name of a specific Queue. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesQueuesQueueNameActionsEnableDeliveryPutCall(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/queues/{queue_name}/actions/enable_delivery"
            .replace("{" + "queue_name" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesQueuesQueueNameActionsEnableDeliveryPutValidateBeforeCall(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsEnableDeliveryPut(Async)");
        }

        return servicesQueuesQueueNameActionsEnableDeliveryPutCall(queueName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Enable Delivery
     * 
     * @param queueName The name of a specific Queue. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesQueuesQueueNameActionsEnableDeliveryPut(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesQueuesQueueNameActionsEnableDeliveryPutWithHttpInfo(queueName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Enable Delivery
     * 
     * @param queueName The name of a specific Queue. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesQueuesQueueNameActionsEnableDeliveryPutWithHttpInfo(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesQueuesQueueNameActionsEnableDeliveryPutValidateBeforeCall(queueName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable Delivery (asynchronously)
     * 
     * @param queueName The name of a specific Queue. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesQueuesQueueNameActionsEnableDeliveryPutAsync(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesQueuesQueueNameActionsEnableDeliveryPutValidateBeforeCall(queueName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesQueuesQueueNameActionsResetPut
     * @param queueName The name of a specific Queue. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesQueuesQueueNameActionsResetPutCall(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/queues/{queue_name}/actions/reset"
            .replace("{" + "queue_name" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesQueuesQueueNameActionsResetPutValidateBeforeCall(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsResetPut(Async)");
        }

        return servicesQueuesQueueNameActionsResetPutCall(queueName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Reset Queue
     * 
     * @param queueName The name of a specific Queue. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesQueuesQueueNameActionsResetPut(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesQueuesQueueNameActionsResetPutWithHttpInfo(queueName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Reset Queue
     * 
     * @param queueName The name of a specific Queue. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesQueuesQueueNameActionsResetPutWithHttpInfo(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesQueuesQueueNameActionsResetPutValidateBeforeCall(queueName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset Queue (asynchronously)
     * 
     * @param queueName The name of a specific Queue. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesQueuesQueueNameActionsResetPutAsync(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesQueuesQueueNameActionsResetPutValidateBeforeCall(queueName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesQueuesQueueNameGet
     * @param queueName The name of a specific queue. For example, queue__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesQueuesQueueNameGetCall(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/queues/{queue_name}"
            .replace("{" + "queue_name" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesQueuesQueueNameGetValidateBeforeCall(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameGet(Async)");
        }

        return servicesQueuesQueueNameGetCall(queueName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Queue Status
     * 
     * @param queueName The name of a specific queue. For example, queue__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesQueuesQueueNameGet(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesQueuesQueueNameGetWithHttpInfo(queueName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Queue Status
     * 
     * @param queueName The name of a specific queue. For example, queue__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesQueuesQueueNameGetWithHttpInfo(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesQueuesQueueNameGetValidateBeforeCall(queueName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Queue Status (asynchronously)
     * 
     * @param queueName The name of a specific queue. For example, queue__c. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesQueuesQueueNameGetAsync(@javax.annotation.Nonnull String queueName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesQueuesQueueNameGetValidateBeforeCall(queueName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesVobjectVaultPackageVPackageIdActionsValidatePost
     * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesVobjectVaultPackageVPackageIdActionsValidatePostCall(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/vobject/vault_package__v/{package_id}/actions/validate"
            .replace("{" + "package_id" + "}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesVobjectVaultPackageVPackageIdActionsValidatePostValidateBeforeCall(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling servicesVobjectVaultPackageVPackageIdActionsValidatePost(Async)");
        }

        return servicesVobjectVaultPackageVPackageIdActionsValidatePostCall(packageId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Validate Imported Package
     * 
     * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void servicesVobjectVaultPackageVPackageIdActionsValidatePost(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        servicesVobjectVaultPackageVPackageIdActionsValidatePostWithHttpInfo(packageId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Validate Imported Package
     * 
     * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesVobjectVaultPackageVPackageIdActionsValidatePostWithHttpInfo(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = servicesVobjectVaultPackageVPackageIdActionsValidatePostValidateBeforeCall(packageId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate Imported Package (asynchronously)
     * 
     * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesVobjectVaultPackageVPackageIdActionsValidatePostAsync(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesVobjectVaultPackageVPackageIdActionsValidatePostValidateBeforeCall(packageId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionDelete
     * @param accept  (optional)
     * @param authorization The Vault sessionId to end. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionDeleteCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionDeleteValidateBeforeCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return sessionDeleteCall(accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * End Session
     * 
     * @param accept  (optional)
     * @param authorization The Vault sessionId to end. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void sessionDelete(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        sessionDeleteWithHttpInfo(accept, authorization, xVaultAPIClientID);
    }

    /**
     * End Session
     * 
     * @param accept  (optional)
     * @param authorization The Vault sessionId to end. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionDeleteWithHttpInfo(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = sessionDeleteValidateBeforeCall(accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * End Session (asynchronously)
     * 
     * @param accept  (optional)
     * @param authorization The Vault sessionId to end. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionDeleteAsync(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionDeleteValidateBeforeCall(accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uicodeDistributionsDistributionNameCodeGet
     * @param distributionName The name attribute of the client code distribution to download. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uicodeDistributionsDistributionNameCodeGetCall(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uicode/distributions/{distribution_name}/code"
            .replace("{" + "distribution_name" + "}", localVarApiClient.escapeString(distributionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uicodeDistributionsDistributionNameCodeGetValidateBeforeCall(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionName' is set
        if (distributionName == null) {
            throw new ApiException("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameCodeGet(Async)");
        }

        return uicodeDistributionsDistributionNameCodeGetCall(distributionName, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Download Single Client Code Distribution
     * 
     * @param distributionName The name attribute of the client code distribution to download. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void uicodeDistributionsDistributionNameCodeGet(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        uicodeDistributionsDistributionNameCodeGetWithHttpInfo(distributionName, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Download Single Client Code Distribution
     * 
     * @param distributionName The name attribute of the client code distribution to download. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uicodeDistributionsDistributionNameCodeGetWithHttpInfo(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = uicodeDistributionsDistributionNameCodeGetValidateBeforeCall(distributionName, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Single Client Code Distribution (asynchronously)
     * 
     * @param distributionName The name attribute of the client code distribution to download. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uicodeDistributionsDistributionNameCodeGetAsync(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uicodeDistributionsDistributionNameCodeGetValidateBeforeCall(distributionName, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uicodeDistributionsDistributionNameDelete
     * @param distributionName The name attribute of the client code distribution to delete. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uicodeDistributionsDistributionNameDeleteCall(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uicode/distributions/{distribution_name}"
            .replace("{" + "distribution_name" + "}", localVarApiClient.escapeString(distributionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uicodeDistributionsDistributionNameDeleteValidateBeforeCall(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionName' is set
        if (distributionName == null) {
            throw new ApiException("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameDelete(Async)");
        }

        return uicodeDistributionsDistributionNameDeleteCall(distributionName, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Single Client Code Distribution
     * 
     * @param distributionName The name attribute of the client code distribution to delete. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void uicodeDistributionsDistributionNameDelete(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        uicodeDistributionsDistributionNameDeleteWithHttpInfo(distributionName, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Delete Single Client Code Distribution
     * 
     * @param distributionName The name attribute of the client code distribution to delete. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uicodeDistributionsDistributionNameDeleteWithHttpInfo(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = uicodeDistributionsDistributionNameDeleteValidateBeforeCall(distributionName, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Single Client Code Distribution (asynchronously)
     * 
     * @param distributionName The name attribute of the client code distribution to delete. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uicodeDistributionsDistributionNameDeleteAsync(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uicodeDistributionsDistributionNameDeleteValidateBeforeCall(distributionName, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uicodeDistributionsDistributionNameGet
     * @param distributionName The name attribute of the client code distribution to delete. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uicodeDistributionsDistributionNameGetCall(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uicode/distributions/{distribution_name}"
            .replace("{" + "distribution_name" + "}", localVarApiClient.escapeString(distributionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uicodeDistributionsDistributionNameGetValidateBeforeCall(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionName' is set
        if (distributionName == null) {
            throw new ApiException("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameGet(Async)");
        }

        return uicodeDistributionsDistributionNameGetCall(distributionName, accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Single Client Code Distribution Metadata
     * 
     * @param distributionName The name attribute of the client code distribution to delete. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void uicodeDistributionsDistributionNameGet(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        uicodeDistributionsDistributionNameGetWithHttpInfo(distributionName, accept, authorization, xVaultAPIClientID);
    }

    /**
     * Retrieve Single Client Code Distribution Metadata
     * 
     * @param distributionName The name attribute of the client code distribution to delete. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uicodeDistributionsDistributionNameGetWithHttpInfo(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = uicodeDistributionsDistributionNameGetValidateBeforeCall(distributionName, accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Single Client Code Distribution Metadata (asynchronously)
     * 
     * @param distributionName The name attribute of the client code distribution to delete. (required)
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uicodeDistributionsDistributionNameGetAsync(@javax.annotation.Nonnull String distributionName, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uicodeDistributionsDistributionNameGetValidateBeforeCall(distributionName, accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uicodeDistributionsGet
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uicodeDistributionsGetCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uicode/distributions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uicodeDistributionsGetValidateBeforeCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return uicodeDistributionsGetCall(accept, authorization, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve All Client Code Distribution Metadata
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void uicodeDistributionsGet(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        uicodeDistributionsGetWithHttpInfo(accept, authorization, xVaultAPIClientID);
    }

    /**
     * Retrieve All Client Code Distribution Metadata
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uicodeDistributionsGetWithHttpInfo(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = uicodeDistributionsGetValidateBeforeCall(accept, authorization, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve All Client Code Distribution Metadata (asynchronously)
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uicodeDistributionsGetAsync(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uicodeDistributionsGetValidateBeforeCall(accept, authorization, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uicodeDistributionsPost
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uicodeDistributionsPostCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uicode/distributions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uicodeDistributionsPostValidateBeforeCall(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return uicodeDistributionsPostCall(accept, authorization, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Add or Replace Single Client Code Distribution
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void uicodeDistributionsPost(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        uicodeDistributionsPostWithHttpInfo(accept, authorization, contentType, xVaultAPIClientID);
    }

    /**
     * Add or Replace Single Client Code Distribution
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uicodeDistributionsPostWithHttpInfo(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = uicodeDistributionsPostValidateBeforeCall(accept, authorization, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add or Replace Single Client Code Distribution (asynchronously)
     * 
     * @param accept  (optional)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uicodeDistributionsPostAsync(@javax.annotation.Nullable String accept, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uicodeDistributionsPostValidateBeforeCall(accept, authorization, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectVaultPackageVPackageIdActionsDeployPost
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectVaultPackageVPackageIdActionsDeployPostCall(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobject/vault_package__v/{package_id}/actions/deploy"
            .replace("{" + "package_id" + "}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectVaultPackageVPackageIdActionsDeployPostValidateBeforeCall(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployPost(Async)");
        }

        return vobjectVaultPackageVPackageIdActionsDeployPostCall(packageId, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Deploy Package
     * 
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectVaultPackageVPackageIdActionsDeployPost(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectVaultPackageVPackageIdActionsDeployPostWithHttpInfo(packageId, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Deploy Package
     * 
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectVaultPackageVPackageIdActionsDeployPostWithHttpInfo(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectVaultPackageVPackageIdActionsDeployPostValidateBeforeCall(packageId, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deploy Package (asynchronously)
     * 
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectVaultPackageVPackageIdActionsDeployPostAsync(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectVaultPackageVPackageIdActionsDeployPostValidateBeforeCall(packageId, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectVaultPackageVPackageIdActionsDeployResultsGet
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectVaultPackageVPackageIdActionsDeployResultsGetCall(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobject/vault_package__v/{package_id}/actions/deploy/results"
            .replace("{" + "package_id" + "}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectVaultPackageVPackageIdActionsDeployResultsGetValidateBeforeCall(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployResultsGet(Async)");
        }

        return vobjectVaultPackageVPackageIdActionsDeployResultsGetCall(packageId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Package Deploy Results
     * 
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectVaultPackageVPackageIdActionsDeployResultsGet(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectVaultPackageVPackageIdActionsDeployResultsGetWithHttpInfo(packageId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Package Deploy Results
     * 
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectVaultPackageVPackageIdActionsDeployResultsGetWithHttpInfo(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectVaultPackageVPackageIdActionsDeployResultsGetValidateBeforeCall(packageId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Package Deploy Results (asynchronously)
     * 
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectVaultPackageVPackageIdActionsDeployResultsGetAsync(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectVaultPackageVPackageIdActionsDeployResultsGetValidateBeforeCall(packageId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param jobStatus  (required)
     * @param jobId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String jobStatus, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "job_status" + "}", localVarApiClient.escapeString(jobStatus.toString()))
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String jobStatus, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(Async)");
        }

        // verify the required parameter 'jobStatus' is set
        if (jobStatus == null) {
            throw new ApiException("Missing the required parameter 'jobStatus' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(Async)");
        }

        return vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetCall(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Results of Cascade Delete Job
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param jobStatus  (required)
     * @param jobId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String jobStatus, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetWithHttpInfo(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Results of Cascade Delete Job
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param jobStatus  (required)
     * @param jobId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String jobStatus, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetValidateBeforeCall(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Results of Cascade Delete Job (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param jobStatus  (required)
     * @param jobId  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String jobStatus, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetValidateBeforeCall(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param jobStatus The ID of the job, retrieved from the response of the job request. (required)
     * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String jobStatus, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "job_status" + "}", localVarApiClient.escapeString(jobStatus.toString()))
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String jobStatus, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(Async)");
        }

        // verify the required parameter 'jobStatus' is set
        if (jobStatus == null) {
            throw new ApiException("Missing the required parameter 'jobStatus' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(Async)");
        }

        return vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetCall(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Results of Deep Copy Job
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param jobStatus The ID of the job, retrieved from the response of the job request. (required)
     * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String jobStatus, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetWithHttpInfo(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Results of Deep Copy Job
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param jobStatus The ID of the job, retrieved from the response of the job request. (required)
     * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String jobStatus, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetValidateBeforeCall(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Results of Deep Copy Job (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param jobStatus The ID of the job, retrieved from the response of the job request. (required)
     * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String jobStatus, @javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetValidateBeforeCall(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsEdlItemVActionsCreateplaceholderPost
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsEdlItemVActionsCreateplaceholderPostCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/edl_item__v/actions/createplaceholder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsEdlItemVActionsCreateplaceholderPostValidateBeforeCall(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        return vobjectsEdlItemVActionsCreateplaceholderPostCall(authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Create a Placeholder from an EDL Item
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsEdlItemVActionsCreateplaceholderPost(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsEdlItemVActionsCreateplaceholderPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Create a Placeholder from an EDL Item
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsEdlItemVActionsCreateplaceholderPostWithHttpInfo(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsEdlItemVActionsCreateplaceholderPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a Placeholder from an EDL Item (asynchronously)
     * 
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsEdlItemVActionsCreateplaceholderPostAsync(@javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsEdlItemVActionsCreateplaceholderPostValidateBeforeCall(authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsMergesJobIdLogGet
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsMergesJobIdLogGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/merges/{job_id}/log"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsMergesJobIdLogGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdLogGet(Async)");
        }

        return vobjectsMergesJobIdLogGetCall(jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download Merge Records Job Log
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsMergesJobIdLogGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsMergesJobIdLogGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download Merge Records Job Log
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsMergesJobIdLogGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsMergesJobIdLogGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Merge Records Job Log (asynchronously)
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsMergesJobIdLogGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsMergesJobIdLogGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsMergesJobIdResultsGet
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsMergesJobIdResultsGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/merges/{job_id}/results"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsMergesJobIdResultsGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdResultsGet(Async)");
        }

        return vobjectsMergesJobIdResultsGetCall(jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Record Merge Results
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsMergesJobIdResultsGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsMergesJobIdResultsGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Record Merge Results
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsMergesJobIdResultsGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsMergesJobIdResultsGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Record Merge Results (asynchronously)
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsMergesJobIdResultsGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsMergesJobIdResultsGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsMergesJobIdStatusGet
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsMergesJobIdStatusGetCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/merges/{job_id}/status"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsMergesJobIdStatusGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdStatusGet(Async)");
        }

        return vobjectsMergesJobIdStatusGetCall(jobId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Record Merge Status
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsMergesJobIdStatusGet(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsMergesJobIdStatusGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Record Merge Status
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsMergesJobIdStatusGetWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsMergesJobIdStatusGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Record Merge Status (asynchronously)
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsMergesJobIdStatusGetAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsMergesJobIdStatusGetValidateBeforeCall(jobId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameActionsActionNamePost
     * @param objectName The object name__v field value. (required)
     * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameActionsActionNamePostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/actions/{action_name}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "action_name" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameActionsActionNamePostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsActionNamePost(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling vobjectsObjectNameActionsActionNamePost(Async)");
        }

        return vobjectsObjectNameActionsActionNamePostCall(objectName, actionName, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Initiate Object Action on Multiple Records
     * 
     * @param objectName The object name__v field value. (required)
     * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameActionsActionNamePost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameActionsActionNamePostWithHttpInfo(objectName, actionName, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Initiate Object Action on Multiple Records
     * 
     * @param objectName The object name__v field value. (required)
     * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameActionsActionNamePostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameActionsActionNamePostValidateBeforeCall(objectName, actionName, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate Object Action on Multiple Records (asynchronously)
     * 
     * @param objectName The object name__v field value. (required)
     * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameActionsActionNamePostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameActionsActionNamePostValidateBeforeCall(objectName, actionName, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameActionsChangetypePost
     * @param objectName The name of the object. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameActionsChangetypePostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/actions/changetype"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameActionsChangetypePostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsChangetypePost(Async)");
        }

        return vobjectsObjectNameActionsChangetypePostCall(objectName, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Change Object Type
     * 
     * @param objectName The name of the object. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameActionsChangetypePost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameActionsChangetypePostWithHttpInfo(objectName, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Change Object Type
     * 
     * @param objectName The name of the object. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameActionsChangetypePostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameActionsChangetypePostValidateBeforeCall(objectName, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change Object Type (asynchronously)
     * 
     * @param objectName The name of the object. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameActionsChangetypePostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameActionsChangetypePostValidateBeforeCall(objectName, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameActionsMergePost
     * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param vobjectsObjectNameActionsMergePostRequestInner  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameActionsMergePostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, @javax.annotation.Nullable List<VobjectsObjectNameActionsMergePostRequestInner> vobjectsObjectNameActionsMergePostRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vobjectsObjectNameActionsMergePostRequestInner;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/actions/merge"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameActionsMergePostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, @javax.annotation.Nullable List<VobjectsObjectNameActionsMergePostRequestInner> vobjectsObjectNameActionsMergePostRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsMergePost(Async)");
        }

        return vobjectsObjectNameActionsMergePostCall(objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner, _callback);

    }

    /**
     * Initiate Record Merge
     * 
     * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param vobjectsObjectNameActionsMergePostRequestInner  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameActionsMergePost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, @javax.annotation.Nullable List<VobjectsObjectNameActionsMergePostRequestInner> vobjectsObjectNameActionsMergePostRequestInner) throws ApiException {
        vobjectsObjectNameActionsMergePostWithHttpInfo(objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner);
    }

    /**
     * Initiate Record Merge
     * 
     * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param vobjectsObjectNameActionsMergePostRequestInner  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameActionsMergePostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, @javax.annotation.Nullable List<VobjectsObjectNameActionsMergePostRequestInner> vobjectsObjectNameActionsMergePostRequestInner) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameActionsMergePostValidateBeforeCall(objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate Record Merge (asynchronously)
     * 
     * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param vobjectsObjectNameActionsMergePostRequestInner  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameActionsMergePostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, @javax.annotation.Nullable List<VobjectsObjectNameActionsMergePostRequestInner> vobjectsObjectNameActionsMergePostRequestInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameActionsMergePostValidateBeforeCall(objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameActionsRecalculaterollupsGet
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameActionsRecalculaterollupsGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/actions/recalculaterollups"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameActionsRecalculaterollupsGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsGet(Async)");
        }

        return vobjectsObjectNameActionsRecalculaterollupsGetCall(objectName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Roll-up Field Recalculation Status
     * 
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameActionsRecalculaterollupsGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameActionsRecalculaterollupsGetWithHttpInfo(objectName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Roll-up Field Recalculation Status
     * 
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameActionsRecalculaterollupsGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameActionsRecalculaterollupsGetValidateBeforeCall(objectName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Roll-up Field Recalculation Status (asynchronously)
     * 
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameActionsRecalculaterollupsGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameActionsRecalculaterollupsGetValidateBeforeCall(objectName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameActionsRecalculaterollupsPost
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameActionsRecalculaterollupsPostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/actions/recalculaterollups"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameActionsRecalculaterollupsPostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsPost(Async)");
        }

        return vobjectsObjectNameActionsRecalculaterollupsPostCall(objectName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Recalculate Roll-up Fields
     * 
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameActionsRecalculaterollupsPost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameActionsRecalculaterollupsPostWithHttpInfo(objectName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Recalculate Roll-up Fields
     * 
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameActionsRecalculaterollupsPostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameActionsRecalculaterollupsPostValidateBeforeCall(objectName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Recalculate Roll-up Fields (asynchronously)
     * 
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameActionsRecalculaterollupsPostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameActionsRecalculaterollupsPostValidateBeforeCall(objectName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameActionsUpdatecorporatecurrencyPut
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameActionsUpdatecorporatecurrencyPutCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/actions/updatecorporatecurrency"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameActionsUpdatecorporatecurrencyPutValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsUpdatecorporatecurrencyPut(Async)");
        }

        return vobjectsObjectNameActionsUpdatecorporatecurrencyPutCall(objectName, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Corporate Currency Fields
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameActionsUpdatecorporatecurrencyPut(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameActionsUpdatecorporatecurrencyPutWithHttpInfo(objectName, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Corporate Currency Fields
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameActionsUpdatecorporatecurrencyPutWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameActionsUpdatecorporatecurrencyPutValidateBeforeCall(objectName, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Corporate Currency Fields (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameActionsUpdatecorporatecurrencyPutAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameActionsUpdatecorporatecurrencyPutValidateBeforeCall(objectName, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameAttachmentsBatchDelete
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param idParam  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameAttachmentsBatchDeleteCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/attachments/batch"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idParam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idParam", idParam));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameAttachmentsBatchDeleteValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchDelete(Async)");
        }

        return vobjectsObjectNameAttachmentsBatchDeleteCall(objectName, idParam, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Multiple Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param idParam  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameAttachmentsBatchDelete(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameAttachmentsBatchDeleteWithHttpInfo(objectName, idParam, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Delete Multiple Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param idParam  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameAttachmentsBatchDeleteWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameAttachmentsBatchDeleteValidateBeforeCall(objectName, idParam, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Multiple Object Record Attachments (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param idParam  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameAttachmentsBatchDeleteAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameAttachmentsBatchDeleteValidateBeforeCall(objectName, idParam, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameAttachmentsBatchPost
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameAttachmentsBatchPostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/attachments/batch"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameAttachmentsBatchPostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPost(Async)");
        }

        return vobjectsObjectNameAttachmentsBatchPostCall(objectName, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Multiple Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameAttachmentsBatchPost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameAttachmentsBatchPostWithHttpInfo(objectName, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Multiple Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameAttachmentsBatchPostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameAttachmentsBatchPostValidateBeforeCall(objectName, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Multiple Object Record Attachments (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameAttachmentsBatchPostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameAttachmentsBatchPostValidateBeforeCall(objectName, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameAttachmentsBatchPut
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameAttachmentsBatchPutCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/attachments/batch"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameAttachmentsBatchPutValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPut(Async)");
        }

        return vobjectsObjectNameAttachmentsBatchPutCall(objectName, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Multiple Object Record Attachment Descriptions
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameAttachmentsBatchPut(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameAttachmentsBatchPutWithHttpInfo(objectName, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Multiple Object Record Attachment Descriptions
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameAttachmentsBatchPutWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameAttachmentsBatchPutValidateBeforeCall(objectName, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Multiple Object Record Attachment Descriptions (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameAttachmentsBatchPutAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameAttachmentsBatchPutValidateBeforeCall(objectName, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameDelete
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameDeleteCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameDeleteValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameDelete(Async)");
        }

        return vobjectsObjectNameDeleteCall(objectName, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameDelete(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameDeleteWithHttpInfo(objectName, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Delete Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameDeleteWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameDeleteValidateBeforeCall(objectName, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Object Records (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameDeleteAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameDeleteValidateBeforeCall(objectName, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameIdRolesRoleNameGet
     * @param objectName The object name. (required)
     * @param id The id of the document, binder, or object record. (required)
     * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameIdRolesRoleNameGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{id}/roles/{role_name}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "role_name" + "}", localVarApiClient.escapeString(roleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameIdRolesRoleNameGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameIdRolesRoleNameGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling vobjectsObjectNameIdRolesRoleNameGet(Async)");
        }

        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling vobjectsObjectNameIdRolesRoleNameGet(Async)");
        }

        return vobjectsObjectNameIdRolesRoleNameGetCall(objectName, id, roleName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Object Record Roles
     * 
     * @param objectName The object name. (required)
     * @param id The id of the document, binder, or object record. (required)
     * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameIdRolesRoleNameGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameIdRolesRoleNameGetWithHttpInfo(objectName, id, roleName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Object Record Roles
     * 
     * @param objectName The object name. (required)
     * @param id The id of the document, binder, or object record. (required)
     * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameIdRolesRoleNameGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameIdRolesRoleNameGetValidateBeforeCall(objectName, id, roleName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Object Record Roles (asynchronously)
     * 
     * @param objectName The object name. (required)
     * @param id The id of the document, binder, or object record. (required)
     * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameIdRolesRoleNameGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String id, @javax.annotation.Nonnull String roleName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameIdRolesRoleNameGetValidateBeforeCall(objectName, id, roleName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdActionsActionNameGet
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value from which to retrieve user actions. (required)
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdActionsActionNameGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/actions/{action_name}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()))
            .replace("{" + "action_name" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdActionsActionNameGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet(Async)");
        }

        return vobjectsObjectNameObjectRecordIdActionsActionNameGetCall(objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Object User Actions Details
     * 
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value from which to retrieve user actions. (required)
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdActionsActionNameGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdActionsActionNameGetWithHttpInfo(objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Object User Actions Details
     * 
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value from which to retrieve user actions. (required)
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdActionsActionNameGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdActionsActionNameGetValidateBeforeCall(objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Object User Actions Details (asynchronously)
     * 
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value from which to retrieve user actions. (required)
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdActionsActionNameGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdActionsActionNameGetValidateBeforeCall(objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdActionsActionNamePost
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value from which to retrieve user actions. (required)
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdActionsActionNamePostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/actions/{action_name}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()))
            .replace("{" + "action_name" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdActionsActionNamePostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost(Async)");
        }

        return vobjectsObjectNameObjectRecordIdActionsActionNamePostCall(objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Initiate Object Action on a Single Record
     * 
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value from which to retrieve user actions. (required)
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdActionsActionNamePost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdActionsActionNamePostWithHttpInfo(objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID);
    }

    /**
     * Initiate Object Action on a Single Record
     * 
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value from which to retrieve user actions. (required)
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdActionsActionNamePostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdActionsActionNamePostValidateBeforeCall(objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate Object Action on a Single Record (asynchronously)
     * 
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value from which to retrieve user actions. (required)
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. (required)
     * @param authorization  (optional)
     * @param contentType  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdActionsActionNamePostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String actionName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdActionsActionNamePostValidateBeforeCall(objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdActionsCascadedeletePost
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdActionsCascadedeletePostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/actions/cascadedelete"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdActionsCascadedeletePostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(Async)");
        }

        return vobjectsObjectNameObjectRecordIdActionsCascadedeletePostCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Cascade Delete Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdActionsCascadedeletePostWithHttpInfo(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Cascade Delete Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdActionsCascadedeletePostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdActionsCascadedeletePostValidateBeforeCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cascade Delete Object Record (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdActionsCascadedeletePostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdActionsCascadedeletePostValidateBeforeCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdActionsDeepcopyPost
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdActionsDeepcopyPostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/actions/deepcopy"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdActionsDeepcopyPostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(Async)");
        }

        return vobjectsObjectNameObjectRecordIdActionsDeepcopyPostCall(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Deep Copy Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdActionsDeepcopyPostWithHttpInfo(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Deep Copy Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdActionsDeepcopyPostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdActionsDeepcopyPostValidateBeforeCall(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deep Copy Object Record (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdActionsDeepcopyPostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdActionsDeepcopyPostValidateBeforeCall(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdActionsGet
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param loc Optional: When true, retrieves localized (translated) strings for the label.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdActionsGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/actions"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loc", loc));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdActionsGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsGet(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsGet(Async)");
        }

        return vobjectsObjectNameObjectRecordIdActionsGetCall(objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Object Record User Actions
     * 
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param loc Optional: When true, retrieves localized (translated) strings for the label.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdActionsGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdActionsGetWithHttpInfo(objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Object Record User Actions
     * 
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param loc Optional: When true, retrieves localized (translated) strings for the label.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdActionsGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdActionsGetValidateBeforeCall(objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Object Record User Actions (asynchronously)
     * 
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param loc Optional: When true, retrieves localized (translated) strings for the label.  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdActionsGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable Boolean loc, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdActionsGetValidateBeforeCall(objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet
     * @param objectName The object name__v field value. For example, product__v. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentFieldName The name of the Attachment field to update. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentFieldName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()))
            .replace("{" + "attachment_field_name" + "}", localVarApiClient.escapeString(attachmentFieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentFieldName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(Async)");
        }

        // verify the required parameter 'attachmentFieldName' is set
        if (attachmentFieldName == null) {
            throw new ApiException("Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetCall(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download Attachment Field File
     * 
     * @param objectName The object name__v field value. For example, product__v. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentFieldName The name of the Attachment field to update. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentFieldName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetWithHttpInfo(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download Attachment Field File
     * 
     * @param objectName The object name__v field value. For example, product__v. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentFieldName The name of the Attachment field to update. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentFieldName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetValidateBeforeCall(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Attachment Field File (asynchronously)
     * 
     * @param objectName The object name__v field value. For example, product__v. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentFieldName The name of the Attachment field to update. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentFieldName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetValidateBeforeCall(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost
     * @param objectName The object name__v field value. For example, product__v. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentFieldName The name of the Attachment field to update. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentFieldName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()))
            .replace("{" + "attachment_field_name" + "}", localVarApiClient.escapeString(attachmentFieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentFieldName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(Async)");
        }

        // verify the required parameter 'attachmentFieldName' is set
        if (attachmentFieldName == null) {
            throw new ApiException("Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostCall(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Update Attachment Field File
     * 
     * @param objectName The object name__v field value. For example, product__v. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentFieldName The name of the Attachment field to update. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentFieldName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostWithHttpInfo(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Update Attachment Field File
     * 
     * @param objectName The object name__v field value. For example, product__v. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentFieldName The name of the Attachment field to update. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentFieldName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostValidateBeforeCall(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Attachment Field File (asynchronously)
     * 
     * @param objectName The object name__v field value. For example, product__v. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentFieldName The name of the Attachment field to update. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentFieldName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostValidateBeforeCall(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet
     * @param objectName The object name__v field value. For example, product__v. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachment_fields/file"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download All Attachment Field Files
     * 
     * @param objectName The object name__v field value. For example, product__v. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetWithHttpInfo(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download All Attachment Field Files
     * 
     * @param objectName The object name__v field value. For example, product__v. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetValidateBeforeCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download All Attachment Field Files (asynchronously)
     * 
     * @param objectName The object name__v field value. For example, product__v. (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetValidateBeforeCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteCall(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Object Record Attachment
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteWithHttpInfo(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Delete Object Record Attachment
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteValidateBeforeCall(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Object Record Attachment (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteValidateBeforeCall(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetCall(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Object Record Attachment Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetWithHttpInfo(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Object Record Attachment Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetValidateBeforeCall(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Object Record Attachment Metadata (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetValidateBeforeCall(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutCall(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Update Object Record Attachment Description
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutWithHttpInfo(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Update Object Record Attachment Description
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutValidateBeforeCall(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Object Record Attachment Description (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutValidateBeforeCall(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "attachment_version" + "}", localVarApiClient.escapeString(attachmentVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(Async)");
        }

        // verify the required parameter 'attachmentVersion' is set
        if (attachmentVersion == null) {
            throw new ApiException("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCall(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Delete Object Record Attachment Version
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Delete Object Record Attachment Version
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteValidateBeforeCall(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Object Record Attachment Version (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteValidateBeforeCall(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "attachment_version" + "}", localVarApiClient.escapeString(attachmentVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(Async)");
        }

        // verify the required parameter 'attachmentVersion' is set
        if (attachmentVersion == null) {
            throw new ApiException("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCall(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download Object Record Attachment File
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download Object Record Attachment File
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetValidateBeforeCall(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Object Record Attachment File (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion  (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetValidateBeforeCall(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "attachment_version" + "}", localVarApiClient.escapeString(attachmentVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(Async)");
        }

        // verify the required parameter 'attachmentVersion' is set
        if (attachmentVersion == null) {
            throw new ApiException("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCall(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Object Record Attachment Version Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Object Record Attachment Version Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetValidateBeforeCall(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Object Record Attachment Version Metadata (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetValidateBeforeCall(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param restore  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable Boolean restore, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "attachment_version" + "}", localVarApiClient.escapeString(attachmentVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (restore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("restore", restore));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable Boolean restore, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(Async)");
        }

        // verify the required parameter 'attachmentVersion' is set
        if (attachmentVersion == null) {
            throw new ApiException("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCall(objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Restore Object Record Attachment Version
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param restore  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable Boolean restore, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Restore Object Record Attachment Version
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param restore  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable Boolean restore, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostValidateBeforeCall(objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restore Object Record Attachment Version (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param attachmentVersion The attachment version__v field value. (required)
     * @param restore  (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nonnull String attachmentVersion, @javax.annotation.Nullable Boolean restore, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostValidateBeforeCall(objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetCall(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Object Record Attachment Versions
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Object Record Attachment Versions
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetValidateBeforeCall(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Object Record Attachment Versions (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param attachmentId The attachment id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetValidateBeforeCall(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentsFileGet
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsFileGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/file"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsFileGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentsFileGetCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Download All Object Record Attachment Files
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentsFileGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentsFileGetWithHttpInfo(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Download All Object Record Attachment Files
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentsFileGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsFileGetValidateBeforeCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download All Object Record Attachment Files (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsFileGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsFileGetValidateBeforeCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentsGet
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentsGetCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentsGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentsGetWithHttpInfo(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentsGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsGetValidateBeforeCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Object Record Attachments (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsGetValidateBeforeCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAttachmentsPost
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsPostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsPostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAttachmentsPostCall(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Create Object Record Attachment
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAttachmentsPost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAttachmentsPostWithHttpInfo(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Create Object Record Attachment
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAttachmentsPostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsPostValidateBeforeCall(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Object Record Attachment (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAttachmentsPostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAttachmentsPostValidateBeforeCall(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdAudittrailGet
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value from which to retrieve user actions. (required)
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAudittrailGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}/audittrail"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (formatResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format_result", formatResult));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (events != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("events", events));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdAudittrailGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAudittrailGet(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAudittrailGet(Async)");
        }

        return vobjectsObjectNameObjectRecordIdAudittrailGetCall(objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Complete Audit History for a Single Object Record
     * 
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value from which to retrieve user actions. (required)
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdAudittrailGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdAudittrailGetWithHttpInfo(objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Complete Audit History for a Single Object Record
     * 
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value from which to retrieve user actions. (required)
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdAudittrailGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAudittrailGetValidateBeforeCall(objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Complete Audit History for a Single Object Record (asynchronously)
     * 
     * @param objectName The object name__v field value. (required)
     * @param objectRecordId The object record id field value from which to retrieve user actions. (required)
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date.  (optional)
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
     * @param formatResult To request a CSV file of your audit history, use csv.  (optional)
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events. (optional)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdAudittrailGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String startDate, @javax.annotation.Nullable String endDate, @javax.annotation.Nullable String formatResult, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String events, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdAudittrailGetValidateBeforeCall(objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameObjectRecordIdGet
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdGetCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/{object_record_id}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "object_record_id" + "}", localVarApiClient.escapeString(objectRecordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameObjectRecordIdGetValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdGet(Async)");
        }

        // verify the required parameter 'objectRecordId' is set
        if (objectRecordId == null) {
            throw new ApiException("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdGet(Async)");
        }

        return vobjectsObjectNameObjectRecordIdGetCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameObjectRecordIdGet(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameObjectRecordIdGetWithHttpInfo(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameObjectRecordIdGetWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdGetValidateBeforeCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Object Record (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param objectRecordId The object record id field value. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameObjectRecordIdGetAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nonnull String objectRecordId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameObjectRecordIdGetValidateBeforeCall(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNamePost
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;. (optional)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNamePostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable Boolean xVaultAPINoTriggers, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idParam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idParam", idParam));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIMigrationMode != null) {
            localVarHeaderParams.put("X-VaultAPI-MigrationMode", localVarApiClient.parameterToString(xVaultAPIMigrationMode));
        }


        if (xVaultAPINoTriggers != null) {
            localVarHeaderParams.put("X-VaultAPI-NoTriggers", localVarApiClient.parameterToString(xVaultAPINoTriggers));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNamePostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable Boolean xVaultAPINoTriggers, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNamePost(Async)");
        }

        return vobjectsObjectNamePostCall(objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, _callback);

    }

    /**
     * Create &amp; Upsert Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;. (optional)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNamePost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable Boolean xVaultAPINoTriggers, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNamePostWithHttpInfo(objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID);
    }

    /**
     * Create &amp; Upsert Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;. (optional)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNamePostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable Boolean xVaultAPINoTriggers, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNamePostValidateBeforeCall(objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create &amp; Upsert Object Records (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;. (optional)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNamePostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String idParam, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable Boolean xVaultAPINoTriggers, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNamePostValidateBeforeCall(objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNamePut
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNamePutCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable Boolean xVaultAPINoTriggers, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIMigrationMode != null) {
            localVarHeaderParams.put("X-VaultAPI-MigrationMode", localVarApiClient.parameterToString(xVaultAPIMigrationMode));
        }


        if (xVaultAPINoTriggers != null) {
            localVarHeaderParams.put("X-VaultAPI-NoTriggers", localVarApiClient.parameterToString(xVaultAPINoTriggers));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNamePutValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable Boolean xVaultAPINoTriggers, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNamePut(Async)");
        }

        return vobjectsObjectNamePutCall(objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, _callback);

    }

    /**
     * Update Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNamePut(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable Boolean xVaultAPINoTriggers, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNamePutWithHttpInfo(objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID);
    }

    /**
     * Update Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNamePutWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable Boolean xVaultAPINoTriggers, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNamePutValidateBeforeCall(objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Object Records (asynchronously)
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.). (required)
     * @param authorization  (optional)
     * @param contentType Can be text/csv or application/json (optional)
     * @param accept Can be text/csv or application/json (optional)
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNamePutAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String accept, @javax.annotation.Nullable Boolean xVaultAPIMigrationMode, @javax.annotation.Nullable Boolean xVaultAPINoTriggers, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNamePutValidateBeforeCall(objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameRolesDelete
     * @param objectName The name of the object where you want to remove roles. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameRolesDeleteCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/roles"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameRolesDeleteValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesDelete(Async)");
        }

        return vobjectsObjectNameRolesDeleteCall(objectName, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Remove Users &amp; Groups from Roles on Object Records
     * 
     * @param objectName The name of the object where you want to remove roles. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameRolesDelete(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameRolesDeleteWithHttpInfo(objectName, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Remove Users &amp; Groups from Roles on Object Records
     * 
     * @param objectName The name of the object where you want to remove roles. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameRolesDeleteWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameRolesDeleteValidateBeforeCall(objectName, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove Users &amp; Groups from Roles on Object Records (asynchronously)
     * 
     * @param objectName The name of the object where you want to remove roles. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameRolesDeleteAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameRolesDeleteValidateBeforeCall(objectName, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsObjectNameRolesPost
     * @param objectName The name of the object where you want to remove roles. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameRolesPostCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/{object_name}/roles"
            .replace("{" + "object_name" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsObjectNameRolesPostValidateBeforeCall(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesPost(Async)");
        }

        return vobjectsObjectNameRolesPostCall(objectName, authorization, accept, contentType, xVaultAPIClientID, _callback);

    }

    /**
     * Assign Users &amp; Groups to Roles on Object Records
     * 
     * @param objectName The name of the object where you want to remove roles. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsObjectNameRolesPost(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsObjectNameRolesPostWithHttpInfo(objectName, authorization, accept, contentType, xVaultAPIClientID);
    }

    /**
     * Assign Users &amp; Groups to Roles on Object Records
     * 
     * @param objectName The name of the object where you want to remove roles. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsObjectNameRolesPostWithHttpInfo(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsObjectNameRolesPostValidateBeforeCall(objectName, authorization, accept, contentType, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Assign Users &amp; Groups to Roles on Object Records (asynchronously)
     * 
     * @param objectName The name of the object where you want to remove roles. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param contentType  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsObjectNameRolesPostAsync(@javax.annotation.Nonnull String objectName, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsObjectNameRolesPostValidateBeforeCall(objectName, authorization, accept, contentType, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vobjectsOutboundPackageVPackageIdDependenciesGet
     * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsOutboundPackageVPackageIdDependenciesGetCall(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vobjects/outbound_package__v/{package_id}/dependencies"
            .replace("{" + "package_id" + "}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }


        if (xVaultAPIClientID != null) {
            localVarHeaderParams.put("X-VaultAPI-ClientID", localVarApiClient.parameterToString(xVaultAPIClientID));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vobjectsOutboundPackageVPackageIdDependenciesGetValidateBeforeCall(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling vobjectsOutboundPackageVPackageIdDependenciesGet(Async)");
        }

        return vobjectsOutboundPackageVPackageIdDependenciesGetCall(packageId, authorization, accept, xVaultAPIClientID, _callback);

    }

    /**
     * Retrieve Outbound Package Dependencies
     * 
     * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void vobjectsOutboundPackageVPackageIdDependenciesGet(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        vobjectsOutboundPackageVPackageIdDependenciesGetWithHttpInfo(packageId, authorization, accept, xVaultAPIClientID);
    }

    /**
     * Retrieve Outbound Package Dependencies
     * 
     * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vobjectsOutboundPackageVPackageIdDependenciesGetWithHttpInfo(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID) throws ApiException {
        okhttp3.Call localVarCall = vobjectsOutboundPackageVPackageIdDependenciesGetValidateBeforeCall(packageId, authorization, accept, xVaultAPIClientID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Outbound Package Dependencies (asynchronously)
     * 
     * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies. (required)
     * @param authorization  (optional)
     * @param accept  (optional)
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vobjectsOutboundPackageVPackageIdDependenciesGetAsync(@javax.annotation.Nonnull String packageId, @javax.annotation.Nullable String authorization, @javax.annotation.Nullable String accept, @javax.annotation.Nullable String xVaultAPIClientID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vobjectsOutboundPackageVPackageIdDependenciesGetValidateBeforeCall(packageId, authorization, accept, xVaultAPIClientID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
