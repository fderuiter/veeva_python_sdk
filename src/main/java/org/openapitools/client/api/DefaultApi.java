/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;

import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.MediaType;

import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.client.model.VobjectsObjectNameActionsMergePostRequestInner;

/**
 * Veeva Vault API v25.1
 *
 * <p>The latest GA version of the Vault REST API.
 */
@RegisterRestClient
@RegisterProvider(ApiExceptionMapper.class)
@Path("")
public interface DefaultApi  {

    /**
     * Retrieve API Versions
     */
    @GET
    @Path("/api/")
    void apiGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Content File
     */
    @GET
    @Path("/api/mdl/components/{component_type_and_record_name}/files")
    void apiMdlComponentsComponentTypeAndRecordNameFilesGet(@PathParam("component_type_and_record_name") String componentTypeAndRecordName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Component Record (MDL)
     */
    @GET
    @Path("/api/mdl/components/{component_type_and_record_name}")
    void apiMdlComponentsComponentTypeAndRecordNameGet(@PathParam("component_type_and_record_name") String componentTypeAndRecordName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Asynchronous MDL Script Results
     */
    @GET
    @Path("/api/mdl/execute_async/{job_id}/results")
    void apiMdlExecuteAsyncJobIdResultsGet(@PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Execute MDL Script Asynchronously
     */
    @POST
    @Path("/api/mdl/execute_async")
    void apiMdlExecuteAsyncPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Execute MDL Script
     */
    @POST
    @Path("/api/mdl/execute")
    void apiMdlExecutePost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Upload Content File
     */
    @POST
    @Path("/api/mdl/files")
    void apiMdlFilesPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Audit Details
     */
    @GET
    @Path("/audittrail/{audit_trail_type}")
    void audittrailAuditTrailTypeGet(@PathParam("audit_trail_type") String auditTrailType, @QueryParam("start_date") String startDate, @QueryParam("end_date") String endDate, @QueryParam("all_dates") String allDates, @QueryParam("format_result") String formatResult, @QueryParam("limit") String limit, @QueryParam("offset") String offset, @QueryParam("objects") String objects, @QueryParam("events") String events, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Authentication Type Discovery
     */
    @POST
    @Path("/auth/discovery")
    void authDiscoveryPost(@HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * OAuth 2.0 / OpenID Connect
     */
    @POST
    @Path("/auth/oauth/session/{oath_oidc_profile_id}")
    void authOauthSessionOathOidcProfileIdPost(@PathParam("oath_oidc_profile_id") String oathOidcProfileId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * User Name and Password
     */
    @POST
    @Path("/auth")
    void authPost(@HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Single Source Code File
     */
    @DELETE
    @Path("/code/{class_name}")
    void codeClassNameDelete(@PathParam("class_name") String className, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Disable Vault Extension
     */
    @PUT
    @Path("/code/{class_name}/disable")
    void codeClassNameDisablePut(@PathParam("class_name") String className, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Enable Vault Extension
     */
    @PUT
    @Path("/code/{class_name}/enable")
    void codeClassNameEnablePut(@PathParam("class_name") String className, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Single Source Code File
     */
    @GET
    @Path("/code/{class_name}")
    void codeClassNameGet(@PathParam("class_name") String className, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Profiling Sessions
     */
    @GET
    @Path("/code/profiler")
    void codeProfilerGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Profiling Session
     */
    @POST
    @Path("/code/profiler")
    void codeProfilerPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * End Profiling Session
     */
    @POST
    @Path("/code/profiler/{session_name}/actions/end")
    void codeProfilerSessionNameActionsEndPost(@PathParam("session_name") String sessionName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Profiling Session
     */
    @DELETE
    @Path("/code/profiler/{session_name}")
    void codeProfilerSessionNameDelete(@PathParam("session_name") String sessionName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Profiling Session
     */
    @GET
    @Path("/code/profiler/{session_name}")
    void codeProfilerSessionNameGet(@PathParam("session_name") String sessionName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Profiling Session Results
     */
    @GET
    @Path("/code/profiler/{session_name}/results")
    void codeProfilerSessionNameResultsGet(@PathParam("session_name") String sessionName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Add or Replace Single Source Code File
     */
    @PUT
    @Path("/code")
    void codePut(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Specific Root Nodes
     */
    @POST
    @Path("/composites/trees/{edl_hierarchy_or_template}/actions/listnodes")
    void compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(@PathParam("edl_hierarchy_or_template") String edlHierarchyOrTemplate, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Root Nodes
     */
    @GET
    @Path("/composites/trees/{edl_hierarchy_or_template}")
    void compositesTreesEdlHierarchyOrTemplateGet(@PathParam("edl_hierarchy_or_template") String edlHierarchyOrTemplate, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve a Node&#39;s Children
     */
    @GET
    @Path("/composites/trees/edl_hierarchy__v/{parent_node_id}/children")
    void compositesTreesEdlHierarchyVParentNodeIdChildrenGet(@PathParam("parent_node_id") String parentNodeId, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Node Order
     */
    @PUT
    @Path("/composites/trees/edl_hierarchy__v/{parent_node_id}/children")
    void compositesTreesEdlHierarchyVParentNodeIdChildrenPut(@PathParam("parent_node_id") String parentNodeId, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Component Record (XML/JSON)
     */
    @GET
    @Path("/configuration/{component_type_and_record_name}")
    void configurationComponentTypeAndRecordNameGet(@PathParam("component_type_and_record_name") String componentTypeAndRecordName, @QueryParam("loc") String loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Component Record Collection
     */
    @GET
    @Path("/configuration/{component_type}")
    void configurationComponentTypeGet(@PathParam("component_type") String componentType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Details from a Specific Object
     */
    @GET
    @Path("/configuration/{object_name_and_object_type}")
    void configurationObjectNameAndObjectTypeGet(@PathParam("object_name_and_object_type") String objectNameAndObjectType, @QueryParam("loc") String loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Details from All Object Types
     */
    @GET
    @Path("/configuration/Objecttype")
    void configurationObjecttypeGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Lifecycle Role Assignment Override Rules
     */
    @DELETE
    @Path("/configuration/role_assignment_rule")
    void configurationRoleAssignmentRuleDelete(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
     */
    @GET
    @Path("/configuration/role_assignment_rule")
    void configurationRoleAssignmentRuleGet(@QueryParam("lifecycle__v") String lifecycleV, @QueryParam("role__v") String roleV, @QueryParam("product__v") String productV, @QueryParam("country__v") String countryV, @QueryParam("study__v") String studyV, @QueryParam("study_country__v") String studyCountryV, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Lifecycle Role Assignment Override Rules
     */
    @POST
    @Path("/configuration/role_assignment_rule")
    void configurationRoleAssignmentRulePost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Lifecycle Role Assignment Rules (Default &amp; Override)
     */
    @PUT
    @Path("/configuration/role_assignment_rule")
    void configurationRoleAssignmentRulePut(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Initiate Delegated Session
     */
    @POST
    @Path("/delegation/login")
    void delegationLoginPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Delegations
     */
    @GET
    @Path("/delegation/vaults")
    void delegationVaultsGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Session Keep Alive
     */
    @POST
    @Path("/keep-alive")
    void keepAlivePost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Limits on Objects
     */
    @GET
    @Path("/limits")
    void limitsGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Daily API Usage
     */
    @GET
    @Path("/logs/api_usage")
    void logsApiUsageGet(@QueryParam("date") String date, @QueryParam("log_format") String logFormat, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Debug Logs
     */
    @GET
    @Path("/logs/code/debug")
    void logsCodeDebugGet(@QueryParam("user_id") String userId, @QueryParam("include_inactive") Boolean includeInactive, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Debug Log
     */
    @DELETE
    @Path("/logs/code/debug/{id}/actions/reset")
    void logsCodeDebugIdActionsResetDelete(@PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Reset Debug Log
     */
    @POST
    @Path("/logs/code/debug/{id}/actions/reset")
    void logsCodeDebugIdActionsResetPost(@PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Debug Log Files
     */
    @GET
    @Path("/logs/code/debug/{id}/files")
    void logsCodeDebugIdFilesGet(@PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Single Debug Log
     */
    @GET
    @Path("/logs/code/debug/{id}")
    void logsCodeDebugIdGet(@PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Debug Log
     */
    @POST
    @Path("/logs/code/debug")
    void logsCodeDebugPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download SDK Runtime Log
     */
    @GET
    @Path("/logs/code/runtime")
    void logsCodeRuntimeGet(@QueryParam("date") String date, @QueryParam("log_format") String logFormat, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Import Bulk Translation File
     */
    @POST
    @Path("/messages/{message_type}/actions/import")
    void messagesMessageTypeActionsImportPost(@PathParam("message_type") String messageType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Export Bulk Translation File
     */
    @POST
    @Path("/messages/{message_type}/language/{lang}/actions/export")
    void messagesMessageTypeLanguageLangActionsExportPost(@PathParam("message_type") String messageType, @PathParam("lang") String lang, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Audit Metadata
     */
    @GET
    @Path("/metadata/audittrail/{audit_trail_type}")
    void metadataAudittrailAuditTrailTypeGet(@PathParam("audit_trail_type") String auditTrailType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Audit Types
     */
    @GET
    @Path("/metadata/audittrail")
    void metadataAudittrailGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Component Type Metadata
     */
    @GET
    @Path("/metadata/components/{component_type}")
    void metadataComponentsComponentTypeGet(@PathParam("component_type") String componentType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Component Metadata
     */
    @GET
    @Path("/metadata/components")
    void metadataComponentsGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder Template Node Metadata
     */
    @GET
    @Path("/metadata/objects/binders/templates/bindernodes")
    void metadataObjectsBindersTemplatesBindernodesGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder Template Metadata
     */
    @GET
    @Path("/metadata/objects/binders/templates")
    void metadataObjectsBindersTemplatesGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Annotation Placemark Type Metadata
     */
    @GET
    @Path("/metadata/objects/documents/annotations/placemarks/types/{placemark_type}")
    void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(@PathParam("placemark_type") String placemarkType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Annotation Reference Type Metadata
     */
    @GET
    @Path("/metadata/objects/documents/annotations/references/types/{reference_type}")
    void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(@PathParam("reference_type") String referenceType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Annotation Type Metadata
     */
    @GET
    @Path("/metadata/objects/documents/annotations/types/{annotation_type}")
    void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(@PathParam("annotation_type") String annotationType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Event SubType Metadata
     */
    @GET
    @Path("/metadata/objects/documents/events/{event_type}/types/{event_subtype}")
    void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(@PathParam("event_type") String eventType, @PathParam("event_subtype") String eventSubtype, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Event Types and Subtypes
     */
    @GET
    @Path("/metadata/objects/documents/events")
    void metadataObjectsDocumentsEventsGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Lock Metadata
     */
    @GET
    @Path("/metadata/objects/documents/lock")
    void metadataObjectsDocumentsLockGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Common Document Fields
     */
    @POST
    @Path("/metadata/objects/documents/properties/find_common")
    void metadataObjectsDocumentsPropertiesFindCommonPost(@HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Document Fields
     */
    @GET
    @Path("/metadata/objects/documents/properties")
    void metadataObjectsDocumentsPropertiesGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Template Metadata
     */
    @GET
    @Path("/metadata/objects/documents/templates")
    void metadataObjectsDocumentsTemplatesGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Document Types
     */
    @GET
    @Path("/metadata/objects/documents/types")
    void metadataObjectsDocumentsTypesGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Type
     */
    @GET
    @Path("/metadata/objects/documents/types/{type}")
    void metadataObjectsDocumentsTypesTypeGet(@PathParam("type") String type, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Type Relationships
     */
    @GET
    @Path("/metadata/objects/documents/types/{type}/relationships")
    void metadataObjectsDocumentsTypesTypeRelationshipsGet(@PathParam("type") String type, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Classification
     */
    @GET
    @Path("/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}")
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(@PathParam("type") String type, @PathParam("subtype") String subtype, @PathParam("classification") String classification, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Subtype
     */
    @GET
    @Path("/metadata/objects/documents/types/{type}/subtypes/{subtype}")
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(@PathParam("type") String type, @PathParam("subtype") String subtype, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Group Metadata
     */
    @GET
    @Path("/metadata/objects/groups")
    void metadataObjectsGroupsGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Security Policy Metadata
     */
    @GET
    @Path("/metadata/objects/securitypolicies")
    void metadataObjectsSecuritypoliciesGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve User Metadata
     */
    @GET
    @Path("/metadata/objects/users")
    void metadataObjectsUsersGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Archived Document Signature Metadata
     */
    @GET
    @Path("/metadata/query/archived_documents/relationships/document_signature__sysr")
    void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Signature Metadata
     */
    @GET
    @Path("/metadata/query/documents/relationships/document_signature__sysr")
    void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Object Collection
     */
    @GET
    @Path("/metadata/vobjects")
    void metadataVobjectsGet(@QueryParam("loc") Boolean loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Cancel Raw Object Deployment
     */
    @POST
    @Path("/metadata/vobjects/{object_name}/actions/canceldeployment")
    void metadataVobjectsObjectNameActionsCanceldeploymentPost(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Object Field Metadata
     */
    @GET
    @Path("/metadata/vobjects/{object_name}/fields/{object_field_name}")
    void metadataVobjectsObjectNameFieldsObjectFieldNameGet(@PathParam("object_name") String objectName, @PathParam("object_field_name") String objectFieldName, @QueryParam("loc") Boolean loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Object Metadata
     */
    @GET
    @Path("/metadata/vobjects/{object_name}")
    void metadataVobjectsObjectNameGet(@PathParam("object_name") String objectName, @QueryParam("loc") Boolean loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Page Layouts
     */
    @GET
    @Path("/metadata/vobjects/{object_name}/page_layouts")
    void metadataVobjectsObjectNamePageLayoutsGet(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Page Layout Metadata
     */
    @GET
    @Path("/metadata/vobjects/{object_name}/page_layouts/{layout_name}")
    void metadataVobjectsObjectNamePageLayoutsLayoutNameGet(@PathParam("object_name") String objectName, @PathParam("layout_name") String layoutName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Email Notification Histories
     */
    @GET
    @Path("/notifications/histories")
    void notificationsHistoriesGet(@QueryParam("start_date") String startDate, @QueryParam("end_date") String endDate, @QueryParam("all_dates") Boolean allDates, @QueryParam("format_result") String formatResult, @QueryParam("limit") String limit, @QueryParam("offset") String offset, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Bulk Workflow Action Details
     */
    @GET
    @Path("/object/workflow/actions/{action}")
    void objectWorkflowActionsActionGet(@PathParam("action") String action, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Initiate Workflow Actions on Multiple Workflows
     */
    @POST
    @Path("/object/workflow/actions/{action}")
    void objectWorkflowActionsActionPost(@PathParam("action") String action, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Cancel Workflow Tasks
     */
    @POST
    @Path("/object/workflow/actions/canceltasks")
    void objectWorkflowActionsCanceltasksPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Cancel Workflows
     */
    @POST
    @Path("/object/workflow/actions/cancelworkflows")
    void objectWorkflowActionsCancelworkflowsPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Bulk Workflow Actions
     */
    @GET
    @Path("/object/workflow/actions")
    void objectWorkflowActionsGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Reassign Workflow Tasks
     */
    @POST
    @Path("/object/workflow/actions/reassigntasks")
    void objectWorkflowActionsReassigntasksPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Replace Workflow Owner
     */
    @POST
    @Path("/object/workflow/actions/replaceworkflowowner")
    void objectWorkflowActionsReplaceworkflowownerPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder Export Results
     */
    @GET
    @Path("/objects/binders/actions/export/{job_id}/results")
    void objectsBindersActionsExportJobIdResultsGet(@PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Export Binder (Latest Version)
     */
    @POST
    @Path("/objects/binders/{binder_id}/actions/export")
    void objectsBindersBinderIdActionsExportPost(@PathParam("binder_id") String binderId, @QueryParam("source") Boolean source, @QueryParam("renditiontype") String renditiontype, @QueryParam("docversion") String docversion, @QueryParam("attachments") String attachments, @QueryParam("export") String export, @QueryParam("docfield") Boolean docfield, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Refresh Binder Auto-Filing
     */
    @POST
    @Path("/objects/binders/{binder_id}/actions")
    void objectsBindersBinderIdActionsPost(@PathParam("binder_id") String binderId, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Binding Rule
     */
    @PUT
    @Path("/objects/binders/{binder_id}/binding_rule")
    void objectsBindersBinderIdBindingRulePut(@PathParam("binder_id") String binderId, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Binder
     */
    @DELETE
    @Path("/objects/binders/{binder_id}")
    void objectsBindersBinderIdDelete(@PathParam("binder_id") String binderId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Binder Document Binding Rule
     */
    @PUT
    @Path("/objects/binders/{binder_id}/documents/{node_id}/binding_rule")
    void objectsBindersBinderIdDocumentsNodeIdBindingRulePut(@PathParam("binder_id") String binderId, @PathParam("node_id") String nodeId, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Add Document to Binder
     */
    @POST
    @Path("/objects/binders/{binder_id}/documents")
    void objectsBindersBinderIdDocumentsPost(@PathParam("binder_id") String binderId, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Remove Document from Binder
     */
    @DELETE
    @Path("/objects/binders/{binder_id}/documents/{section_id}")
    void objectsBindersBinderIdDocumentsSectionIdDelete(@PathParam("binder_id") String binderId, @PathParam("section_id") String sectionId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Move Document in Binder
     */
    @PUT
    @Path("/objects/binders/{binder_id}/documents/{section_id}")
    void objectsBindersBinderIdDocumentsSectionIdPut(@PathParam("binder_id") String binderId, @PathParam("section_id") String sectionId, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder
     */
    @GET
    @Path("/objects/binders/{binder_id}")
    void objectsBindersBinderIdGet(@PathParam("binder_id") String binderId, @QueryParam("depth") String depth, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Binder Version
     */
    @POST
    @Path("/objects/binders/{binder_id}")
    void objectsBindersBinderIdPost(@PathParam("binder_id") String binderId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Binder
     */
    @PUT
    @Path("/objects/binders/{binder_id}")
    void objectsBindersBinderIdPut(@PathParam("binder_id") String binderId, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Remove Users &amp; Groups from Roles on a Single Binder
     */
    @DELETE
    @Path("/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}")
    void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(@PathParam("binder_id") String binderId, @PathParam("role_name_and_user_or_group") String roleNameAndUserOrGroup, @PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Binder Section Binding Rule
     */
    @PUT
    @Path("/objects/binders/{binder_id}/sections/{node_id}/binding_rule")
    void objectsBindersBinderIdSectionsNodeIdBindingRulePut(@PathParam("binder_id") String binderId, @PathParam("node_id") String nodeId, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Binder Section
     */
    @PUT
    @Path("/objects/binders/{binder_id}/sections/{node_id}")
    void objectsBindersBinderIdSectionsNodeIdPut(@PathParam("binder_id") String binderId, @PathParam("node_id") String nodeId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Binder Section
     */
    @POST
    @Path("/objects/binders/{binder_id}/sections")
    void objectsBindersBinderIdSectionsPost(@PathParam("binder_id") String binderId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Binder Section
     */
    @DELETE
    @Path("/objects/binders/{binder_id}/sections/{section_id}")
    void objectsBindersBinderIdSectionsSectionIdDelete(@PathParam("binder_id") String binderId, @PathParam("section_id") String sectionId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder Sections
     */
    @GET
    @Path("/objects/binders/{binder_id}/sections/{section_id}")
    void objectsBindersBinderIdSectionsSectionIdGet(@PathParam("binder_id") String binderId, @PathParam("section_id") String sectionId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Binder Versions
     */
    @GET
    @Path("/objects/binders/{binder_id}/versions")
    void objectsBindersBinderIdVersionsGet(@PathParam("binder_id") String binderId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Export Binder (Specific Version)
     */
    @POST
    @Path("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(@PathParam("binder_id") String binderId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @QueryParam("source") Boolean source, @QueryParam("renditiontype") String renditiontype, @QueryParam("docversion") String docversion, @QueryParam("attachments") String attachments, @QueryParam("export") String export, @QueryParam("docfield") Boolean docfield, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Binder Version
     */
    @DELETE
    @Path("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(@PathParam("binder_id") String binderId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder Version
     */
    @GET
    @Path("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(@PathParam("binder_id") String binderId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Binder Version
     */
    @PUT
    @Path("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(@PathParam("binder_id") String binderId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Binder Relationship
     */
    @POST
    @Path("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(@PathParam("binder_id") String binderId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Binder Relationship
     */
    @DELETE
    @Path("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(@PathParam("binder_id") String binderId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("relationship_id") String relationshipId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder Relationship
     */
    @GET
    @Path("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(@PathParam("binder_id") String binderId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("relationship_id") String relationshipId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder Version Section
     */
    @GET
    @Path("/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(@PathParam("binder_id") String binderId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("section_id") String sectionId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Binder Roles
     */
    @GET
    @Path("/objects/binders/{id}/roles")
    void objectsBindersIdRolesGet(@PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Assign Users &amp; Groups to Roles on a Single Binder
     */
    @POST
    @Path("/objects/binders/{id}/roles")
    void objectsBindersIdRolesPost(@PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Role
     */
    @GET
    @Path("/objects/binders/{id}/roles/{role_name}")
    void objectsBindersIdRolesRoleNameGet(@PathParam("id") String id, @PathParam("role_name") String roleName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder User Actions
     */
    @GET
    @Path("/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions")
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(@PathParam("id") String id, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder Entry Criteria
     */
    @GET
    @Path("/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements")
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(@PathParam("id") String id, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("name__v") String nameV, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Initiate Binder User Action
     */
    @PUT
    @Path("/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}")
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(@PathParam("id") String id, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("name__v") String nameV, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve User Actions on Multiple Binders
     */
    @POST
    @Path("/objects/binders/lifecycle_actions")
    void objectsBindersLifecycleActionsPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Initiate Bulk Binder User Actions
     */
    @PUT
    @Path("/objects/binders/lifecycle_actions/{user_action_name}")
    void objectsBindersLifecycleActionsUserActionNamePut(@PathParam("user_action_name") String userActionName, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Binder
     */
    @POST
    @Path("/objects/binders")
    void objectsBindersPost(@QueryParam("async") Boolean async, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder Template Collection
     */
    @GET
    @Path("/objects/binders/templates")
    void objectsBindersTemplatesGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Binder Template
     */
    @POST
    @Path("/objects/binders/templates")
    void objectsBindersTemplatesPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Binder Template
     */
    @PUT
    @Path("/objects/binders/templates")
    void objectsBindersTemplatesPut(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder Template Node Attributes
     */
    @GET
    @Path("/objects/binders/templates/{template_name}/bindernodes")
    void objectsBindersTemplatesTemplateNameBindernodesGet(@PathParam("template_name") String templateName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Binder Template Node
     */
    @POST
    @Path("/objects/binders/templates/{template_name}/bindernodes")
    void objectsBindersTemplatesTemplateNameBindernodesPost(@PathParam("template_name") String templateName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Replace Binder Template Nodes
     */
    @PUT
    @Path("/objects/binders/templates/{template_name}/bindernodes")
    void objectsBindersTemplatesTemplateNameBindernodesPut(@PathParam("template_name") String templateName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Binder Template
     */
    @DELETE
    @Path("/objects/binders/templates/{template_name}")
    void objectsBindersTemplatesTemplateNameDelete(@PathParam("template_name") String templateName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Binder Template Attributes
     */
    @GET
    @Path("/objects/binders/templates/{template_name}")
    void objectsBindersTemplatesTemplateNameGet(@PathParam("template_name") String templateName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Deleted Document IDs
     */
    @GET
    @Path("/objects/deletions/documents")
    void objectsDeletionsDocumentsGet(@QueryParam("start_date") String startDate, @QueryParam("end_date") String endDate, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Deleted Object Record ID
     */
    @GET
    @Path("/objects/deletions/vobjects/{object_name}")
    void objectsDeletionsVobjectsObjectNameGet(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Document Workflows
     */
    @GET
    @Path("/objects/documents/actions")
    void objectsDocumentsActionsGet(@QueryParam("loc") Boolean loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Controlled Copy Job Results
     */
    @GET
    @Path("/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results")
    void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(@PathParam("lifecycle_and_state_and_action") String lifecycleAndStateAndAction, @PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Workflow Details
     */
    @GET
    @Path("/objects/documents/actions/{workflow_name}")
    void objectsDocumentsActionsWorkflowNameGet(@PathParam("workflow_name") String workflowName, @QueryParam("loc") Boolean loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Initiate Document Workflow
     */
    @POST
    @Path("/objects/documents/actions/{workflow_name}")
    void objectsDocumentsActionsWorkflowNamePost(@PathParam("workflow_name") String workflowName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Annotations
     */
    @DELETE
    @Path("/objects/documents/annotations/batch")
    void objectsDocumentsAnnotationsBatchDelete(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Multiple Annotations
     */
    @POST
    @Path("/objects/documents/annotations/batch")
    void objectsDocumentsAnnotationsBatchPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Annotations
     */
    @PUT
    @Path("/objects/documents/annotations/batch")
    void objectsDocumentsAnnotationsBatchPut(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Add Annotation Replies
     */
    @POST
    @Path("/objects/documents/annotations/replies/batch")
    void objectsDocumentsAnnotationsRepliesBatchPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Multiple Document Attachments
     */
    @DELETE
    @Path("/objects/documents/attachments/batch")
    void objectsDocumentsAttachmentsBatchDelete(@HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Multiple Document Attachments
     */
    @POST
    @Path("/objects/documents/attachments/batch")
    void objectsDocumentsAttachmentsBatchPost(@HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Multiple Document Attachment Descriptions
     */
    @PUT
    @Path("/objects/documents/attachments/batch")
    void objectsDocumentsAttachmentsBatchPut(@HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Export Results
     */
    @GET
    @Path("/objects/documents/batch/actions/fileextract/{job_id}/results")
    void objectsDocumentsBatchActionsFileextractJobIdResultsGet(@PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Export Documents
     */
    @POST
    @Path("/objects/documents/batch/actions/fileextract")
    void objectsDocumentsBatchActionsFileextractPost(@QueryParam("source") Boolean source, @QueryParam("renditions") Boolean renditions, @QueryParam("allversions") Boolean allversions, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Reclassify Multiple Documents
     */
    @PUT
    @Path("/objects/documents/batch/actions/reclassify")
    void objectsDocumentsBatchActionsReclassifyPut(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-MigrationMode") Boolean xVaultAPIMigrationMode, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Multiple Document Renditions
     */
    @POST
    @Path("/objects/documents/batch/actions/rerender")
    void objectsDocumentsBatchActionsRerenderPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Multiple Documents
     */
    @DELETE
    @Path("/objects/documents/batch")
    void objectsDocumentsBatchDelete(@QueryParam("idParam") String idParam, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Undo Collaborative Authoring Checkout
     */
    @DELETE
    @Path("/objects/documents/batch/lock")
    void objectsDocumentsBatchLockDelete(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Multiple Documents
     */
    @POST
    @Path("/objects/documents/batch")
    void objectsDocumentsBatchPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-MigrationMode") Boolean xVaultAPIMigrationMode, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Multiple Documents
     */
    @PUT
    @Path("/objects/documents/batch")
    void objectsDocumentsBatchPut(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-MigrationMode") Boolean xVaultAPIMigrationMode, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Anchor IDs
     */
    @GET
    @Path("/objects/documents/{doc_id}/anchors")
    void objectsDocumentsDocIdAnchorsGet(@PathParam("doc_id") String docId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Export Document Annotations to PDF
     */
    @GET
    @Path("/objects/documents/{doc_id}/annotations/file")
    void objectsDocumentsDocIdAnnotationsFileGet(@PathParam("doc_id") String docId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Import Document Annotations from PDF
     */
    @POST
    @Path("/objects/documents/{doc_id}/annotations/file")
    void objectsDocumentsDocIdAnnotationsFilePost(@PathParam("doc_id") String docId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Single Document Attachment
     */
    @DELETE
    @Path("/objects/documents/{doc_id}/attachments/{attachment_id}")
    void objectsDocumentsDocIdAttachmentsAttachmentIdDelete(@PathParam("doc_id") String docId, @PathParam("attachment_id") String attachmentId, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Document Attachment
     */
    @GET
    @Path("/objects/documents/{doc_id}/attachments/{attachment_id}/file")
    void objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(@PathParam("doc_id") String docId, @PathParam("attachment_id") String attachmentId, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Attachment Metadata
     */
    @GET
    @Path("/objects/documents/{doc_id}/attachments/{attachment_id}")
    void objectsDocumentsDocIdAttachmentsAttachmentIdGet(@PathParam("doc_id") String docId, @PathParam("attachment_id") String attachmentId, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Document Attachment Description
     */
    @PUT
    @Path("/objects/documents/{doc_id}/attachments/{attachment_id}")
    void objectsDocumentsDocIdAttachmentsAttachmentIdPut(@PathParam("doc_id") String docId, @PathParam("attachment_id") String attachmentId, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Single Document Attachment Version
     */
    @DELETE
    @Path("/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(@PathParam("doc_id") String docId, @PathParam("attachment_id") String attachmentId, @PathParam("attachment_version") String attachmentVersion, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Document Attachment Version
     */
    @GET
    @Path("/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(@PathParam("doc_id") String docId, @PathParam("attachment_id") String attachmentId, @PathParam("attachment_version") String attachmentVersion, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Attachment Version Metadata
     */
    @GET
    @Path("/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(@PathParam("doc_id") String docId, @PathParam("attachment_id") String attachmentId, @PathParam("attachment_version") String attachmentVersion, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Restore Document Attachment Version
     */
    @POST
    @Path("/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(@PathParam("doc_id") String docId, @PathParam("attachment_id") String attachmentId, @PathParam("attachment_version") String attachmentVersion, @QueryParam("restore") Boolean restore, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Attachment Versions
     */
    @GET
    @Path("/objects/documents/{doc_id}/attachments/{attachment_id}/versions")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(@PathParam("doc_id") String docId, @PathParam("attachment_id") String attachmentId, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download All Document Attachments
     */
    @GET
    @Path("/objects/documents/{doc_id}/attachments/file")
    void objectsDocumentsDocIdAttachmentsFileGet(@PathParam("doc_id") String docId, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Attachments
     */
    @GET
    @Path("/objects/documents/{doc_id}/attachments")
    void objectsDocumentsDocIdAttachmentsGet(@PathParam("doc_id") String docId, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Document Attachment
     */
    @POST
    @Path("/objects/documents/{doc_id}/attachments")
    void objectsDocumentsDocIdAttachmentsPost(@PathParam("doc_id") String docId, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Complete Audit History for a Single Document
     */
    @GET
    @Path("/objects/documents/{doc_id}/audittrail")
    void objectsDocumentsDocIdAudittrailGet(@PathParam("doc_id") String docId, @QueryParam("start_date") String startDate, @QueryParam("end_date") String endDate, @QueryParam("format_result") String formatResult, @QueryParam("limit") String limit, @QueryParam("offset") String offset, @QueryParam("events") String events, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Single Document
     */
    @DELETE
    @Path("/objects/documents/{doc_id}")
    void objectsDocumentsDocIdDelete(@PathParam("doc_id") String docId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Events
     */
    @GET
    @Path("/objects/documents/{doc_id}/events")
    void objectsDocumentsDocIdEventsGet(@PathParam("doc_id") String docId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Document File
     */
    @GET
    @Path("/objects/documents/{doc_id}/file")
    void objectsDocumentsDocIdFileGet(@PathParam("doc_id") String docId, @QueryParam("lockDocument") Boolean lockDocument, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document
     */
    @GET
    @Path("/objects/documents/{doc_id}")
    void objectsDocumentsDocIdGet(@PathParam("doc_id") String docId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Document Lock
     */
    @DELETE
    @Path("/objects/documents/{doc_id}/lock")
    void objectsDocumentsDocIdLockDelete(@PathParam("doc_id") String docId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Lock
     */
    @GET
    @Path("/objects/documents/{doc_id}/lock")
    void objectsDocumentsDocIdLockGet(@PathParam("doc_id") String docId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Document Lock
     */
    @POST
    @Path("/objects/documents/{doc_id}/lock")
    void objectsDocumentsDocIdLockPost(@PathParam("doc_id") String docId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download All Document Version Attachments
     */
    @GET
    @Path("/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file")
    void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Single Document Version
     */
    @POST
    @Path("/objects/documents/{doc_id}")
    void objectsDocumentsDocIdPost(@PathParam("doc_id") String docId, @QueryParam("suppressRendition") String suppressRendition, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Single Document
     */
    @PUT
    @Path("/objects/documents/{doc_id}")
    void objectsDocumentsDocIdPut(@PathParam("doc_id") String docId, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-MigrationMode") Boolean xVaultAPIMigrationMode, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Renditions
     */
    @GET
    @Path("/objects/documents/{doc_id}/renditions")
    void objectsDocumentsDocIdRenditionsGet(@PathParam("doc_id") String docId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Single Document Rendition
     */
    @DELETE
    @Path("/objects/documents/{doc_id}/renditions/{rendition_type}")
    void objectsDocumentsDocIdRenditionsRenditionTypeDelete(@PathParam("doc_id") String docId, @PathParam("rendition_type") String renditionType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Document Rendition File
     */
    @GET
    @Path("/objects/documents/{doc_id}/renditions/{rendition_type}")
    void objectsDocumentsDocIdRenditionsRenditionTypeGet(@PathParam("doc_id") String docId, @PathParam("rendition_type") String renditionType, @QueryParam("steadyState") String steadyState, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Add Single Document Rendition
     */
    @POST
    @Path("/objects/documents/{doc_id}/renditions/{rendition_type}")
    void objectsDocumentsDocIdRenditionsRenditionTypePost(@PathParam("doc_id") String docId, @PathParam("rendition_type") String renditionType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Replace Document Rendition
     */
    @PUT
    @Path("/objects/documents/{doc_id}/renditions/{rendition_type}")
    void objectsDocumentsDocIdRenditionsRenditionTypePut(@PathParam("doc_id") String docId, @PathParam("rendition_type") String renditionType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Remove Users &amp; Groups from Roles on a Single Document
     */
    @DELETE
    @Path("/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}")
    void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(@PathParam("doc_id") String docId, @PathParam("role_name_and_user_or_group") String roleNameAndUserOrGroup, @PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Version Attachments
     */
    @GET
    @Path("/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments")
    void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Versions
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions")
    void objectsDocumentsDocIdVersionsGet(@PathParam("doc_id") String docId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Read Annotations by ID
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("annotation_id") String annotationId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Read Replies of Parent Annotation
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("annotation_id") String annotationId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Export Document Version Annotations to PDF
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Import Document Version Annotations from PDF
     */
    @POST
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Read Annotations by Document Version and Type
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @QueryParam("limit") String limit, @QueryParam("offset") String offset, @QueryParam("annotation_types") String annotationTypes, @QueryParam("pagination_id") String paginationId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Document Version Attachment Version
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("attachment_id") String attachmentId, @PathParam("attachment_version") String attachmentVersion, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Version Attachment Versions
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("attachment_id") String attachmentId, @PathParam("attachment_version") String attachmentVersion, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Single Document Version
     */
    @DELETE
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Version Notes as CSV
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Document Event
     */
    @POST
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Video Annotations
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Document Version File
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Version
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Document Version
     */
    @PUT
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-MigrationMode") Boolean xVaultAPIMigrationMode, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Relationships
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Single Document Relationship
     */
    @POST
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Single Document Relationship
     */
    @DELETE
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("relationship_id") String relationshipId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Relationship
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("relationship_id") String relationshipId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Version Renditions
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Document Version Rendition
     */
    @DELETE
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("rendition_type") String renditionType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Document Version Rendition File
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("rendition_type") String renditionType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Upload Document Version Rendition
     */
    @POST
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("rendition_type") String renditionType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Replace Document Version Rendition
     */
    @PUT
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("rendition_type") String renditionType, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Document Version Thumbnail File
     */
    @GET
    @Path("/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(@PathParam("doc_id") String docId, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Documents
     */
    @GET
    @Path("/objects/documents")
    void objectsDocumentsGet(@QueryParam("named_filter") String namedFilter, @QueryParam("scope") String scope, @QueryParam("versionscope") String versionscope, @QueryParam("search") String search, @QueryParam("limit") String limit, @QueryParam("sort") String sort, @QueryParam("start") String start, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Document Roles
     */
    @GET
    @Path("/objects/documents/{id}/roles")
    void objectsDocumentsIdRolesGet(@PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Assign Users &amp; Groups to Roles on a Single Document
     */
    @POST
    @Path("/objects/documents/{id}/roles")
    void objectsDocumentsIdRolesPost(@PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Role
     */
    @GET
    @Path("/objects/documents/{id}/roles/{role_name}")
    void objectsDocumentsIdRolesRoleNameGet(@PathParam("id") String id, @PathParam("role_name") String roleName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document User Actions
     */
    @GET
    @Path("/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions")
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(@PathParam("id") String id, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Entry Criteria
     */
    @GET
    @Path("/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements")
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(@PathParam("id") String id, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("name__v") String nameV, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Initiate Document User Action
     */
    @PUT
    @Path("/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}")
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(@PathParam("id") String id, @PathParam("major_version") String majorVersion, @PathParam("minor_version") String minorVersion, @PathParam("name__v") String nameV, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve User Actions on Multiple Documents
     */
    @POST
    @Path("/objects/documents/lifecycle_actions")
    void objectsDocumentsLifecycleActionsPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Initiate Bulk Document User Actions
     */
    @PUT
    @Path("/objects/documents/lifecycle_actions/{user_action_name}")
    void objectsDocumentsLifecycleActionsUserActionNamePut(@PathParam("user_action_name") String userActionName, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Single Document
     */
    @POST
    @Path("/objects/documents")
    void objectsDocumentsPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-MigrationMode") Boolean xVaultAPIMigrationMode, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Multiple Document Relationships
     */
    @DELETE
    @Path("/objects/documents/relationships/batch")
    void objectsDocumentsRelationshipsBatchDelete(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Multiple Document Relationships
     */
    @POST
    @Path("/objects/documents/relationships/batch")
    void objectsDocumentsRelationshipsBatchPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Multiple Document Renditions
     */
    @DELETE
    @Path("/objects/documents/renditions/batch")
    void objectsDocumentsRenditionsBatchDelete(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Add Multiple Document Renditions
     */
    @POST
    @Path("/objects/documents/renditions/batch")
    void objectsDocumentsRenditionsBatchPost(@QueryParam("idParam") String idParam, @QueryParam("largeSizeAsset") String largeSizeAsset, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-MigrationMode") Boolean xVaultAPIMigrationMode, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Remove Users and Groups from Roles on Multiple Documents &amp; Binders
     */
    @DELETE
    @Path("/objects/documents/roles/batch")
    void objectsDocumentsRolesBatchDelete(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
     */
    @POST
    @Path("/objects/documents/roles/batch")
    void objectsDocumentsRolesBatchPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Template Collection
     */
    @GET
    @Path("/objects/documents/templates")
    void objectsDocumentsTemplatesGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Single Document Template
     */
    @POST
    @Path("/objects/documents/templates")
    void objectsDocumentsTemplatesPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Multiple Document Templates
     */
    @PUT
    @Path("/objects/documents/templates")
    void objectsDocumentsTemplatesPut(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Basic Document Template
     */
    @DELETE
    @Path("/objects/documents/templates/{template_name}")
    void objectsDocumentsTemplatesTemplateNameDelete(@PathParam("template_name") String templateName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Document Template File
     */
    @GET
    @Path("/objects/documents/templates/{template_name}/file")
    void objectsDocumentsTemplatesTemplateNameFileGet(@PathParam("template_name") String templateName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Document Template Attributes
     */
    @GET
    @Path("/objects/documents/templates/{template_name}")
    void objectsDocumentsTemplatesTemplateNameGet(@PathParam("template_name") String templateName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Single Document Template
     */
    @PUT
    @Path("/objects/documents/templates/{template_name}")
    void objectsDocumentsTemplatesTemplateNamePut(@PathParam("template_name") String templateName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Document Tokens
     */
    @POST
    @Path("/objects/documents/tokens")
    void objectsDocumentsTokensPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Export Document Versions
     */
    @POST
    @Path("/objects/documents/versions/batch/actions/fileextract")
    void objectsDocumentsVersionsBatchActionsFileextractPost(@QueryParam("source") Boolean source, @QueryParam("renditions") Boolean renditions, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Multiple Document Versions
     */
    @DELETE
    @Path("/objects/documents/versions/batch")
    void objectsDocumentsVersionsBatchDelete(@QueryParam("idParam") String idParam, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Multiple Document Versions
     */
    @POST
    @Path("/objects/documents/versions/batch")
    void objectsDocumentsVersionsBatchPost(@QueryParam("idParam") String idParam, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-MigrationMode") String xVaultAPIMigrationMode, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Domain Information
     */
    @GET
    @Path("/objects/domain")
    void objectsDomainGet(@QueryParam("include_application") Boolean includeApplication, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Domains
     */
    @GET
    @Path("/objects/domains")
    void objectsDomainsGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Add EDL Matched Documents
     */
    @POST
    @Path("/objects/edl_matched_documents/batch/actions/add")
    void objectsEdlMatchedDocumentsBatchActionsAddPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Remove EDL Matched Documents
     */
    @POST
    @Path("/objects/edl_matched_documents/batch/actions/remove")
    void objectsEdlMatchedDocumentsBatchActionsRemovePost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Auto Managed Groups
     */
    @GET
    @Path("/objects/groups/auto")
    void objectsGroupsAutoGet(@QueryParam("limit") String limit, @QueryParam("offset") String offset, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Groups
     */
    @GET
    @Path("/objects/groups")
    void objectsGroupsGet(@QueryParam("includeImplied") String includeImplied, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Group
     */
    @DELETE
    @Path("/objects/groups/{group_id}")
    void objectsGroupsGroupIdDelete(@PathParam("group_id") String groupId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Group
     */
    @GET
    @Path("/objects/groups/{group_id}")
    void objectsGroupsGroupIdGet(@PathParam("group_id") String groupId, @QueryParam("includeImplied") Boolean includeImplied, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Group
     */
    @PUT
    @Path("/objects/groups/{group_id}")
    void objectsGroupsGroupIdPut(@PathParam("group_id") String groupId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Group 
     */
    @POST
    @Path("/objects/groups")
    void objectsGroupsPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Application License Usage
     */
    @GET
    @Path("/objects/licenses")
    void objectsLicensesGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Multi-Record Workflows
     */
    @GET
    @Path("/objects/objectworkflows/actions")
    void objectsObjectworkflowsActionsGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Multi-Record Workflow Details
     */
    @GET
    @Path("/objects/objectworkflows/actions/{workflow_name}")
    void objectsObjectworkflowsActionsWorkflowNameGet(@PathParam("workflow_name") String workflowName, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Initiate Multi-Record Workflow
     */
    @POST
    @Path("/objects/objectworkflows/actions/{workflow_name}")
    void objectsObjectworkflowsActionsWorkflowNamePost(@PathParam("workflow_name") String workflowName, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Workflows
     */
    @GET
    @Path("/objects/objectworkflows")
    void objectsObjectworkflowsGet(@QueryParam("object__v") String objectV, @QueryParam("record_id__v") String recordIdV, @QueryParam("participant") String participant, @QueryParam("status__v") String statusV, @QueryParam("offset") String offset, @QueryParam("page_size") String pageSize, @QueryParam("loc") String loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Workflow Tasks
     */
    @GET
    @Path("/objects/objectworkflows/tasks")
    void objectsObjectworkflowsTasksGet(@QueryParam("object__v") String objectV, @QueryParam("record_id__v") String recordIdV, @QueryParam("assignee__v") String assigneeV, @QueryParam("status__v") String statusV, @QueryParam("offset") String offset, @QueryParam("page_size") String pageSize, @QueryParam("loc") String loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Accept Single Record Workflow Task
     */
    @POST
    @Path("/objects/objectworkflows/tasks/{task_id}/actions/accept")
    void objectsObjectworkflowsTasksTaskIdActionsAcceptPost(@PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Cancel Workflow Task
     */
    @POST
    @Path("/objects/objectworkflows/tasks/{task_id}/actions/cancel")
    void objectsObjectworkflowsTasksTaskIdActionsCancelPost(@PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Complete Single Record Workflow Task
     */
    @POST
    @Path("/objects/objectworkflows/tasks/{task_id}/actions/complete")
    void objectsObjectworkflowsTasksTaskIdActionsCompletePost(@PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Workflow Task Actions
     */
    @GET
    @Path("/objects/objectworkflows/tasks/{task_id}/actions")
    void objectsObjectworkflowsTasksTaskIdActionsGet(@PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Accept Multi-item Workflow Task
     */
    @POST
    @Path("/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept")
    void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(@PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Complete Multi-item Workflow Task
     */
    @POST
    @Path("/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete")
    void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(@PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Manage Multi-Item Workflow Content
     */
    @POST
    @Path("/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent")
    void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(@PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Reassign Multi-item Workflow Task
     */
    @POST
    @Path("/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign")
    void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(@PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Reassign Single Record Workflow Task
     */
    @POST
    @Path("/objects/objectworkflows/tasks/{task_id}/actions/reassign")
    void objectsObjectworkflowsTasksTaskIdActionsReassignPost(@PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Workflow Task Action Details
     */
    @GET
    @Path("/objects/objectworkflows/tasks/{task_id}/actions/{task_action}")
    void objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(@PathParam("task_id") String taskId, @PathParam("task_action") String taskAction, @QueryParam("loc") String loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Undo Workflow Task Acceptance
     */
    @POST
    @Path("/objects/objectworkflows/tasks/{task_id}/actions/undoaccept")
    void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(@PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Workflow Task Due Date
     */
    @POST
    @Path("/objects/objectworkflows/tasks/{task_id}/actions/updateduedate")
    void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(@PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Workflow Task Details
     */
    @GET
    @Path("/objects/objectworkflows/tasks/{task_id}")
    void objectsObjectworkflowsTasksTaskIdGet(@PathParam("task_id") String taskId, @QueryParam("loc") Boolean loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Workflow Actions
     */
    @GET
    @Path("/objects/objectworkflows/{workflow_id}/actions")
    void objectsObjectworkflowsWorkflowIdActionsGet(@PathParam("workflow_id") String workflowId, @QueryParam("loc") String loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Workflow Action Details
     */
    @GET
    @Path("/objects/objectworkflows/{workflow_id}/actions/{workflow_action}")
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(@PathParam("workflow_id") String workflowId, @PathParam("workflow_action") String workflowAction, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Initiate Workflow Action
     */
    @POST
    @Path("/objects/objectworkflows/{workflow_id}/actions/{workflow_action}")
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(@PathParam("workflow_id") String workflowId, @PathParam("workflow_action") String workflowAction, @QueryParam("documents__sys") String documentsSys, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Workflow Details
     */
    @GET
    @Path("/objects/objectworkflows/{workflow_id}")
    void objectsObjectworkflowsWorkflowIdGet(@PathParam("workflow_id") String workflowId, @QueryParam("loc") Boolean loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Picklists
     */
    @GET
    @Path("/objects/picklists")
    void objectsPicklistsGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Picklist Values
     */
    @GET
    @Path("/objects/picklists/{picklist_name}")
    void objectsPicklistsPicklistNameGet(@PathParam("picklist_name") String picklistName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Inactivate Picklist Value
     */
    @DELETE
    @Path("/objects/picklists/{picklist_name}/{picklist_value_name}")
    void objectsPicklistsPicklistNamePicklistValueNameDelete(@PathParam("picklist_name") String picklistName, @PathParam("picklist_value_name") String picklistValueName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Picklist Value
     */
    @PUT
    @Path("/objects/picklists/{picklist_name}/{picklist_value_name}")
    void objectsPicklistsPicklistNamePicklistValueNamePut(@PathParam("picklist_name") String picklistName, @PathParam("picklist_value_name") String picklistValueName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Picklist Values
     */
    @POST
    @Path("/objects/picklists/{picklist_name}")
    void objectsPicklistsPicklistNamePost(@PathParam("picklist_name") String picklistName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Picklist Value Label
     */
    @PUT
    @Path("/objects/picklists/{picklist_name}")
    void objectsPicklistsPicklistNamePut(@PathParam("picklist_name") String picklistName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Build Production Vault
     */
    @POST
    @Path("/objects/sandbox/actions/buildproduction")
    void objectsSandboxActionsBuildproductionPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Promote to Production
     */
    @POST
    @Path("/objects/sandbox/actions/promoteproduction")
    void objectsSandboxActionsPromoteproductionPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Recheck Sandbox Usage Limit
     */
    @POST
    @Path("/objects/sandbox/actions/recheckusage")
    void objectsSandboxActionsRecheckusagePost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Change Sandbox Size
     */
    @POST
    @Path("/objects/sandbox/batch/changesize")
    void objectsSandboxBatchChangesizePost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Set Sandbox Entitlements
     */
    @POST
    @Path("/objects/sandbox/entitlements/set")
    void objectsSandboxEntitlementsSetPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Sandboxes
     */
    @GET
    @Path("/objects/sandbox")
    void objectsSandboxGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Sandbox
     */
    @DELETE
    @Path("/objects/sandbox/{name}")
    void objectsSandboxNameDelete(@PathParam("name") String name, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create or Refresh Sandbox
     */
    @POST
    @Path("/objects/sandbox")
    void objectsSandboxPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Sandbox Snapshot
     */
    @POST
    @Path("/objects/sandbox/snapshot/{api_name}/actions/update")
    void objectsSandboxSnapshotApiNameActionsUpdatePost(@PathParam("api_name") String apiName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Upgrade Sandbox Snapshot
     */
    @POST
    @Path("/objects/sandbox/snapshot/{api_name}/actions/upgrade")
    void objectsSandboxSnapshotApiNameActionsUpgradePost(@PathParam("api_name") String apiName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Sandbox Snapshot
     */
    @DELETE
    @Path("/objects/sandbox/snapshot/{api_name}")
    void objectsSandboxSnapshotApiNameDelete(@PathParam("api_name") String apiName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Sandbox Snapshots
     */
    @GET
    @Path("/objects/sandbox/snapshot")
    void objectsSandboxSnapshotGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Sandbox Snapshot
     */
    @POST
    @Path("/objects/sandbox/snapshot")
    void objectsSandboxSnapshotPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Refresh Sandbox from Snapshot
     */
    @POST
    @Path("/objects/sandbox/{vault_id}/actions/refresh")
    void objectsSandboxVaultIdActionsRefreshPost(@PathParam("vault_id") String vaultId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Sandbox Details by ID
     */
    @GET
    @Path("/objects/sandbox/{vault_id}")
    void objectsSandboxVaultIdGet(@PathParam("vault_id") String vaultId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Security Policies
     */
    @GET
    @Path("/objects/securitypolicies")
    void objectsSecuritypoliciesGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Security Policy
     */
    @GET
    @Path("/objects/securitypolicies/{security_policy_name}")
    void objectsSecuritypoliciesSecurityPolicyNameGet(@PathParam("security_policy_name") String securityPolicyName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Users
     */
    @GET
    @Path("/objects/users/")
    void objectsUsersGet(@QueryParam("vaults") String vaults, @QueryParam("exclude_vault_membership") String excludeVaultMembership, @QueryParam("exclude_app_licensing") String excludeAppLicensing, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve User
     */
    @GET
    @Path("/objects/users/{id}")
    void objectsUsersIdGet(@PathParam("id") String id, @QueryParam("exclude_vault_membership") String excludeVaultMembership, @QueryParam("exclude_app_licensing") String excludeAppLicensing, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve User Permissions
     */
    @GET
    @Path("/objects/users/{id}/permissions")
    void objectsUsersIdPermissionsGet(@PathParam("id") String id, @QueryParam("filter") String filter, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Single User
     */
    @PUT
    @Path("/objects/users/{id}")
    void objectsUsersIdPut(@PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Validate Session User
     */
    @GET
    @Path("/objects/users/me")
    void objectsUsersMeGet(@QueryParam("exclude_vault_membership") String excludeVaultMembership, @QueryParam("exclude_app_licensing") String excludeAppLicensing, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Change My Password
     */
    @POST
    @Path("/objects/users/me/password")
    void objectsUsersMePasswordPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve My User Permissions
     */
    @GET
    @Path("/objects/users/me/permissions")
    void objectsUsersMePermissionsGet(@QueryParam("filter") String filter, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update My User
     */
    @PUT
    @Path("/objects/users/me")
    void objectsUsersMePut(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Single User
     */
    @POST
    @Path("/objects/users")
    void objectsUsersPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Multiple Users
     */
    @PUT
    @Path("/objects/users")
    void objectsUsersPut(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Disable User
     */
    @DELETE
    @Path("/objects/users/{user_id}")
    void objectsUsersUserIdDelete(@PathParam("user_id") String userId, @QueryParam("domain") Boolean domain, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Vault Membership
     */
    @PUT
    @Path("/objects/users/{user_id}/vault_membership/{vault_id}")
    void objectsUsersUserIdVaultMembershipVaultIdPut(@PathParam("user_id") String userId, @PathParam("vault_id") String vaultId, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Vault Compare
     */
    @POST
    @Path("/objects/vault/actions/compare")
    void objectsVaultActionsComparePost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Vault Configuration Report
     */
    @POST
    @Path("/objects/vault/actions/configreport")
    void objectsVaultActionsConfigreportPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Component Definition Query
     */
    @POST
    @Path("/query/components")
    void queryComponentsPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Next Page URL
     */
    @POST
    @Path("/query/{next_page}")
    void queryNextPagePost(@PathParam("next_page") String nextPage, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-DescribeQuery") Boolean xVaultAPIDescribeQuery, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Submitting a Query
     */
    @POST
    @Path("/query")
    void queryPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-DescribeQuery") Boolean xVaultAPIDescribeQuery, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Previous Page URL
     */
    @POST
    @Path("/query/{previous_page}")
    void queryPreviousPagePost(@PathParam("previous_page") String previousPage, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-DescribeQuery") Boolean xVaultAPIDescribeQuery, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Current User with SCIM
     */
    @GET
    @Path("/scim/v2/Me")
    void scimV2MeGet(@QueryParam("attributes") String attributes, @QueryParam("excludedAttributes") String excludedAttributes, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Current User with SCIM
     */
    @PUT
    @Path("/scim/v2/Me")
    void scimV2MePut(@QueryParam("attributes") String attributes, @QueryParam("excludedAttributes") String excludedAttributes, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All SCIM Resource Types
     */
    @GET
    @Path("/scim/v2/ResourceTypes")
    void scimV2ResourceTypesGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Single SCIM Resource Type
     */
    @GET
    @Path("/scim/v2/ResourceTypes/{type}")
    void scimV2ResourceTypesTypeGet(@PathParam("type") String type, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All SCIM Schema Information
     */
    @GET
    @Path("/scim/v2/Schemas")
    void scimV2SchemasGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Single SCIM Schema Information
     */
    @GET
    @Path("/scim/v2/Schemas/{id}")
    void scimV2SchemasIdGet(@PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve SCIM Provider
     */
    @GET
    @Path("/scim/v2/ServiceProviderConfig")
    void scimV2ServiceProviderConfigGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve SCIM Resources
     */
    @GET
    @Path("/scim/v2/{type}")
    void scimV2TypeGet(@PathParam("type") String type, @QueryParam("filter") String filter, @QueryParam("attributes") String attributes, @QueryParam("excludedAttributes") String excludedAttributes, @QueryParam("sortBy") String sortBy, @QueryParam("sortOrder") String sortOrder, @QueryParam("startIndex") String startIndex, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Single SCIM Resource
     */
    @GET
    @Path("/scim/v2/{type}/{id}")
    void scimV2TypeIdGet(@PathParam("type") String type, @PathParam("id") String id, @QueryParam("attributes") String attributes, @QueryParam("excludedAttributes") String excludedAttributes, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Users with SCIM
     */
    @GET
    @Path("/scim/v2/Users")
    void scimV2UsersGet(@QueryParam("filter") String filter, @QueryParam("attributes") String attributes, @QueryParam("excludedAttributes") String excludedAttributes, @QueryParam("sortBy") String sortBy, @QueryParam("sortOrder") String sortOrder, @QueryParam("count") String count, @QueryParam("startIndex") String startIndex, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Single User with SCIM
     */
    @GET
    @Path("/scim/v2/Users/{id}")
    void scimV2UsersIdGet(@PathParam("id") String id, @QueryParam("filter") String filter, @QueryParam("attributes") String attributes, @QueryParam("excludedAttributes") String excludedAttributes, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update User with SCIM
     */
    @PUT
    @Path("/scim/v2/Users/{id}")
    void scimV2UsersIdPut(@PathParam("id") String id, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create User with SCIM
     */
    @POST
    @Path("/scim/v2/Users")
    void scimV2UsersPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Signing Certificate
     */
    @GET
    @Path("/services/certificate/{cert_id}")
    void servicesCertificateCertIdGet(@PathParam("cert_id") String certId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Disable Configuration Mode
     */
    @POST
    @Path("/services/configuration_mode/actions/disable")
    void servicesConfigurationModeActionsDisablePost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Enable Configuration Mode
     */
    @POST
    @Path("/services/configuration_mode/actions/enable")
    void servicesConfigurationModeActionsEnablePost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Available Direct Data Files
     */
    @GET
    @Path("/services/directdata/files")
    void servicesDirectdataFilesGet(@QueryParam("extract_type") String extractType, @QueryParam("start_time") Integer startTime, @QueryParam("stop_time") Integer stopTime, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Direct Data File
     */
    @GET
    @Path("/services/directdata/files/{name}")
    void servicesDirectdataFilesNameGet(@PathParam("name") String name, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Item Content
     */
    @GET
    @Path("/services/file_staging/items/content/{item}")
    void servicesFileStagingItemsContentItemGet(@PathParam("item") String item, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Range") String range, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete File or Folder
     */
    @DELETE
    @Path("/services/file_staging/items/{item}")
    void servicesFileStagingItemsItemDelete(@PathParam("item") String item, @QueryParam("recursive") String recursive, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * List Items at a Path
     */
    @GET
    @Path("/services/file_staging/items/{item}")
    void servicesFileStagingItemsItemGet(@PathParam("item") String item, @QueryParam("recursive") String recursive, @QueryParam("limit") String limit, @QueryParam("format_result") String formatResult, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Folder or File
     */
    @PUT
    @Path("/services/file_staging/items/{item}")
    void servicesFileStagingItemsItemPut(@PathParam("item") String item, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Folder or File
     */
    @POST
    @Path("/services/file_staging/items")
    void servicesFileStagingItemsPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-MD5") String contentMD5, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * List Upload Sessions
     */
    @GET
    @Path("/services/file_staging/upload/")
    void servicesFileStagingUploadGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Resumable Upload Session
     */
    @POST
    @Path("/services/file_staging/upload")
    void servicesFileStagingUploadPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Abort Upload Session
     */
    @DELETE
    @Path("/services/file_staging/upload/{upload_session_id}")
    void servicesFileStagingUploadUploadSessionIdDelete(@PathParam("upload_session_id") String uploadSessionId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Get Upload Session Details
     */
    @GET
    @Path("/services/file_staging/upload/{upload_session_id}")
    void servicesFileStagingUploadUploadSessionIdGet(@PathParam("upload_session_id") String uploadSessionId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * List File Parts Uploaded to Session
     */
    @GET
    @Path("/services/file_staging/upload/{upload_session_id}/parts")
    void servicesFileStagingUploadUploadSessionIdPartsGet(@PathParam("upload_session_id") String uploadSessionId, @QueryParam("limit") String limit, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Commit Upload Session
     */
    @POST
    @Path("/services/file_staging/upload/{upload_session_id}")
    void servicesFileStagingUploadUploadSessionIdPost(@PathParam("upload_session_id") String uploadSessionId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Upload to a Session
     */
    @PUT
    @Path("/services/file_staging/upload/{upload_session_id}")
    void servicesFileStagingUploadUploadSessionIdPut(@PathParam("upload_session_id") String uploadSessionId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-FilePartNumber") String xVaultAPIFilePartNumber, @HeaderParam("Content-MD5") String contentMD5, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Job Histories
     */
    @GET
    @Path("/services/jobs/histories")
    void servicesJobsHistoriesGet(@QueryParam("start_date") String startDate, @QueryParam("end_date") String endDate, @QueryParam("status") String status, @QueryParam("limit") String limit, @QueryParam("offset") String offset, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Import Bulk Translation File Job Errors
     */
    @GET
    @Path("/services/jobs/{job_id}/errors")
    void servicesJobsJobIdErrorsGet(@PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Job Status
     */
    @GET
    @Path("/services/jobs/{job_id}")
    void servicesJobsJobIdGet(@PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Import Bulk Translation File Job Summary
     */
    @GET
    @Path("/services/jobs/{job_id}/summary")
    void servicesJobsJobIdSummaryGet(@PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve SDK Job Tasks
     */
    @GET
    @Path("/services/jobs/{job_id}/tasks")
    void servicesJobsJobIdTasksGet(@PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Job Monitors
     */
    @GET
    @Path("/services/jobs/monitors")
    void servicesJobsMonitorsGet(@QueryParam("start_date") String startDate, @QueryParam("end_date") String endDate, @QueryParam("status") String status, @QueryParam("limit") String limit, @QueryParam("offset") String offset, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Start Job
     */
    @POST
    @Path("/services/jobs/start_now/{job_id}")
    void servicesJobsStartNowJobIdPost(@PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Extract Data Files
     */
    @POST
    @Path("/services/loader/extract")
    void servicesLoaderExtractPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Load Failure Log Results
     */
    @GET
    @Path("/services/loader/{job_id}/tasks/{task_id}/failurelog")
    void servicesLoaderJobIdTasksTaskIdFailurelogGet(@PathParam("job_id") String jobId, @PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Loader Extract Results
     */
    @GET
    @Path("/services/loader/{job_id}/tasks/{task_id}/results")
    void servicesLoaderJobIdTasksTaskIdResultsGet(@PathParam("job_id") String jobId, @PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Loader Extract Renditions Results
     */
    @GET
    @Path("/services/loader/{job_id}/tasks/{task_id}/results/renditions")
    void servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(@PathParam("job_id") String jobId, @PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Load Success Log Results
     */
    @GET
    @Path("/services/loader/{job_id}/tasks/{task_id}/successlog")
    void servicesLoaderJobIdTasksTaskIdSuccesslogGet(@PathParam("job_id") String jobId, @PathParam("task_id") String taskId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Load Data Objects
     */
    @POST
    @Path("/services/loader/load")
    void servicesLoaderLoadPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Validate Package
     */
    @POST
    @Path("/services/package/actions/validate")
    void servicesPackageActionsValidatePost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Export Package
     */
    @POST
    @Path("/services/package")
    void servicesPackagePost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Import Package
     */
    @PUT
    @Path("/services/package")
    void servicesPackagePut(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Queues
     */
    @GET
    @Path("/services/queues")
    void servicesQueuesGet(@HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Disable Delivery
     */
    @PUT
    @Path("/services/queues/{queue_name}/actions/disable_delivery")
    void servicesQueuesQueueNameActionsDisableDeliveryPut(@PathParam("queue_name") String queueName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Enable Delivery
     */
    @PUT
    @Path("/services/queues/{queue_name}/actions/enable_delivery")
    void servicesQueuesQueueNameActionsEnableDeliveryPut(@PathParam("queue_name") String queueName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Reset Queue
     */
    @PUT
    @Path("/services/queues/{queue_name}/actions/reset")
    void servicesQueuesQueueNameActionsResetPut(@PathParam("queue_name") String queueName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Queue Status
     */
    @GET
    @Path("/services/queues/{queue_name}")
    void servicesQueuesQueueNameGet(@PathParam("queue_name") String queueName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Validate Imported Package
     */
    @POST
    @Path("/services/vobject/vault_package__v/{package_id}/actions/validate")
    void servicesVobjectVaultPackageVPackageIdActionsValidatePost(@PathParam("package_id") String packageId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * End Session
     */
    @DELETE
    @Path("/session")
    void sessionDelete(@HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Single Client Code Distribution
     */
    @GET
    @Path("/uicode/distributions/{distribution_name}/code")
    void uicodeDistributionsDistributionNameCodeGet(@PathParam("distribution_name") String distributionName, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Single Client Code Distribution
     */
    @DELETE
    @Path("/uicode/distributions/{distribution_name}")
    void uicodeDistributionsDistributionNameDelete(@PathParam("distribution_name") String distributionName, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Single Client Code Distribution Metadata
     */
    @GET
    @Path("/uicode/distributions/{distribution_name}")
    void uicodeDistributionsDistributionNameGet(@PathParam("distribution_name") String distributionName, @HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve All Client Code Distribution Metadata
     */
    @GET
    @Path("/uicode/distributions")
    void uicodeDistributionsGet(@HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Add or Replace Single Client Code Distribution
     */
    @POST
    @Path("/uicode/distributions")
    void uicodeDistributionsPost(@HeaderParam("Accept") String accept, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Deploy Package
     */
    @POST
    @Path("/vobject/vault_package__v/{package_id}/actions/deploy")
    void vobjectVaultPackageVPackageIdActionsDeployPost(@PathParam("package_id") String packageId, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Package Deploy Results
     */
    @GET
    @Path("/vobject/vault_package__v/{package_id}/actions/deploy/results")
    void vobjectVaultPackageVPackageIdActionsDeployResultsGet(@PathParam("package_id") String packageId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Results of Cascade Delete Job
     */
    @GET
    @Path("/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}")
    void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(@PathParam("object_name") String objectName, @PathParam("job_status") String jobStatus, @PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Results of Deep Copy Job
     */
    @GET
    @Path("/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}")
    void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(@PathParam("object_name") String objectName, @PathParam("job_status") String jobStatus, @PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create a Placeholder from an EDL Item
     */
    @POST
    @Path("/vobjects/edl_item__v/actions/createplaceholder")
    void vobjectsEdlItemVActionsCreateplaceholderPost(@HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Merge Records Job Log
     */
    @GET
    @Path("/vobjects/merges/{job_id}/log")
    void vobjectsMergesJobIdLogGet(@PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Record Merge Results
     */
    @GET
    @Path("/vobjects/merges/{job_id}/results")
    void vobjectsMergesJobIdResultsGet(@PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Record Merge Status
     */
    @GET
    @Path("/vobjects/merges/{job_id}/status")
    void vobjectsMergesJobIdStatusGet(@PathParam("job_id") String jobId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Initiate Object Action on Multiple Records
     */
    @POST
    @Path("/vobjects/{object_name}/actions/{action_name}")
    void vobjectsObjectNameActionsActionNamePost(@PathParam("object_name") String objectName, @PathParam("action_name") String actionName, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Change Object Type
     */
    @POST
    @Path("/vobjects/{object_name}/actions/changetype")
    void vobjectsObjectNameActionsChangetypePost(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Initiate Record Merge
     */
    @POST
    @Path("/vobjects/{object_name}/actions/merge")
    @Consumes({ "application/json" })
    void vobjectsObjectNameActionsMergePost(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID, List<VobjectsObjectNameActionsMergePostRequestInner> vobjectsObjectNameActionsMergePostRequestInner) throws ApiException, ProcessingException;

    /**
     * Retrieve Roll-up Field Recalculation Status
     */
    @GET
    @Path("/vobjects/{object_name}/actions/recalculaterollups")
    void vobjectsObjectNameActionsRecalculaterollupsGet(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Recalculate Roll-up Fields
     */
    @POST
    @Path("/vobjects/{object_name}/actions/recalculaterollups")
    void vobjectsObjectNameActionsRecalculaterollupsPost(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Corporate Currency Fields
     */
    @PUT
    @Path("/vobjects/{object_name}/actions/updatecorporatecurrency")
    void vobjectsObjectNameActionsUpdatecorporatecurrencyPut(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Multiple Object Record Attachments
     */
    @DELETE
    @Path("/vobjects/{object_name}/attachments/batch")
    void vobjectsObjectNameAttachmentsBatchDelete(@PathParam("object_name") String objectName, @QueryParam("idParam") String idParam, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Multiple Object Record Attachments
     */
    @POST
    @Path("/vobjects/{object_name}/attachments/batch")
    void vobjectsObjectNameAttachmentsBatchPost(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Multiple Object Record Attachment Descriptions
     */
    @PUT
    @Path("/vobjects/{object_name}/attachments/batch")
    void vobjectsObjectNameAttachmentsBatchPut(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Object Records
     */
    @DELETE
    @Path("/vobjects/{object_name}")
    void vobjectsObjectNameDelete(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Object Record Roles
     */
    @GET
    @Path("/vobjects/{object_name}/{id}/roles/{role_name}")
    void vobjectsObjectNameIdRolesRoleNameGet(@PathParam("object_name") String objectName, @PathParam("id") String id, @PathParam("role_name") String roleName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Object User Actions Details
     */
    @GET
    @Path("/vobjects/{object_name}/{object_record_id}/actions/{action_name}")
    void vobjectsObjectNameObjectRecordIdActionsActionNameGet(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @PathParam("action_name") String actionName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Initiate Object Action on a Single Record
     */
    @POST
    @Path("/vobjects/{object_name}/{object_record_id}/actions/{action_name}")
    void vobjectsObjectNameObjectRecordIdActionsActionNamePost(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @PathParam("action_name") String actionName, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Cascade Delete Object Record
     */
    @POST
    @Path("/vobjects/{object_name}/{object_record_id}/actions/cascadedelete")
    void vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Deep Copy Object Record
     */
    @POST
    @Path("/vobjects/{object_name}/{object_record_id}/actions/deepcopy")
    void vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Object Record User Actions
     */
    @GET
    @Path("/vobjects/{object_name}/{object_record_id}/actions")
    void vobjectsObjectNameObjectRecordIdActionsGet(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @QueryParam("loc") Boolean loc, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Attachment Field File
     */
    @GET
    @Path("/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file")
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @PathParam("attachment_field_name") String attachmentFieldName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Attachment Field File
     */
    @POST
    @Path("/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file")
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @PathParam("attachment_field_name") String attachmentFieldName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download All Attachment Field Files
     */
    @GET
    @Path("/vobjects/{object_name}/{object_record_id}/attachment_fields/file")
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Object Record Attachment
     */
    @DELETE
    @Path("/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @PathParam("attachment_id") String attachmentId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Object Record Attachment Metadata
     */
    @GET
    @Path("/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @PathParam("attachment_id") String attachmentId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Object Record Attachment Description
     */
    @PUT
    @Path("/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @PathParam("attachment_id") String attachmentId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Delete Object Record Attachment Version
     */
    @DELETE
    @Path("/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @PathParam("attachment_id") String attachmentId, @PathParam("attachment_version") String attachmentVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download Object Record Attachment File
     */
    @GET
    @Path("/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @PathParam("attachment_id") String attachmentId, @PathParam("attachment_version") String attachmentVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Object Record Attachment Version Metadata
     */
    @GET
    @Path("/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @PathParam("attachment_id") String attachmentId, @PathParam("attachment_version") String attachmentVersion, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Restore Object Record Attachment Version
     */
    @POST
    @Path("/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @PathParam("attachment_id") String attachmentId, @PathParam("attachment_version") String attachmentVersion, @QueryParam("restore") Boolean restore, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Object Record Attachment Versions
     */
    @GET
    @Path("/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @PathParam("attachment_id") String attachmentId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Download All Object Record Attachment Files
     */
    @GET
    @Path("/vobjects/{object_name}/{object_record_id}/attachments/file")
    void vobjectsObjectNameObjectRecordIdAttachmentsFileGet(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Object Record Attachments
     */
    @GET
    @Path("/vobjects/{object_name}/{object_record_id}/attachments")
    void vobjectsObjectNameObjectRecordIdAttachmentsGet(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create Object Record Attachment
     */
    @POST
    @Path("/vobjects/{object_name}/{object_record_id}/attachments")
    void vobjectsObjectNameObjectRecordIdAttachmentsPost(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Complete Audit History for a Single Object Record
     */
    @GET
    @Path("/vobjects/{object_name}/{object_record_id}/audittrail")
    void vobjectsObjectNameObjectRecordIdAudittrailGet(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @QueryParam("start_date") String startDate, @QueryParam("end_date") String endDate, @QueryParam("format_result") String formatResult, @QueryParam("limit") String limit, @QueryParam("offset") String offset, @QueryParam("events") String events, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Object Record
     */
    @GET
    @Path("/vobjects/{object_name}/{object_record_id}")
    void vobjectsObjectNameObjectRecordIdGet(@PathParam("object_name") String objectName, @PathParam("object_record_id") String objectRecordId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Create &amp; Upsert Object Records
     */
    @POST
    @Path("/vobjects/{object_name}")
    void vobjectsObjectNamePost(@PathParam("object_name") String objectName, @QueryParam("idParam") String idParam, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-MigrationMode") Boolean xVaultAPIMigrationMode, @HeaderParam("X-VaultAPI-NoTriggers") Boolean xVaultAPINoTriggers, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Update Object Records
     */
    @PUT
    @Path("/vobjects/{object_name}")
    void vobjectsObjectNamePut(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-MigrationMode") Boolean xVaultAPIMigrationMode, @HeaderParam("X-VaultAPI-NoTriggers") Boolean xVaultAPINoTriggers, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Remove Users &amp; Groups from Roles on Object Records
     */
    @DELETE
    @Path("/vobjects/{object_name}/roles")
    void vobjectsObjectNameRolesDelete(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Assign Users &amp; Groups to Roles on Object Records
     */
    @POST
    @Path("/vobjects/{object_name}/roles")
    void vobjectsObjectNameRolesPost(@PathParam("object_name") String objectName, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("Content-Type") String contentType, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;

    /**
     * Retrieve Outbound Package Dependencies
     */
    @GET
    @Path("/vobjects/outbound_package__v/{package_id}/dependencies")
    void vobjectsOutboundPackageVPackageIdDependenciesGet(@PathParam("package_id") String packageId, @HeaderParam("Authorization") String authorization, @HeaderParam("Accept") String accept, @HeaderParam("X-VaultAPI-ClientID") String xVaultAPIClientID) throws ApiException, ProcessingException;
}
