/*
 * Veeva Vault API v25.1
 *
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    public sealed class DefaultApiTests : ApiTestsBase
    {
        private readonly IDefaultApi _instance;

        public DefaultApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IDefaultApi>();
        }

        /// <summary>
        /// Test ApiGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ApiGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ApiMdlComponentsComponentTypeAndRecordNameFilesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiMdlComponentsComponentTypeAndRecordNameFilesGetAsyncTest()
        {
            string componentTypeAndRecordName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ApiMdlComponentsComponentTypeAndRecordNameFilesGetAsync(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ApiMdlComponentsComponentTypeAndRecordNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiMdlComponentsComponentTypeAndRecordNameGetAsyncTest()
        {
            string componentTypeAndRecordName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ApiMdlComponentsComponentTypeAndRecordNameGetAsync(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ApiMdlExecuteAsyncJobIdResultsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiMdlExecuteAsyncJobIdResultsGetAsyncTest()
        {
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ApiMdlExecuteAsyncJobIdResultsGetAsync(jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ApiMdlExecuteAsyncPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiMdlExecuteAsyncPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ApiMdlExecuteAsyncPostAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ApiMdlExecutePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiMdlExecutePostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ApiMdlExecutePostAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ApiMdlFilesPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiMdlFilesPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ApiMdlFilesPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test AudittrailAuditTrailTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AudittrailAuditTrailTypeGetAsyncTest()
        {
            string auditTrailType = default!;
            Client.Option<string> startDate = default!;
            Client.Option<string> endDate = default!;
            Client.Option<string> allDates = default!;
            Client.Option<string> formatResult = default!;
            Client.Option<string> limit = default!;
            Client.Option<string> offset = default!;
            Client.Option<string> objects = default!;
            Client.Option<string> events = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.AudittrailAuditTrailTypeGetAsync(auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test AuthDiscoveryPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AuthDiscoveryPostAsyncTest()
        {
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.AuthDiscoveryPostAsync(accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test AuthOauthSessionOathOidcProfileIdPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AuthOauthSessionOathOidcProfileIdPostAsyncTest()
        {
            string oathOidcProfileId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.AuthOauthSessionOathOidcProfileIdPostAsync(oathOidcProfileId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test AuthPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AuthPostAsyncTest()
        {
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.AuthPostAsync(contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CodeClassNameDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CodeClassNameDeleteAsyncTest()
        {
            string className = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CodeClassNameDeleteAsync(className, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CodeClassNameDisablePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CodeClassNameDisablePutAsyncTest()
        {
            string className = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CodeClassNameDisablePutAsync(className, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CodeClassNameEnablePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CodeClassNameEnablePutAsyncTest()
        {
            string className = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CodeClassNameEnablePutAsync(className, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CodeClassNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CodeClassNameGetAsyncTest()
        {
            string className = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CodeClassNameGetAsync(className, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CodeProfilerGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CodeProfilerGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CodeProfilerGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CodeProfilerPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CodeProfilerPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CodeProfilerPostAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CodeProfilerSessionNameActionsEndPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CodeProfilerSessionNameActionsEndPostAsyncTest()
        {
            string sessionName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CodeProfilerSessionNameActionsEndPostAsync(sessionName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CodeProfilerSessionNameDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CodeProfilerSessionNameDeleteAsyncTest()
        {
            string sessionName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CodeProfilerSessionNameDeleteAsync(sessionName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CodeProfilerSessionNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CodeProfilerSessionNameGetAsyncTest()
        {
            string sessionName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CodeProfilerSessionNameGetAsync(sessionName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CodeProfilerSessionNameResultsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CodeProfilerSessionNameResultsGetAsyncTest()
        {
            string sessionName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CodeProfilerSessionNameResultsGetAsync(sessionName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CodePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CodePutAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CodePutAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CompositesTreesEdlHierarchyOrTemplateActionsListnodesPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CompositesTreesEdlHierarchyOrTemplateActionsListnodesPostAsyncTest()
        {
            string edlHierarchyOrTemplate = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CompositesTreesEdlHierarchyOrTemplateActionsListnodesPostAsync(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CompositesTreesEdlHierarchyOrTemplateGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CompositesTreesEdlHierarchyOrTemplateGetAsyncTest()
        {
            string edlHierarchyOrTemplate = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CompositesTreesEdlHierarchyOrTemplateGetAsync(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CompositesTreesEdlHierarchyVParentNodeIdChildrenGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CompositesTreesEdlHierarchyVParentNodeIdChildrenGetAsyncTest()
        {
            string parentNodeId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CompositesTreesEdlHierarchyVParentNodeIdChildrenGetAsync(parentNodeId, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test CompositesTreesEdlHierarchyVParentNodeIdChildrenPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CompositesTreesEdlHierarchyVParentNodeIdChildrenPutAsyncTest()
        {
            string parentNodeId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.CompositesTreesEdlHierarchyVParentNodeIdChildrenPutAsync(parentNodeId, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ConfigurationComponentTypeAndRecordNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ConfigurationComponentTypeAndRecordNameGetAsyncTest()
        {
            string componentTypeAndRecordName = default!;
            Client.Option<string> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ConfigurationComponentTypeAndRecordNameGetAsync(componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ConfigurationComponentTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ConfigurationComponentTypeGetAsyncTest()
        {
            string componentType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ConfigurationComponentTypeGetAsync(componentType, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ConfigurationObjectNameAndObjectTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ConfigurationObjectNameAndObjectTypeGetAsyncTest()
        {
            string objectNameAndObjectType = default!;
            Client.Option<string> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ConfigurationObjectNameAndObjectTypeGetAsync(objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ConfigurationObjecttypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ConfigurationObjecttypeGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ConfigurationObjecttypeGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ConfigurationRoleAssignmentRuleDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ConfigurationRoleAssignmentRuleDeleteAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ConfigurationRoleAssignmentRuleDeleteAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ConfigurationRoleAssignmentRuleGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ConfigurationRoleAssignmentRuleGetAsyncTest()
        {
            Client.Option<string> lifecycleV = default!;
            Client.Option<string> roleV = default!;
            Client.Option<string> productV = default!;
            Client.Option<string> countryV = default!;
            Client.Option<string> studyV = default!;
            Client.Option<string> studyCountryV = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ConfigurationRoleAssignmentRuleGetAsync(lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ConfigurationRoleAssignmentRulePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ConfigurationRoleAssignmentRulePostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ConfigurationRoleAssignmentRulePostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ConfigurationRoleAssignmentRulePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ConfigurationRoleAssignmentRulePutAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ConfigurationRoleAssignmentRulePutAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test DelegationLoginPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DelegationLoginPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.DelegationLoginPostAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test DelegationVaultsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DelegationVaultsGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.DelegationVaultsGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test KeepAlivePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task KeepAlivePostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.KeepAlivePostAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test LimitsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LimitsGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.LimitsGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test LogsApiUsageGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LogsApiUsageGetAsyncTest()
        {
            Client.Option<string> date = default!;
            Client.Option<string> logFormat = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.LogsApiUsageGetAsync(date, logFormat, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test LogsCodeDebugGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LogsCodeDebugGetAsyncTest()
        {
            Client.Option<string> userId = default!;
            Client.Option<bool> includeInactive = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.LogsCodeDebugGetAsync(userId, includeInactive, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test LogsCodeDebugIdActionsResetDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LogsCodeDebugIdActionsResetDeleteAsyncTest()
        {
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.LogsCodeDebugIdActionsResetDeleteAsync(id, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test LogsCodeDebugIdActionsResetPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LogsCodeDebugIdActionsResetPostAsyncTest()
        {
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.LogsCodeDebugIdActionsResetPostAsync(id, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test LogsCodeDebugIdFilesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LogsCodeDebugIdFilesGetAsyncTest()
        {
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.LogsCodeDebugIdFilesGetAsync(id, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test LogsCodeDebugIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LogsCodeDebugIdGetAsyncTest()
        {
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.LogsCodeDebugIdGetAsync(id, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test LogsCodeDebugPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LogsCodeDebugPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.LogsCodeDebugPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test LogsCodeRuntimeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LogsCodeRuntimeGetAsyncTest()
        {
            Client.Option<string> date = default!;
            Client.Option<string> logFormat = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.LogsCodeRuntimeGetAsync(date, logFormat, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MessagesMessageTypeActionsImportPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MessagesMessageTypeActionsImportPostAsyncTest()
        {
            string messageType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MessagesMessageTypeActionsImportPostAsync(messageType, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MessagesMessageTypeLanguageLangActionsExportPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MessagesMessageTypeLanguageLangActionsExportPostAsyncTest()
        {
            string messageType = default!;
            string lang = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MessagesMessageTypeLanguageLangActionsExportPostAsync(messageType, lang, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataAudittrailAuditTrailTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataAudittrailAuditTrailTypeGetAsyncTest()
        {
            string auditTrailType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataAudittrailAuditTrailTypeGetAsync(auditTrailType, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataAudittrailGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataAudittrailGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataAudittrailGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataComponentsComponentTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataComponentsComponentTypeGetAsyncTest()
        {
            string componentType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataComponentsComponentTypeGetAsync(componentType, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataComponentsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataComponentsGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataComponentsGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsBindersTemplatesBindernodesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsBindersTemplatesBindernodesGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsBindersTemplatesBindernodesGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsBindersTemplatesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsBindersTemplatesGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsBindersTemplatesGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetAsyncTest()
        {
            string placemarkType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetAsync(placemarkType, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetAsyncTest()
        {
            string referenceType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetAsync(referenceType, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetAsyncTest()
        {
            string annotationType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetAsync(annotationType, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetAsyncTest()
        {
            string eventType = default!;
            string eventSubtype = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetAsync(eventType, eventSubtype, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsEventsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsEventsGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsEventsGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsLockGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsLockGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsLockGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsPropertiesFindCommonPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsPropertiesFindCommonPostAsyncTest()
        {
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsPropertiesFindCommonPostAsync(contentType, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsPropertiesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsPropertiesGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsPropertiesGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsTemplatesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsTemplatesGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsTemplatesGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsTypesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsTypesGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsTypesGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsTypesTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsTypesTypeGetAsyncTest()
        {
            string type = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsTypesTypeGetAsync(type, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsTypesTypeRelationshipsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsTypesTypeRelationshipsGetAsyncTest()
        {
            string type = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsTypesTypeRelationshipsGetAsync(type, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetAsyncTest()
        {
            string type = default!;
            string subtype = default!;
            string classification = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetAsync(type, subtype, classification, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetAsyncTest()
        {
            string type = default!;
            string subtype = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetAsync(type, subtype, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsGroupsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsGroupsGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsGroupsGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsSecuritypoliciesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsSecuritypoliciesGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsSecuritypoliciesGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataObjectsUsersGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataObjectsUsersGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataObjectsUsersGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataVobjectsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataVobjectsGetAsyncTest()
        {
            Client.Option<bool> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataVobjectsGetAsync(loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataVobjectsObjectNameActionsCanceldeploymentPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataVobjectsObjectNameActionsCanceldeploymentPostAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataVobjectsObjectNameActionsCanceldeploymentPostAsync(objectName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataVobjectsObjectNameFieldsObjectFieldNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataVobjectsObjectNameFieldsObjectFieldNameGetAsyncTest()
        {
            string objectName = default!;
            string objectFieldName = default!;
            Client.Option<bool> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataVobjectsObjectNameFieldsObjectFieldNameGetAsync(objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataVobjectsObjectNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataVobjectsObjectNameGetAsyncTest()
        {
            string objectName = default!;
            Client.Option<bool> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataVobjectsObjectNameGetAsync(objectName, loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataVobjectsObjectNamePageLayoutsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataVobjectsObjectNamePageLayoutsGetAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataVobjectsObjectNamePageLayoutsGetAsync(objectName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test MetadataVobjectsObjectNamePageLayoutsLayoutNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MetadataVobjectsObjectNamePageLayoutsLayoutNameGetAsyncTest()
        {
            string objectName = default!;
            string layoutName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.MetadataVobjectsObjectNamePageLayoutsLayoutNameGetAsync(objectName, layoutName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test NotificationsHistoriesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task NotificationsHistoriesGetAsyncTest()
        {
            Client.Option<string> startDate = default!;
            Client.Option<string> endDate = default!;
            Client.Option<bool> allDates = default!;
            Client.Option<string> formatResult = default!;
            Client.Option<string> limit = default!;
            Client.Option<string> offset = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.NotificationsHistoriesGetAsync(startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectWorkflowActionsActionGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectWorkflowActionsActionGetAsyncTest()
        {
            string action = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectWorkflowActionsActionGetAsync(action, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectWorkflowActionsActionPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectWorkflowActionsActionPostAsyncTest()
        {
            string action = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectWorkflowActionsActionPostAsync(action, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectWorkflowActionsCanceltasksPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectWorkflowActionsCanceltasksPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectWorkflowActionsCanceltasksPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectWorkflowActionsCancelworkflowsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectWorkflowActionsCancelworkflowsPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectWorkflowActionsCancelworkflowsPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectWorkflowActionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectWorkflowActionsGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectWorkflowActionsGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectWorkflowActionsReassigntasksPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectWorkflowActionsReassigntasksPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectWorkflowActionsReassigntasksPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectWorkflowActionsReplaceworkflowownerPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectWorkflowActionsReplaceworkflowownerPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectWorkflowActionsReplaceworkflowownerPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersActionsExportJobIdResultsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersActionsExportJobIdResultsGetAsyncTest()
        {
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersActionsExportJobIdResultsGetAsync(jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdActionsExportPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdActionsExportPostAsyncTest()
        {
            string binderId = default!;
            Client.Option<bool> source = default!;
            Client.Option<string> renditiontype = default!;
            Client.Option<string> docversion = default!;
            Client.Option<string> attachments = default!;
            Client.Option<string> export = default!;
            Client.Option<bool> docfield = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdActionsExportPostAsync(binderId, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdActionsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdActionsPostAsyncTest()
        {
            string binderId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdActionsPostAsync(binderId, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdBindingRulePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdBindingRulePutAsyncTest()
        {
            string binderId = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdBindingRulePutAsync(binderId, contentType, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdDeleteAsyncTest()
        {
            string binderId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdDeleteAsync(binderId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdDocumentsNodeIdBindingRulePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdDocumentsNodeIdBindingRulePutAsyncTest()
        {
            string binderId = default!;
            string nodeId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdDocumentsNodeIdBindingRulePutAsync(binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdDocumentsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdDocumentsPostAsyncTest()
        {
            string binderId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdDocumentsPostAsync(binderId, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdDocumentsSectionIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdDocumentsSectionIdDeleteAsyncTest()
        {
            string binderId = default!;
            string sectionId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdDocumentsSectionIdDeleteAsync(binderId, sectionId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdDocumentsSectionIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdDocumentsSectionIdPutAsyncTest()
        {
            string binderId = default!;
            string sectionId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdDocumentsSectionIdPutAsync(binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdGetAsyncTest()
        {
            string binderId = default!;
            Client.Option<string> depth = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdGetAsync(binderId, depth, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdPostAsyncTest()
        {
            string binderId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdPostAsync(binderId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdPutAsyncTest()
        {
            string binderId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdPutAsync(binderId, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteAsyncTest()
        {
            string binderId = default!;
            string roleNameAndUserOrGroup = default!;
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteAsync(binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdSectionsNodeIdBindingRulePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdSectionsNodeIdBindingRulePutAsyncTest()
        {
            string binderId = default!;
            string nodeId = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdSectionsNodeIdBindingRulePutAsync(binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdSectionsNodeIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdSectionsNodeIdPutAsyncTest()
        {
            string binderId = default!;
            string nodeId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdSectionsNodeIdPutAsync(binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdSectionsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdSectionsPostAsyncTest()
        {
            string binderId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdSectionsPostAsync(binderId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdSectionsSectionIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdSectionsSectionIdDeleteAsyncTest()
        {
            string binderId = default!;
            string sectionId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdSectionsSectionIdDeleteAsync(binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdSectionsSectionIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdSectionsSectionIdGetAsyncTest()
        {
            string binderId = default!;
            string sectionId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdSectionsSectionIdGetAsync(binderId, sectionId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdVersionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdVersionsGetAsyncTest()
        {
            string binderId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdVersionsGetAsync(binderId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostAsyncTest()
        {
            string binderId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<bool> source = default!;
            Client.Option<string> renditiontype = default!;
            Client.Option<string> docversion = default!;
            Client.Option<string> attachments = default!;
            Client.Option<string> export = default!;
            Client.Option<bool> docfield = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostAsync(binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteAsyncTest()
        {
            string binderId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteAsync(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetAsyncTest()
        {
            string binderId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetAsync(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutAsyncTest()
        {
            string binderId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutAsync(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostAsyncTest()
        {
            string binderId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostAsync(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteAsyncTest()
        {
            string binderId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string relationshipId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteAsync(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetAsyncTest()
        {
            string binderId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string relationshipId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetAsync(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetAsyncTest()
        {
            string binderId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string sectionId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetAsync(binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersIdRolesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersIdRolesGetAsyncTest()
        {
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersIdRolesGetAsync(id, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersIdRolesPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersIdRolesPostAsyncTest()
        {
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersIdRolesPostAsync(id, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersIdRolesRoleNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersIdRolesRoleNameGetAsyncTest()
        {
            string id = default!;
            string roleName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersIdRolesRoleNameGetAsync(id, roleName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetAsyncTest()
        {
            string id = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetAsync(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetAsyncTest()
        {
            string id = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string nameV = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetAsync(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutAsyncTest()
        {
            string id = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string nameV = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutAsync(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersLifecycleActionsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersLifecycleActionsPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersLifecycleActionsPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersLifecycleActionsUserActionNamePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersLifecycleActionsUserActionNamePutAsyncTest()
        {
            string userActionName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersLifecycleActionsUserActionNamePutAsync(userActionName, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersPostAsyncTest()
        {
            Client.Option<bool> async = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersPostAsync(async, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersTemplatesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersTemplatesGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersTemplatesGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersTemplatesPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersTemplatesPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersTemplatesPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersTemplatesPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersTemplatesPutAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersTemplatesPutAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersTemplatesTemplateNameBindernodesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersTemplatesTemplateNameBindernodesGetAsyncTest()
        {
            string templateName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersTemplatesTemplateNameBindernodesGetAsync(templateName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersTemplatesTemplateNameBindernodesPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersTemplatesTemplateNameBindernodesPostAsyncTest()
        {
            string templateName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersTemplatesTemplateNameBindernodesPostAsync(templateName, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersTemplatesTemplateNameBindernodesPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersTemplatesTemplateNameBindernodesPutAsyncTest()
        {
            string templateName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersTemplatesTemplateNameBindernodesPutAsync(templateName, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersTemplatesTemplateNameDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersTemplatesTemplateNameDeleteAsyncTest()
        {
            string templateName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersTemplatesTemplateNameDeleteAsync(templateName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsBindersTemplatesTemplateNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsBindersTemplatesTemplateNameGetAsyncTest()
        {
            string templateName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsBindersTemplatesTemplateNameGetAsync(templateName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDeletionsDocumentsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDeletionsDocumentsGetAsyncTest()
        {
            Client.Option<string> startDate = default!;
            Client.Option<string> endDate = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDeletionsDocumentsGetAsync(startDate, endDate, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDeletionsVobjectsObjectNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDeletionsVobjectsObjectNameGetAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDeletionsVobjectsObjectNameGetAsync(objectName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsActionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsActionsGetAsyncTest()
        {
            Client.Option<bool> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsActionsGetAsync(loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetAsyncTest()
        {
            string lifecycleAndStateAndAction = default!;
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetAsync(lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsActionsWorkflowNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsActionsWorkflowNameGetAsyncTest()
        {
            string workflowName = default!;
            Client.Option<bool> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsActionsWorkflowNameGetAsync(workflowName, loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsActionsWorkflowNamePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsActionsWorkflowNamePostAsyncTest()
        {
            string workflowName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsActionsWorkflowNamePostAsync(workflowName, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsAnnotationsBatchDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsAnnotationsBatchDeleteAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsAnnotationsBatchDeleteAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsAnnotationsBatchPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsAnnotationsBatchPostAsyncTest()
        {
            string authorization = default!;
            string contentType = default!;
            string accept = default!;
            string xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsAnnotationsBatchPostAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsAnnotationsBatchPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsAnnotationsBatchPutAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsAnnotationsBatchPutAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsAnnotationsRepliesBatchPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsAnnotationsRepliesBatchPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsAnnotationsRepliesBatchPostAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsAttachmentsBatchDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsAttachmentsBatchDeleteAsyncTest()
        {
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsAttachmentsBatchDeleteAsync(accept, authorization, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsAttachmentsBatchPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsAttachmentsBatchPostAsyncTest()
        {
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsAttachmentsBatchPostAsync(accept, authorization, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsAttachmentsBatchPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsAttachmentsBatchPutAsyncTest()
        {
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsAttachmentsBatchPutAsync(accept, authorization, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsBatchActionsFileextractJobIdResultsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsBatchActionsFileextractJobIdResultsGetAsyncTest()
        {
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsBatchActionsFileextractJobIdResultsGetAsync(jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsBatchActionsFileextractPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsBatchActionsFileextractPostAsyncTest()
        {
            Client.Option<bool> source = default!;
            Client.Option<bool> renditions = default!;
            Client.Option<bool> allversions = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsBatchActionsFileextractPostAsync(source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsBatchActionsReclassifyPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsBatchActionsReclassifyPutAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<bool> xVaultAPIMigrationMode = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsBatchActionsReclassifyPutAsync(authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsBatchActionsRerenderPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsBatchActionsRerenderPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsBatchActionsRerenderPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsBatchDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsBatchDeleteAsyncTest()
        {
            Client.Option<string> idParam = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsBatchDeleteAsync(idParam, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsBatchLockDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsBatchLockDeleteAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsBatchLockDeleteAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsBatchPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsBatchPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<bool> xVaultAPIMigrationMode = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsBatchPostAsync(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsBatchPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsBatchPutAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<bool> xVaultAPIMigrationMode = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsBatchPutAsync(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAnchorsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAnchorsGetAsyncTest()
        {
            string docId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAnchorsGetAsync(docId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAnnotationsFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAnnotationsFileGetAsyncTest()
        {
            string docId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAnnotationsFileGetAsync(docId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAnnotationsFilePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAnnotationsFilePostAsyncTest()
        {
            string docId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAnnotationsFilePostAsync(docId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAttachmentsAttachmentIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteAsyncTest()
        {
            string docId = default!;
            string attachmentId = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteAsync(docId, attachmentId, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetAsyncTest()
        {
            string docId = default!;
            string attachmentId = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetAsync(docId, attachmentId, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAttachmentsAttachmentIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAttachmentsAttachmentIdGetAsyncTest()
        {
            string docId = default!;
            string attachmentId = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAttachmentsAttachmentIdGetAsync(docId, attachmentId, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAttachmentsAttachmentIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAttachmentsAttachmentIdPutAsyncTest()
        {
            string docId = default!;
            string attachmentId = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAttachmentsAttachmentIdPutAsync(docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteAsyncTest()
        {
            string docId = default!;
            string attachmentId = default!;
            string attachmentVersion = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteAsync(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetAsyncTest()
        {
            string docId = default!;
            string attachmentId = default!;
            string attachmentVersion = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetAsync(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetAsyncTest()
        {
            string docId = default!;
            string attachmentId = default!;
            string attachmentVersion = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetAsync(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostAsyncTest()
        {
            string docId = default!;
            string attachmentId = default!;
            string attachmentVersion = default!;
            Client.Option<bool> restore = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostAsync(docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetAsyncTest()
        {
            string docId = default!;
            string attachmentId = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetAsync(docId, attachmentId, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAttachmentsFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAttachmentsFileGetAsyncTest()
        {
            string docId = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAttachmentsFileGetAsync(docId, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAttachmentsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAttachmentsGetAsyncTest()
        {
            string docId = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAttachmentsGetAsync(docId, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAttachmentsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAttachmentsPostAsyncTest()
        {
            string docId = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAttachmentsPostAsync(docId, accept, authorization, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdAudittrailGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdAudittrailGetAsyncTest()
        {
            string docId = default!;
            Client.Option<string> startDate = default!;
            Client.Option<string> endDate = default!;
            Client.Option<string> formatResult = default!;
            Client.Option<string> limit = default!;
            Client.Option<string> offset = default!;
            Client.Option<string> events = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdAudittrailGetAsync(docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdDeleteAsyncTest()
        {
            string docId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdDeleteAsync(docId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdEventsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdEventsGetAsyncTest()
        {
            string docId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdEventsGetAsync(docId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdFileGetAsyncTest()
        {
            string docId = default!;
            Client.Option<bool> lockDocument = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdFileGetAsync(docId, lockDocument, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdGetAsyncTest()
        {
            string docId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdGetAsync(docId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdLockDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdLockDeleteAsyncTest()
        {
            string docId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdLockDeleteAsync(docId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdLockGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdLockGetAsyncTest()
        {
            string docId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdLockGetAsync(docId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdLockPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdLockPostAsyncTest()
        {
            string docId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdLockPostAsync(docId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetAsync(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdPostAsyncTest()
        {
            string docId = default!;
            Client.Option<string> suppressRendition = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdPostAsync(docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdPutAsyncTest()
        {
            string docId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<bool> xVaultAPIMigrationMode = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdPutAsync(docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdRenditionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdRenditionsGetAsyncTest()
        {
            string docId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdRenditionsGetAsync(docId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdRenditionsRenditionTypeDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdRenditionsRenditionTypeDeleteAsyncTest()
        {
            string docId = default!;
            string renditionType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdRenditionsRenditionTypeDeleteAsync(docId, renditionType, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdRenditionsRenditionTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdRenditionsRenditionTypeGetAsyncTest()
        {
            string docId = default!;
            string renditionType = default!;
            Client.Option<string> steadyState = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdRenditionsRenditionTypeGetAsync(docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdRenditionsRenditionTypePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdRenditionsRenditionTypePostAsyncTest()
        {
            string docId = default!;
            string renditionType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdRenditionsRenditionTypePostAsync(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdRenditionsRenditionTypePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdRenditionsRenditionTypePutAsyncTest()
        {
            string docId = default!;
            string renditionType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdRenditionsRenditionTypePutAsync(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteAsyncTest()
        {
            string docId = default!;
            string roleNameAndUserOrGroup = default!;
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteAsync(docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetAsync(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsGetAsyncTest()
        {
            string docId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsGetAsync(docId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string annotationId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetAsync(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string annotationId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetAsync(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetAsync(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostAsync(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> limit = default!;
            Client.Option<string> offset = default!;
            Client.Option<string> annotationTypes = default!;
            Client.Option<string> paginationId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetAsync(docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string attachmentId = default!;
            string attachmentVersion = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetAsync(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string attachmentId = default!;
            string attachmentVersion = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetAsync(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteAsync(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetAsync(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostAsync(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetAsync(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetAsync(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetAsync(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<bool> xVaultAPIMigrationMode = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutAsync(docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetAsync(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostAsync(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string relationshipId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteAsync(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string relationshipId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetAsync(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetAsync(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string renditionType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteAsync(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string renditionType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetAsync(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string renditionType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostAsync(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string renditionType = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutAsync(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetAsyncTest()
        {
            string docId = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetAsync(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsGetAsyncTest()
        {
            Client.Option<string> namedFilter = default!;
            Client.Option<string> scope = default!;
            Client.Option<string> versionscope = default!;
            Client.Option<string> search = default!;
            Client.Option<string> limit = default!;
            Client.Option<string> sort = default!;
            Client.Option<string> start = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsGetAsync(namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsIdRolesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsIdRolesGetAsyncTest()
        {
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsIdRolesGetAsync(id, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsIdRolesPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsIdRolesPostAsyncTest()
        {
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsIdRolesPostAsync(id, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsIdRolesRoleNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsIdRolesRoleNameGetAsyncTest()
        {
            string id = default!;
            string roleName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsIdRolesRoleNameGetAsync(id, roleName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetAsyncTest()
        {
            string id = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetAsync(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetAsyncTest()
        {
            string id = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string nameV = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetAsync(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutAsyncTest()
        {
            string id = default!;
            string majorVersion = default!;
            string minorVersion = default!;
            string nameV = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutAsync(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsLifecycleActionsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsLifecycleActionsPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsLifecycleActionsPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsLifecycleActionsUserActionNamePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsLifecycleActionsUserActionNamePutAsyncTest()
        {
            string userActionName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsLifecycleActionsUserActionNamePutAsync(userActionName, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<bool> xVaultAPIMigrationMode = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsPostAsync(authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsRelationshipsBatchDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsRelationshipsBatchDeleteAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsRelationshipsBatchDeleteAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsRelationshipsBatchPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsRelationshipsBatchPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsRelationshipsBatchPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsRenditionsBatchDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsRenditionsBatchDeleteAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsRenditionsBatchDeleteAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsRenditionsBatchPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsRenditionsBatchPostAsyncTest()
        {
            Client.Option<string> idParam = default!;
            Client.Option<string> largeSizeAsset = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<bool> xVaultAPIMigrationMode = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsRenditionsBatchPostAsync(idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsRolesBatchDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsRolesBatchDeleteAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsRolesBatchDeleteAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsRolesBatchPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsRolesBatchPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsRolesBatchPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsTemplatesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsTemplatesGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsTemplatesGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsTemplatesPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsTemplatesPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsTemplatesPostAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsTemplatesPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsTemplatesPutAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsTemplatesPutAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsTemplatesTemplateNameDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsTemplatesTemplateNameDeleteAsyncTest()
        {
            string templateName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsTemplatesTemplateNameDeleteAsync(templateName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsTemplatesTemplateNameFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsTemplatesTemplateNameFileGetAsyncTest()
        {
            string templateName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsTemplatesTemplateNameFileGetAsync(templateName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsTemplatesTemplateNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsTemplatesTemplateNameGetAsyncTest()
        {
            string templateName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsTemplatesTemplateNameGetAsync(templateName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsTemplatesTemplateNamePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsTemplatesTemplateNamePutAsyncTest()
        {
            string templateName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsTemplatesTemplateNamePutAsync(templateName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsTokensPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsTokensPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsTokensPostAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsVersionsBatchActionsFileextractPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsVersionsBatchActionsFileextractPostAsyncTest()
        {
            Client.Option<bool> source = default!;
            Client.Option<bool> renditions = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsVersionsBatchActionsFileextractPostAsync(source, renditions, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsVersionsBatchDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsVersionsBatchDeleteAsyncTest()
        {
            Client.Option<string> idParam = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsVersionsBatchDeleteAsync(idParam, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDocumentsVersionsBatchPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDocumentsVersionsBatchPostAsyncTest()
        {
            Client.Option<string> idParam = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIMigrationMode = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDocumentsVersionsBatchPostAsync(idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDomainGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDomainGetAsyncTest()
        {
            Client.Option<bool> includeApplication = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDomainGetAsync(includeApplication, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsDomainsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsDomainsGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsDomainsGetAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsEdlMatchedDocumentsBatchActionsAddPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsEdlMatchedDocumentsBatchActionsAddPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsEdlMatchedDocumentsBatchActionsAddPostAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsEdlMatchedDocumentsBatchActionsRemovePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsEdlMatchedDocumentsBatchActionsRemovePostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsEdlMatchedDocumentsBatchActionsRemovePostAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsGroupsAutoGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsGroupsAutoGetAsyncTest()
        {
            Client.Option<string> limit = default!;
            Client.Option<string> offset = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsGroupsAutoGetAsync(limit, offset, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsGroupsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsGroupsGetAsyncTest()
        {
            Client.Option<string> includeImplied = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsGroupsGetAsync(includeImplied, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsGroupsGroupIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsGroupsGroupIdDeleteAsyncTest()
        {
            string groupId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsGroupsGroupIdDeleteAsync(groupId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsGroupsGroupIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsGroupsGroupIdGetAsyncTest()
        {
            string groupId = default!;
            Client.Option<bool> includeImplied = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsGroupsGroupIdGetAsync(groupId, includeImplied, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsGroupsGroupIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsGroupsGroupIdPutAsyncTest()
        {
            string groupId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsGroupsGroupIdPutAsync(groupId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsGroupsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsGroupsPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsGroupsPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsLicensesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsLicensesGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsLicensesGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsActionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsActionsGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsActionsGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsActionsWorkflowNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsActionsWorkflowNameGetAsyncTest()
        {
            string workflowName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsActionsWorkflowNameGetAsync(workflowName, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsActionsWorkflowNamePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsActionsWorkflowNamePostAsyncTest()
        {
            string workflowName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsActionsWorkflowNamePostAsync(workflowName, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsGetAsyncTest()
        {
            Client.Option<string> objectV = default!;
            Client.Option<string> recordIdV = default!;
            Client.Option<string> participant = default!;
            Client.Option<string> statusV = default!;
            Client.Option<string> offset = default!;
            Client.Option<string> pageSize = default!;
            Client.Option<string> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsGetAsync(objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksGetAsyncTest()
        {
            Client.Option<string> objectV = default!;
            Client.Option<string> recordIdV = default!;
            Client.Option<string> assigneeV = default!;
            Client.Option<string> statusV = default!;
            Client.Option<string> offset = default!;
            Client.Option<string> pageSize = default!;
            Client.Option<string> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksGetAsync(objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdActionsAcceptPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdActionsAcceptPostAsyncTest()
        {
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdActionsAcceptPostAsync(taskId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdActionsCancelPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdActionsCancelPostAsyncTest()
        {
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdActionsCancelPostAsync(taskId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdActionsCompletePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdActionsCompletePostAsyncTest()
        {
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdActionsCompletePostAsync(taskId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdActionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdActionsGetAsyncTest()
        {
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdActionsGetAsync(taskId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostAsyncTest()
        {
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostAsync(taskId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostAsyncTest()
        {
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostAsync(taskId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostAsyncTest()
        {
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostAsync(taskId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostAsyncTest()
        {
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostAsync(taskId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdActionsReassignPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdActionsReassignPostAsyncTest()
        {
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdActionsReassignPostAsync(taskId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetAsyncTest()
        {
            string taskId = default!;
            string taskAction = default!;
            Client.Option<string> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetAsync(taskId, taskAction, loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostAsyncTest()
        {
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostAsync(taskId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostAsyncTest()
        {
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostAsync(taskId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsTasksTaskIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsTasksTaskIdGetAsyncTest()
        {
            string taskId = default!;
            Client.Option<bool> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsTasksTaskIdGetAsync(taskId, loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsWorkflowIdActionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsWorkflowIdActionsGetAsyncTest()
        {
            string workflowId = default!;
            Client.Option<string> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsWorkflowIdActionsGetAsync(workflowId, loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetAsyncTest()
        {
            string workflowId = default!;
            string workflowAction = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetAsync(workflowId, workflowAction, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostAsyncTest()
        {
            string workflowId = default!;
            string workflowAction = default!;
            Client.Option<string> documentsSys = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostAsync(workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsObjectworkflowsWorkflowIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsObjectworkflowsWorkflowIdGetAsyncTest()
        {
            string workflowId = default!;
            Client.Option<bool> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsObjectworkflowsWorkflowIdGetAsync(workflowId, loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsPicklistsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsPicklistsGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsPicklistsGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsPicklistsPicklistNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsPicklistsPicklistNameGetAsyncTest()
        {
            string picklistName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsPicklistsPicklistNameGetAsync(picklistName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsPicklistsPicklistNamePicklistValueNameDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsPicklistsPicklistNamePicklistValueNameDeleteAsyncTest()
        {
            string picklistName = default!;
            string picklistValueName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsPicklistsPicklistNamePicklistValueNameDeleteAsync(picklistName, picklistValueName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsPicklistsPicklistNamePicklistValueNamePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsPicklistsPicklistNamePicklistValueNamePutAsyncTest()
        {
            string picklistName = default!;
            string picklistValueName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsPicklistsPicklistNamePicklistValueNamePutAsync(picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsPicklistsPicklistNamePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsPicklistsPicklistNamePostAsyncTest()
        {
            string picklistName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsPicklistsPicklistNamePostAsync(picklistName, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsPicklistsPicklistNamePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsPicklistsPicklistNamePutAsyncTest()
        {
            string picklistName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsPicklistsPicklistNamePutAsync(picklistName, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxActionsBuildproductionPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxActionsBuildproductionPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxActionsBuildproductionPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxActionsPromoteproductionPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxActionsPromoteproductionPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxActionsPromoteproductionPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxActionsRecheckusagePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxActionsRecheckusagePostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxActionsRecheckusagePostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxBatchChangesizePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxBatchChangesizePostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxBatchChangesizePostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxEntitlementsSetPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxEntitlementsSetPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxEntitlementsSetPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxNameDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxNameDeleteAsyncTest()
        {
            string name = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxNameDeleteAsync(name, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxSnapshotApiNameActionsUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxSnapshotApiNameActionsUpdatePostAsyncTest()
        {
            string apiName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxSnapshotApiNameActionsUpdatePostAsync(apiName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxSnapshotApiNameActionsUpgradePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxSnapshotApiNameActionsUpgradePostAsyncTest()
        {
            string apiName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxSnapshotApiNameActionsUpgradePostAsync(apiName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxSnapshotApiNameDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxSnapshotApiNameDeleteAsyncTest()
        {
            string apiName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxSnapshotApiNameDeleteAsync(apiName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxSnapshotGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxSnapshotGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxSnapshotGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxSnapshotPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxSnapshotPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxSnapshotPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxVaultIdActionsRefreshPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxVaultIdActionsRefreshPostAsyncTest()
        {
            string vaultId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxVaultIdActionsRefreshPostAsync(vaultId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSandboxVaultIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSandboxVaultIdGetAsyncTest()
        {
            string vaultId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSandboxVaultIdGetAsync(vaultId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSecuritypoliciesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSecuritypoliciesGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSecuritypoliciesGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsSecuritypoliciesSecurityPolicyNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsSecuritypoliciesSecurityPolicyNameGetAsyncTest()
        {
            string securityPolicyName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsSecuritypoliciesSecurityPolicyNameGetAsync(securityPolicyName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsUsersGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsUsersGetAsyncTest()
        {
            Client.Option<string> vaults = default!;
            Client.Option<string> excludeVaultMembership = default!;
            Client.Option<string> excludeAppLicensing = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsUsersGetAsync(vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsUsersIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsUsersIdGetAsyncTest()
        {
            string id = default!;
            Client.Option<string> excludeVaultMembership = default!;
            Client.Option<string> excludeAppLicensing = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsUsersIdGetAsync(id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsUsersIdPermissionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsUsersIdPermissionsGetAsyncTest()
        {
            string id = default!;
            Client.Option<string> filter = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsUsersIdPermissionsGetAsync(id, filter, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsUsersIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsUsersIdPutAsyncTest()
        {
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsUsersIdPutAsync(id, authorization, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsUsersMeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsUsersMeGetAsyncTest()
        {
            Client.Option<string> excludeVaultMembership = default!;
            Client.Option<string> excludeAppLicensing = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsUsersMeGetAsync(excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsUsersMePasswordPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsUsersMePasswordPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsUsersMePasswordPostAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsUsersMePermissionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsUsersMePermissionsGetAsyncTest()
        {
            Client.Option<string> filter = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsUsersMePermissionsGetAsync(filter, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsUsersMePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsUsersMePutAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsUsersMePutAsync(authorization, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsUsersPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsUsersPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsUsersPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsUsersPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsUsersPutAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsUsersPutAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsUsersUserIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsUsersUserIdDeleteAsyncTest()
        {
            string userId = default!;
            Client.Option<bool> domain = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsUsersUserIdDeleteAsync(userId, domain, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsUsersUserIdVaultMembershipVaultIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsUsersUserIdVaultMembershipVaultIdPutAsyncTest()
        {
            string userId = default!;
            string vaultId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsUsersUserIdVaultMembershipVaultIdPutAsync(userId, vaultId, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsVaultActionsComparePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsVaultActionsComparePostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsVaultActionsComparePostAsync(authorization, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ObjectsVaultActionsConfigreportPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ObjectsVaultActionsConfigreportPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ObjectsVaultActionsConfigreportPostAsync(authorization, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test QueryComponentsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task QueryComponentsPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.QueryComponentsPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test QueryNextPagePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task QueryNextPagePostAsyncTest()
        {
            string nextPage = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<bool> xVaultAPIDescribeQuery = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.QueryNextPagePostAsync(nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test QueryPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task QueryPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<bool> xVaultAPIDescribeQuery = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.QueryPostAsync(authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test QueryPreviousPagePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task QueryPreviousPagePostAsyncTest()
        {
            string previousPage = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<bool> xVaultAPIDescribeQuery = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.QueryPreviousPagePostAsync(previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2MeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2MeGetAsyncTest()
        {
            Client.Option<string> attributes = default!;
            Client.Option<string> excludedAttributes = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2MeGetAsync(attributes, excludedAttributes, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2MePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2MePutAsyncTest()
        {
            Client.Option<string> attributes = default!;
            Client.Option<string> excludedAttributes = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2MePutAsync(attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2ResourceTypesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2ResourceTypesGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2ResourceTypesGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2ResourceTypesTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2ResourceTypesTypeGetAsyncTest()
        {
            string type = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2ResourceTypesTypeGetAsync(type, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2SchemasGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2SchemasGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2SchemasGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2SchemasIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2SchemasIdGetAsyncTest()
        {
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2SchemasIdGetAsync(id, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2ServiceProviderConfigGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2ServiceProviderConfigGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2ServiceProviderConfigGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2TypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2TypeGetAsyncTest()
        {
            string type = default!;
            Client.Option<string> filter = default!;
            Client.Option<string> attributes = default!;
            Client.Option<string> excludedAttributes = default!;
            Client.Option<string> sortBy = default!;
            Client.Option<string> sortOrder = default!;
            Client.Option<string> startIndex = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2TypeGetAsync(type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2TypeIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2TypeIdGetAsyncTest()
        {
            string type = default!;
            string id = default!;
            Client.Option<string> attributes = default!;
            Client.Option<string> excludedAttributes = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2TypeIdGetAsync(type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2UsersGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2UsersGetAsyncTest()
        {
            Client.Option<string> filter = default!;
            Client.Option<string> attributes = default!;
            Client.Option<string> excludedAttributes = default!;
            Client.Option<string> sortBy = default!;
            Client.Option<string> sortOrder = default!;
            Client.Option<string> count = default!;
            Client.Option<string> startIndex = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2UsersGetAsync(filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2UsersIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2UsersIdGetAsyncTest()
        {
            string id = default!;
            Client.Option<string> filter = default!;
            Client.Option<string> attributes = default!;
            Client.Option<string> excludedAttributes = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2UsersIdGetAsync(id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2UsersIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2UsersIdPutAsyncTest()
        {
            string id = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2UsersIdPutAsync(id, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ScimV2UsersPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScimV2UsersPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ScimV2UsersPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesCertificateCertIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesCertificateCertIdGetAsyncTest()
        {
            string certId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesCertificateCertIdGetAsync(certId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesConfigurationModeActionsDisablePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesConfigurationModeActionsDisablePostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesConfigurationModeActionsDisablePostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesConfigurationModeActionsEnablePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesConfigurationModeActionsEnablePostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesConfigurationModeActionsEnablePostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesDirectdataFilesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesDirectdataFilesGetAsyncTest()
        {
            Client.Option<string> extractType = default!;
            Client.Option<int> startTime = default!;
            Client.Option<int> stopTime = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesDirectdataFilesGetAsync(extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesDirectdataFilesNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesDirectdataFilesNameGetAsyncTest()
        {
            string name = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesDirectdataFilesNameGetAsync(name, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesFileStagingItemsContentItemGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesFileStagingItemsContentItemGetAsyncTest()
        {
            string item = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> range = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesFileStagingItemsContentItemGetAsync(item, authorization, accept, range, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesFileStagingItemsItemDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesFileStagingItemsItemDeleteAsyncTest()
        {
            string item = default!;
            Client.Option<string> recursive = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesFileStagingItemsItemDeleteAsync(item, recursive, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesFileStagingItemsItemGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesFileStagingItemsItemGetAsyncTest()
        {
            string item = default!;
            Client.Option<string> recursive = default!;
            Client.Option<string> limit = default!;
            Client.Option<string> formatResult = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesFileStagingItemsItemGetAsync(item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesFileStagingItemsItemPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesFileStagingItemsItemPutAsyncTest()
        {
            string item = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesFileStagingItemsItemPutAsync(item, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesFileStagingItemsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesFileStagingItemsPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentMD5 = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesFileStagingItemsPostAsync(authorization, accept, contentMD5, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesFileStagingUploadGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesFileStagingUploadGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesFileStagingUploadGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesFileStagingUploadPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesFileStagingUploadPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesFileStagingUploadPostAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesFileStagingUploadUploadSessionIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesFileStagingUploadUploadSessionIdDeleteAsyncTest()
        {
            string uploadSessionId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesFileStagingUploadUploadSessionIdDeleteAsync(uploadSessionId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesFileStagingUploadUploadSessionIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesFileStagingUploadUploadSessionIdGetAsyncTest()
        {
            string uploadSessionId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesFileStagingUploadUploadSessionIdGetAsync(uploadSessionId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesFileStagingUploadUploadSessionIdPartsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesFileStagingUploadUploadSessionIdPartsGetAsyncTest()
        {
            string uploadSessionId = default!;
            Client.Option<string> limit = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesFileStagingUploadUploadSessionIdPartsGetAsync(uploadSessionId, limit, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesFileStagingUploadUploadSessionIdPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesFileStagingUploadUploadSessionIdPostAsyncTest()
        {
            string uploadSessionId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesFileStagingUploadUploadSessionIdPostAsync(uploadSessionId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesFileStagingUploadUploadSessionIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesFileStagingUploadUploadSessionIdPutAsyncTest()
        {
            string uploadSessionId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIFilePartNumber = default!;
            Client.Option<string> contentMD5 = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesFileStagingUploadUploadSessionIdPutAsync(uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesJobsHistoriesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesJobsHistoriesGetAsyncTest()
        {
            Client.Option<string> startDate = default!;
            Client.Option<string> endDate = default!;
            Client.Option<string> status = default!;
            Client.Option<string> limit = default!;
            Client.Option<string> offset = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesJobsHistoriesGetAsync(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesJobsJobIdErrorsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesJobsJobIdErrorsGetAsyncTest()
        {
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesJobsJobIdErrorsGetAsync(jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesJobsJobIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesJobsJobIdGetAsyncTest()
        {
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesJobsJobIdGetAsync(jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesJobsJobIdSummaryGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesJobsJobIdSummaryGetAsyncTest()
        {
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesJobsJobIdSummaryGetAsync(jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesJobsJobIdTasksGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesJobsJobIdTasksGetAsyncTest()
        {
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesJobsJobIdTasksGetAsync(jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesJobsMonitorsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesJobsMonitorsGetAsyncTest()
        {
            Client.Option<string> startDate = default!;
            Client.Option<string> endDate = default!;
            Client.Option<string> status = default!;
            Client.Option<string> limit = default!;
            Client.Option<string> offset = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesJobsMonitorsGetAsync(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesJobsStartNowJobIdPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesJobsStartNowJobIdPostAsyncTest()
        {
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesJobsStartNowJobIdPostAsync(jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesLoaderExtractPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesLoaderExtractPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesLoaderExtractPostAsync(authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesLoaderJobIdTasksTaskIdFailurelogGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesLoaderJobIdTasksTaskIdFailurelogGetAsyncTest()
        {
            string jobId = default!;
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesLoaderJobIdTasksTaskIdFailurelogGetAsync(jobId, taskId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesLoaderJobIdTasksTaskIdResultsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesLoaderJobIdTasksTaskIdResultsGetAsyncTest()
        {
            string jobId = default!;
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesLoaderJobIdTasksTaskIdResultsGetAsync(jobId, taskId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesLoaderJobIdTasksTaskIdResultsRenditionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesLoaderJobIdTasksTaskIdResultsRenditionsGetAsyncTest()
        {
            string jobId = default!;
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesLoaderJobIdTasksTaskIdResultsRenditionsGetAsync(jobId, taskId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesLoaderJobIdTasksTaskIdSuccesslogGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesLoaderJobIdTasksTaskIdSuccesslogGetAsyncTest()
        {
            string jobId = default!;
            string taskId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesLoaderJobIdTasksTaskIdSuccesslogGetAsync(jobId, taskId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesLoaderLoadPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesLoaderLoadPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesLoaderLoadPostAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesPackageActionsValidatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesPackageActionsValidatePostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesPackageActionsValidatePostAsync(authorization, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesPackagePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesPackagePostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesPackagePostAsync(authorization, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesPackagePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesPackagePutAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesPackagePutAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesQueuesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesQueuesGetAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesQueuesGetAsync(authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesQueuesQueueNameActionsDisableDeliveryPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesQueuesQueueNameActionsDisableDeliveryPutAsyncTest()
        {
            string queueName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesQueuesQueueNameActionsDisableDeliveryPutAsync(queueName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesQueuesQueueNameActionsEnableDeliveryPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesQueuesQueueNameActionsEnableDeliveryPutAsyncTest()
        {
            string queueName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesQueuesQueueNameActionsEnableDeliveryPutAsync(queueName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesQueuesQueueNameActionsResetPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesQueuesQueueNameActionsResetPutAsyncTest()
        {
            string queueName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesQueuesQueueNameActionsResetPutAsync(queueName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesQueuesQueueNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesQueuesQueueNameGetAsyncTest()
        {
            string queueName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesQueuesQueueNameGetAsync(queueName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test ServicesVobjectVaultPackageVPackageIdActionsValidatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ServicesVobjectVaultPackageVPackageIdActionsValidatePostAsyncTest()
        {
            string packageId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.ServicesVobjectVaultPackageVPackageIdActionsValidatePostAsync(packageId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test SessionDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SessionDeleteAsyncTest()
        {
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.SessionDeleteAsync(accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test UicodeDistributionsDistributionNameCodeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UicodeDistributionsDistributionNameCodeGetAsyncTest()
        {
            string distributionName = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.UicodeDistributionsDistributionNameCodeGetAsync(distributionName, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test UicodeDistributionsDistributionNameDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UicodeDistributionsDistributionNameDeleteAsyncTest()
        {
            string distributionName = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.UicodeDistributionsDistributionNameDeleteAsync(distributionName, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test UicodeDistributionsDistributionNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UicodeDistributionsDistributionNameGetAsyncTest()
        {
            string distributionName = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.UicodeDistributionsDistributionNameGetAsync(distributionName, accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test UicodeDistributionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UicodeDistributionsGetAsyncTest()
        {
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.UicodeDistributionsGetAsync(accept, authorization, xVaultAPIClientID);
        }

        /// <summary>
        /// Test UicodeDistributionsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UicodeDistributionsPostAsyncTest()
        {
            Client.Option<string> accept = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.UicodeDistributionsPostAsync(accept, authorization, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectVaultPackageVPackageIdActionsDeployPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectVaultPackageVPackageIdActionsDeployPostAsyncTest()
        {
            string packageId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectVaultPackageVPackageIdActionsDeployPostAsync(packageId, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectVaultPackageVPackageIdActionsDeployResultsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectVaultPackageVPackageIdActionsDeployResultsGetAsyncTest()
        {
            string packageId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectVaultPackageVPackageIdActionsDeployResultsGetAsync(packageId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetAsyncTest()
        {
            string objectName = default!;
            string jobStatus = default!;
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetAsync(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsDeepcopyResultsObjectNameJobStatusJobIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsDeepcopyResultsObjectNameJobStatusJobIdGetAsyncTest()
        {
            string objectName = default!;
            string jobStatus = default!;
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsDeepcopyResultsObjectNameJobStatusJobIdGetAsync(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsEdlItemVActionsCreateplaceholderPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsEdlItemVActionsCreateplaceholderPostAsyncTest()
        {
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsEdlItemVActionsCreateplaceholderPostAsync(authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsMergesJobIdLogGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsMergesJobIdLogGetAsyncTest()
        {
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsMergesJobIdLogGetAsync(jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsMergesJobIdResultsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsMergesJobIdResultsGetAsyncTest()
        {
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsMergesJobIdResultsGetAsync(jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsMergesJobIdStatusGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsMergesJobIdStatusGetAsyncTest()
        {
            string jobId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsMergesJobIdStatusGetAsync(jobId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameActionsActionNamePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameActionsActionNamePostAsyncTest()
        {
            string objectName = default!;
            string actionName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameActionsActionNamePostAsync(objectName, actionName, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameActionsChangetypePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameActionsChangetypePostAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameActionsChangetypePostAsync(objectName, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameActionsMergePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameActionsMergePostAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            Client.Option<List<VobjectsObjectNameActionsMergePostRequestInner>> vobjectsObjectNameActionsMergePostRequestInner = default!;
            await _instance.VobjectsObjectNameActionsMergePostAsync(objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner);
        }

        /// <summary>
        /// Test VobjectsObjectNameActionsRecalculaterollupsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameActionsRecalculaterollupsGetAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameActionsRecalculaterollupsGetAsync(objectName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameActionsRecalculaterollupsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameActionsRecalculaterollupsPostAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameActionsRecalculaterollupsPostAsync(objectName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameActionsUpdatecorporatecurrencyPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameActionsUpdatecorporatecurrencyPutAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameActionsUpdatecorporatecurrencyPutAsync(objectName, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameAttachmentsBatchDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameAttachmentsBatchDeleteAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> idParam = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameAttachmentsBatchDeleteAsync(objectName, idParam, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameAttachmentsBatchPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameAttachmentsBatchPostAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameAttachmentsBatchPostAsync(objectName, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameAttachmentsBatchPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameAttachmentsBatchPutAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameAttachmentsBatchPutAsync(objectName, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameDeleteAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameDeleteAsync(objectName, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameIdRolesRoleNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameIdRolesRoleNameGetAsyncTest()
        {
            string objectName = default!;
            string id = default!;
            string roleName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameIdRolesRoleNameGetAsync(objectName, id, roleName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdActionsActionNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdActionsActionNameGetAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            string actionName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdActionsActionNameGetAsync(objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdActionsActionNamePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdActionsActionNamePostAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            string actionName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdActionsActionNamePostAsync(objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdActionsCascadedeletePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdActionsCascadedeletePostAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdActionsCascadedeletePostAsync(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdActionsDeepcopyPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdActionsDeepcopyPostAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdActionsDeepcopyPostAsync(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdActionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdActionsGetAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            Client.Option<bool> loc = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdActionsGetAsync(objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            string attachmentFieldName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetAsync(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            string attachmentFieldName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostAsync(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetAsync(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            string attachmentId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteAsync(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            string attachmentId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetAsync(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            string attachmentId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutAsync(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            string attachmentId = default!;
            string attachmentVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteAsync(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            string attachmentId = default!;
            string attachmentVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetAsync(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            string attachmentId = default!;
            string attachmentVersion = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetAsync(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            string attachmentId = default!;
            string attachmentVersion = default!;
            Client.Option<bool> restore = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostAsync(objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            string attachmentId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetAsync(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentsFileGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentsFileGetAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentsFileGetAsync(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentsGetAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentsGetAsync(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAttachmentsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAttachmentsPostAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAttachmentsPostAsync(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdAudittrailGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdAudittrailGetAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            Client.Option<string> startDate = default!;
            Client.Option<string> endDate = default!;
            Client.Option<string> formatResult = default!;
            Client.Option<string> limit = default!;
            Client.Option<string> offset = default!;
            Client.Option<string> events = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdAudittrailGetAsync(objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameObjectRecordIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameObjectRecordIdGetAsyncTest()
        {
            string objectName = default!;
            string objectRecordId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameObjectRecordIdGetAsync(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNamePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNamePostAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> idParam = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<bool> xVaultAPIMigrationMode = default!;
            Client.Option<bool> xVaultAPINoTriggers = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNamePostAsync(objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNamePut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNamePutAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> accept = default!;
            Client.Option<bool> xVaultAPIMigrationMode = default!;
            Client.Option<bool> xVaultAPINoTriggers = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNamePutAsync(objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameRolesDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameRolesDeleteAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameRolesDeleteAsync(objectName, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsObjectNameRolesPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsObjectNameRolesPostAsyncTest()
        {
            string objectName = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsObjectNameRolesPostAsync(objectName, authorization, accept, contentType, xVaultAPIClientID);
        }

        /// <summary>
        /// Test VobjectsOutboundPackageVPackageIdDependenciesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VobjectsOutboundPackageVPackageIdDependenciesGetAsyncTest()
        {
            string packageId = default!;
            Client.Option<string> authorization = default!;
            Client.Option<string> accept = default!;
            Client.Option<string> xVaultAPIClientID = default!;
            await _instance.VobjectsOutboundPackageVPackageIdDependenciesGetAsync(packageId, authorization, accept, xVaultAPIClientID);
        }
    }
}
